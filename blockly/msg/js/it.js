// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.it');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Aggiungi commento";
Blockly.Msg.AUTH = "Autorizza questa applicazione per consentire di salvare il tuo lavoro e per essere condiviso.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Modifica valore:";
Blockly.Msg.CHAT = "Chatta con il tuo collaboratore scrivendo in questo box!";
Blockly.Msg.CLEAN_UP = "Pulisci i blocchi";
Blockly.Msg.COLLAPSE_ALL = "Comprimi blocchi";
Blockly.Msg.COLLAPSE_BLOCK = "Comprimi blocco";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colore 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colore 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "rapporto";
Blockly.Msg.COLOUR_BLEND_TITLE = "miscela";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mescola due colori insieme con un determinato rapporto (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://it.wikipedia.org/wiki/Colore";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Scegli un colore dalla tavolozza.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "colore casuale";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Scegli un colore a caso.";
Blockly.Msg.COLOUR_RGB_BLUE = "blu";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "rosso";
Blockly.Msg.COLOUR_RGB_TITLE = "colora con";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crea un colore con la quantità specificata di rosso, verde e blu. Tutti i valori devono essere compresi tra 0 e 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "esce dal ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "prosegui con la successiva iterazione del ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Esce dal ciclo.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Salta il resto di questo ciclo e prosegue con la successiva iterazione.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Attenzioneː Questo blocco può essere usato solo in un ciclo.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "per ogni elemento %1 nella lista %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Per ogni elemento in una lista, imposta la variabile '%1'  pari all'elemento e quindi esegue alcune istruzioni.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "conta con %1 da %2 a %3 per %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Fa sì che la variabile '%1' prenda tutti i valori a partire dal numero di partenza fino a quello di arrivo, con passo pari all'intervallo specificato, ed esegue il blocco indicato.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Aggiungi una condizione al blocco se.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Aggiungi una condizione finale pigliatutto al blocco se.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Aggiungi, elimina o riordina le sezioni per riconfigurare questo blocco se.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "altrimenti";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "altrimenti se";
Blockly.Msg.CONTROLS_IF_MSG_IF = "se";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Se un valore è vero allora esegue alcune istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Se un valore è vero allora esegue il primo blocco di istruzioni. Altrimenti esegue il secondo blocco di istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni. Se nessuno dei valori è vero esegue l'ultimo blocco di istruzioni.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://it.wikipedia.org/wiki/Ciclo_for";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "fai";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "ripeti %1 volte";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Esegue alcune istruzione diverse volte.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "ripeti fino a che";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "ripeti mentre";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Finché un valore è falso, esegue alcune istruzioni.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Finché un valore è vero, esegue alcune istruzioni.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Cancellare tutti i %1 blocchi?";
Blockly.Msg.DELETE_BLOCK = "Cancella blocco";
Blockly.Msg.DELETE_X_BLOCKS = "Cancella %1 blocchi";
Blockly.Msg.DISABLE_BLOCK = "Disattiva blocco";
Blockly.Msg.DUPLICATE_BLOCK = "Duplica";
Blockly.Msg.ENABLE_BLOCK = "Attiva blocco";
Blockly.Msg.EXPAND_ALL = "Espandi blocchi";
Blockly.Msg.EXPAND_BLOCK = "Espandi blocco";
Blockly.Msg.EXTERNAL_INPUTS = "Ingressi esterni";
Blockly.Msg.HELP = "Aiuto";
Blockly.Msg.INLINE_INPUTS = "Ingressi in linea";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "crea lista vuota";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Restituisce una lista, di lunghezza 0, contenente nessun record di dati";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare il blocco lista.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crea lista con";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Aggiunge un elemento alla lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crea una lista con un certo numero di elementi.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primo";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# dalla fine";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "prendi";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "prendi e rimuovi";
Blockly.Msg.LISTS_GET_INDEX_LAST = "ultimo";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "casuale";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "rimuovi";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Restituisce il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Restituisce l'elemento nella posizione indicata della lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Restituisce l'elemento nella posizione indicata della lista. 1 corrisponde al primo elemento della lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Restituisce l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Restituisce un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Rimuove e restituisce il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Rimuove e restituisce l'elemento nella posizione indicata in una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Rimuove e restituisce l'elemento nella posizione indicata in una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Restituisce e rimuove l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Restituisce e rimuove un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Rimuove il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Rimuove l'elemento nella posizione indicata in una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Rimuove l'elemento nella posizione indicata in una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Rimuove l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Rimuove un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "da # dalla fine";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "fino a #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "dagli ultimi";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "prendi sotto-lista dall'inizio";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "prendi sotto-lista da # dalla fine";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "prendi sotto-lista da #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea una copia della porzione specificata di una lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "trova la prima occorrenza dell'elemento";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "trova l'ultima occorrenza dell'elemento";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Restituisce l'indice della prima/ultima occorrenza dell'elemento nella lista. Restituisce 0 se l'elemento non viene trovato.";
Blockly.Msg.LISTS_INLIST = "nella lista";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 è vuota";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Restituisce vero se la lista è vuota.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "lunghezza di %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Restituisce la lunghezza della lista";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "crea una lista con l'elemento %1 ripetuto %2 volte";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea una lista costituita dal valore indicato ripetuto per il numero di volte specificato.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "come";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserisci in";
Blockly.Msg.LISTS_SET_INDEX_SET = "imposta";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserisci l'elemento all'inizio della lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserisci l'elemento nella posizione indicata in una lista. #1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserisci un elemento nella posizione indicata in una lista. #1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Aggiungi un elemento alla fine di una lista";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserisce l'elemento casualmente in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Imposta il primo elemento in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Imposta l'elemento nella posizione indicata di una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Imposta l'elemento nella posizione indicata di una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Imposta l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Imposta un elemento casuale in una lista.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "crescente";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "decrescente";
Blockly.Msg.LISTS_SORT_TITLE = "ordinamento %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Ordina una copia di un elenco.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alfabetico, ignorare differenze maiuscole e minuscole";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numerico";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alfabetico";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "crea lista da testo";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "crea testo da lista";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Unisci una lista di testi in un unico testo, separato da un delimitatore.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Dividi il testo in un elenco di testi, interrompendo ad ogni delimitatore.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "con delimitatore";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falso";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Restituisce vero o falso.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "vero";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://it.wikipedia.org/wiki/Disuguaglianza";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Restituisce vero se gli input sono uno uguale all'altro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Restituisce vero se il primo input è maggiore o uguale al secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Restituisce uguale se il primo input è maggiore o uguale al secondo input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Restituisce vero se il primo input è minore del secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Restituisce vero se il primo input è minore o uguale al secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Restituisce vero se gli input non sono uno uguale all'altro.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "non %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Restituisce vero se l'input è falso. Restituisce falso se l'input è vero.";
Blockly.Msg.LOGIC_NULL = "nullo";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Restituisce valore nullo.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "o";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Restituisce vero se entrambi gli input sono veri.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Restituisce vero se almeno uno degli input è vero.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "se falso";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "se vero";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Verifica la condizione in 'test'. Se questa è vera restituisce il valore 'se vero' altrimenti restituisce il valore 'se falso'.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://it.wikipedia.org/wiki/Aritmetica";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Restituisce la somma dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Restituisce il quoziente dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Restituisce la differenza dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Restituisce il prodotto dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Restituisce il primo numero elevato alla potenza del secondo numero.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://it.wikipedia.org/wiki/Addizione";
Blockly.Msg.MATH_CHANGE_TITLE = "cambia %1 di %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Aggiunge un numero alla variabile '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://it.wikipedia.org/wiki/Costante_matematica";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Restituisce una delle costanti comuniː π (3.141…), e (2.718…), φ (1.618…), radq(2) (1.414…), radq(½) (0.707…) o ∞ (infinito).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "costringi %1 da %2 a %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Costringe un numero all'interno dei limiti indicati (compresi).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "è divisibile per";
Blockly.Msg.MATH_IS_EVEN = "è pari";
Blockly.Msg.MATH_IS_NEGATIVE = "è negativo";
Blockly.Msg.MATH_IS_ODD = "è dispari";
Blockly.Msg.MATH_IS_POSITIVE = "è positivo";
Blockly.Msg.MATH_IS_PRIME = "è primo";
Blockly.Msg.MATH_IS_TOOLTIP = "Verifica se un numero è pari, dispari, primo, intero, positivo, negativo o se è divisibile per un certo numero. Restituisce vero o falso.";
Blockly.Msg.MATH_IS_WHOLE = "è intero";
Blockly.Msg.MATH_MODULO_HELPURL = "https://it.wikipedia.org/wiki/Resto";
Blockly.Msg.MATH_MODULO_TITLE = "resto di %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Restituisce il resto della divisione di due numeri.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://it.wikipedia.org/wiki/Numero";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un numero.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "media della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "massimo della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimo della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "mode della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento casuale della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "deviazione standard della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "somma la lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Restituisce la media (media aritmetica) dei valori numerici nella lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Restituisce il più grande numero della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Restituisce il valore mediano della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Restituisce il più piccolo numero della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Restituisce una lista degli elementi più frequenti nella lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Restituisce un elemento casuale della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Restituisce la deviazione standard della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Restituisce la somma si tutti i numeri nella lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "frazione casuale";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Restituisce una frazione compresa fra 0.0 (incluso) e 1.0 (escluso).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "intero casuale da %1 a %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Restituisce un numero intero casuale compreso tra i due limiti indicati (inclusi).";
Blockly.Msg.MATH_ROUND_HELPURL = "https://it.wikipedia.org/wiki/Arrotondamento";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arrotonda";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arrotonda verso il basso";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arrotonda verso l'alto";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arrotonda un numero verso l'alto o verso il basso.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://it.wikipedia.org/wiki/Radice_quadrata";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "assoluto";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "radice quadrata";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Restituisce il valore assoluto del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Restituisce e elevato alla potenza del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Restituisce il logaritmo naturale del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Restituisce il logaritmo in base 10 del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Restituisce l'opposto del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Restituisce 10 elevato alla potenza del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Restituisce la radice quadrata del numero.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://it.wikipedia.org/wiki/Funzione_trigonometrica";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Restituisce l'arco-coseno di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Restituisce l'arco-seno di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Restituisce l'arco-tangente di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Restituisce il coseno di un angolo espresso in gradi (non radianti).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Restituisce il seno di un angolo espresso in gradi (non radianti).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Restituisce la tangente di un angolo espresso in gradi (non radianti).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "Nuova variabile...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nome della nuova variabile:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "consenti dichiarazioni";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "conː";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://it.wikipedia.org/wiki/Funzione_(informatica)";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Esegue la funzione definita dall'utente '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://it.wikipedia.org/wiki/Funzione_(informatica)";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Esegue la funzione definita dall'utente '%1' ed usa il suo output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "conː";
Blockly.Msg.PROCEDURES_CREATE_DO = "Crea '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Descrivi questa funzione...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "fai qualcosa";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "per";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea una funzione senza output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "ritorna";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea una funzione con un output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Attenzioneː Questa funzione ha parametri duplicati.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Evidenzia definizione di funzione";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Se un valore è vero allora restituisce un secondo valore.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Attenzioneː Questo blocco può essere usato solo all'interno di una definizione di funzione.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nome inputː";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Aggiungi un input alla funzione.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "input";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Aggiungi, rimuovi o riordina input alla funzione.";
Blockly.Msg.REDO = "Ripeti";
Blockly.Msg.REMOVE_COMMENT = "Rimuovi commento";
Blockly.Msg.RENAME_VARIABLE = "Rinomina variabile...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rinomina tutte le variabili '%1' in:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "aggiungi il testo";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "a";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Aggiunge del testo alla variabile '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "in minuscolo";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "con Iniziali Maiuscole";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "in MAIUSCOLO";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Restituisce una copia del testo in un diverso formato maiuscole/minuscole.";
Blockly.Msg.TEXT_CHARAT_FIRST = "prendi la prima lettera";
Blockly.Msg.TEXT_CHARAT_FROM_END = "prendi la lettera # dalla fine";
Blockly.Msg.TEXT_CHARAT_FROM_START = "prendi la lettera #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "nel testo";
Blockly.Msg.TEXT_CHARAT_LAST = "prendi l'ultima lettera";
Blockly.Msg.TEXT_CHARAT_RANDOM = "prendi lettera casuale";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Restituisce la lettera nella posizione indicata.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Aggiungi un elemento al testo.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unisci";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare questo blocco testo.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "alla lettera # dalla fine";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "alla lettera #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "all'ultima lettera";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "nel testo";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "prendi sotto-stringa dalla prima lettera";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "prendi sotto-stringa dalla lettera # dalla fine";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "prendi sotto-stringa dalla lettera #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Restituisce la porzione di testo indicata.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "nel testo";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "trova la prima occorrenza del testo";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "trova l'ultima occorrenza del testo";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Restituisce l'indice della prima occorrenza del primo testo all'interno del secondo testo. Restituisce 0 se il testo non viene trovato.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 è vuoto";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Restituisce vero se il testo fornito è vuoto.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "crea testo con";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Crea un blocco di testo unendo un certo numero di elementi.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "lunghezza di %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Restituisce il numero di lettere (inclusi gli spazi) nel testo fornito.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "scrivi %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Scrive il testo, numero o altro valore indicato.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Richiedi un numero all'utente.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Richiede del testo da parte dell'utente.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "richiedi numero con messaggio";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "richiedi testo con messaggio";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://it.wikipedia.org/wiki/Stringa_(informatica)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Una lettera, una parola o una linea di testo.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "rimuovi spazi da entrambi gli estremi";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "rimuovi spazi a sinistra";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "rimuovi spazi a destra";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Restituisce una copia del testo con gli spazi rimossi ad uno o entrambe le estremità.";
Blockly.Msg.TODAY = "Oggi";
Blockly.Msg.UNDO = "Annulla";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "elemento";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crea 'imposta %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Restituisce il valore di una variabile.";
Blockly.Msg.VARIABLES_SET = "imposta %1 a %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Crea 'prendi %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Imposta questa variabile ad essere pari all'input.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_180SERVO = "0~180 degree Servo (angle)";  // untranslated
Blockly.Msg.ARD_360SERVO = "0~360 degree Servo (rotation)";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT = "7-Segment Display";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_TIP = "7-Segment LED Display can be used to show numbers and some characters. It has 7 segments and 1 dot, requiring 8 digital pins on the Arduino to use.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_WARN = "Pin used in segment %1 is also present in one of the other segments! Change the pin number.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE = "show number";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG = "Set segment";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG_TIP = "Set a specific segment of the 7-Segment display high";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE_TIP = "Write a specific number to the 7-segment display. Number must be between 0 and 9, otherwise nothing is shown.";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE = "Move AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE_TIP = "Move Servo to a specified angle gradually over the animation duration. You can combine this with other servo movements";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_WRITE = "Set AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE = "Animate AllBot";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESERVOS = "Servos";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESPEED = "Animation duration (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE_TIP = "Animate the allbot by moving different servos at the same time. Total duration of this animation can be set. A servo may have only one movement block present.";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTLEFT = "ankleFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTRIGHT = "ankleFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLELEFT = "ankleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLELEFT = "ankleMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLERIGHT = "ankleMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARLEFT = "ankleRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARRIGHT = "ankleRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLERIGHT = "ankleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_BACKWARD = "AllBot Backward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP = "AllBot Chirp:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRPSPEED = "beeps, beepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP_TIP = "Make the allbot chirp a number of beeps at the given speed (delay in microseconds, use 1 to 255)";  // untranslated
Blockly.Msg.ARD_ALLBOT_FORWARD = "AllBot Forward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTLEFT = "hipFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTRIGHT = "hipFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPLEFT = "hipLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLELEFT = "hipMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLERIGHT = "hipMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARLEFT = "hipRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARRIGHT = "hipRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPRIGHT = "hipRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTLEFT = "kneeFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTRIGHT = "kneeFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLELEFT = "kneeMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLERIGHT = "kneeMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARLEFT = "kneeRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARRIGHT = "kneeRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_LEFT = "AllBot Left:";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKLEFT = "AllBot Look Left, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKRIGHT = "AllBot Look Right, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOK_TIP = "Make the allbot look towards a specific direction with the given speed (ms)";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC = "AllBot Remote Control Handling";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND = "On receiving command ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMANDS = "Commands ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_SINGLE = "This block must be inside an AllBot Remote Control block ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_TIP = "Set the actions the AllBot must do on receiving a command.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCDO = "Do ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCSERIAL = "Use Serial to view Commands";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED = "RC Speed";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED_TIP = "The speed as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES = "RC Times";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES_TIP = "The times (number of steps) as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIP = "A block to react to the AllBot Remote Control App on your smarthphone. Check Serial to see in the serial monitor what commands are received. Note: Your AllBot shield must be switched to RECEIVE after programming it.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RIGHT = "AllBot Right:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED = "AllBot Look Scared:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCAREDBEEPS = "shakes, beeps:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED_TIP = "Make the allbot shake the given number of shakes, and beep the given number of beeps ";  // untranslated
Blockly.Msg.ARD_ALLBOT_SERVOHUB = "AllBot Servo motor";  // untranslated
Blockly.Msg.ARD_ALLBOT_STEPS = "steps, stepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_WALK_TIP = "Make the allbot move a number of steps with the given speed (ms) for one step";  // untranslated
Blockly.Msg.ARD_ANALOGREAD = "leggi pin analogico #";
Blockly.Msg.ARD_ANALOGREAD_TIP = "Ritorna un valore tra 0 e 1024";
Blockly.Msg.ARD_ANALOGWRITE = "imposta il pin analogico #";
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Scrivi un valore analogico fra 0 e 255 su una Porta PWM specifica";
Blockly.Msg.ARD_ANASENSOR = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_COMPONENT = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_DEFAULT_NAME = "AnaSensor1";  // untranslated
Blockly.Msg.ARD_ANASENSOR_READ = "Read analog sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_TIP = "Connect an analog sensor to an analog pin, so as to read its value. On an Arduino UNO a value between 0 and 1024 is returned, corresponding to a measured value between 0 and 5V. Eg.: an LDR sensor, a potmeter, ...";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN = "as analog input";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN_TIP = "Declare a variable as a analog input pin";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN = "as analg output";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN_TIP = "Declare a variable as a analog PWM output pin";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER = "as boolean";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER_TIP = "Declare a variable as boolean with value true or false";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN = "as digital input";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN_TIP = "Declare a variable as a digital input pin";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN = "as digital output";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN_TIP = "Declare a variable as a digital output pin";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER = "as decimal number";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER_TIP = "Declare a variable as a decimal number, eg 3.6 or 5e4 or -3.14";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER = "as integer number";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER_TIP = "Declare a variable as integer, -32768 to 32767";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER = "as long integer number";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER_TIP = "Declare a variable as a long integer, -2,147,483,648 to 2,147,483,647";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER = "as positive integer number";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER_TIP = "Declare a variable as a positive integer, 0 to 65535";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER = "as long positive integer number";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER_TIP = "Declare a variable as a long positive integer, 0 to 4,294,967,295";  // untranslated
Blockly.Msg.ARD_BLOCKS = "You have this block twice on the canvas. That is once too many!";  // untranslated
Blockly.Msg.ARD_BOARD = "Board";  // untranslated
Blockly.Msg.ARD_BOARD_WARN = "This block requires as board %1, but or a duplicate block is present or another block is present that requires another Arduino board!";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "imposta il LED on-board";
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Accendi o spegni il LED on-board di Arduino";
Blockly.Msg.ARD_BUTTON_COMPONENT = "Push Button";  // untranslated
Blockly.Msg.ARD_BUTTON_DEFAULT_NAME = "PushButton1";  // untranslated
Blockly.Msg.ARD_BUTTON_IFPUSHED = "If pushed we measure value";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_CLICK = " is clicked";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_IF = "If button";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_LONGCLICK = "is undergoing a long click";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PRESSED = "is being pressed";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_COMPONENT = "Pushbutton 2-wire no resistor";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_TIP = "A push button which can be ON or OFF, connected to the Arduino with 2 wires: GND, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_THEN = "do";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_TIP = "Check the input received on a button, and react to it. This function does not block your program if you do not check the checkbox to wait for a click. A click is a press and a release of the button, a long press a click and holding long time before you release, press is active as soon as the button is pressed down.";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_WAIT = "wait for a click to happen";  // untranslated
Blockly.Msg.ARD_BUTTON_READ = "Read value button";  // untranslated
Blockly.Msg.ARD_BUTTON_TIP = "A push button which can be ON or OFF, connected to the Arduino with 3 wires: GND, 5V over resisotor, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUZNOTONE = "No tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZNOTONE_TIP = "Stop generating a tone on the buzzer";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_COMPONENT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_DEFAULT_NAME = "MyBuzzer1";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_TIP = "This component is a Buzzer or a Loudspeaker. You can connect it to a digital pin of the Arduino.";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH = "Pitch";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH_TIP = "Select the pitch you want. This block returns a number which is the frequency of the selected pitch.";  // untranslated
Blockly.Msg.ARD_BUZSETPITCH = "with pitch";  // untranslated
Blockly.Msg.ARD_BUZSETTONE = "Set tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZZEROUTPUT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_COMMENT = "Comment";  // untranslated
Blockly.Msg.ARD_COMMENT_TIP = "Add the given text as comment to the Arduino code";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD = "a specific Arduino Board";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_HUB_TIP = "Set the Arduino board you work with, and to what it connects";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_TIP = "Set which Arduino board you work with, and connect components to the pins.";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "Un blocco di configurazione %1 con lo stesso nome %2 va aggiunto a questo blocco!";
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TOOLTIP = "Add an extra effect time at which statements must be done";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TOOLTIP = "Add a block for statements when the effect is finished.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE = "at the end do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF = "if effect time becomes greater than";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST1 = "Effect";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST2 = "with total duration (ms) =";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF = "at the start do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_1 = "At the start of an effect, do some statements";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_2 = "At the start of an effect, do some statements, and at the end of the effect too";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_3 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_4 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements. Ath end of the effect the final statements are done.";  // untranslated
Blockly.Msg.ARD_DEFINE = "Definisci";
Blockly.Msg.ARD_DHTHUB = "Temperature and humidity sensor";  // untranslated
Blockly.Msg.ARD_DHTHUB_READRH = "Relative Humidity at";  // untranslated
Blockly.Msg.ARD_DHTHUB_READTEMP = "°C temperature at";  // untranslated
Blockly.Msg.ARD_DHTHUB_TIP = "Block to assign to an Arduino pin a DHT type sensor";  // untranslated
Blockly.Msg.ARD_DHT_COMPONENT = "DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_DEFAULT_NAME = "TempRH_Sensor";  // untranslated
Blockly.Msg.ARD_DHT_READRH_TIP = "Obtain the RH (Relative Humidity in %) as a value from 0 to 100 a DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_READTEMP_TIP = "Obtain the temperature in degree Celcius of a DHT sensor";  // untranslated
Blockly.Msg.ARD_DIGINPUT = "Digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_COMPONENT = "Digital Input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_DEFAULT_NAME = "DigInput1";  // untranslated
Blockly.Msg.ARD_DIGINPUT_READ = "Read digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_TIP = "Connect a digital input to a digital pin, so as to read its value. The digital state can then be read, corresponding to 0V or 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "leggi il pin digitale #";
Blockly.Msg.ARD_DIGITALREAD_TIP = "Leggi il valore digitale su un pin: ALTO o BASSO";
Blockly.Msg.ARD_DIGITALWRITE = "imposta il pin digitale #";
Blockly.Msg.ARD_DIGITALWRITEVAR_TIP = "Write digital value to a Port, the value and port can be computed variables";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Scrivi un valore digitale ALTO o BASSO su una Porta specifica";
Blockly.Msg.ARD_DIGOUTPUT = "Digital output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_COMPONENT = "Digital Output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_DEFAULT_NAME = "DigOutput1";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_TIP = "Connect a generic digital ouput to a digital pin, so as to write to that pin. The digital state can be set to LOW or HIGH, corresponding to 0V and 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_WRITE = "Write to digital output";  // untranslated
Blockly.Msg.ARD_DIORAMA_BOARD_TIP = "The Ingegno Diorama board - See manual for info";  // untranslated
Blockly.Msg.ARD_DIORAMA_BTN_TIP = "Diorama button code, executed in a loop once the button has been pressed";  // untranslated
Blockly.Msg.ARD_DIO_BOARD_MISSING = "No Diorama board present. Add it to the canvas!";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT = "Show on display: ";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_TIP = "Give a text of 8 characters to show on the diorama display";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_WARNING = "Text can only be 8 long, not longer!";  // untranslated
Blockly.Msg.ARD_DIO_LESSLOUD = "Diorama: less loud output";  // untranslated
Blockly.Msg.ARD_DIO_LOUDER = "Diorama: louder output";  // untranslated
Blockly.Msg.ARD_DIO_PLAYTRACK = "Play track number ";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN = "stop buttons";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTNNR_TIP = "Stop action of the given button.";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN_TIP = "Reset the buttons, so no button is considered pressed.";  // untranslated
Blockly.Msg.ARD_DIO_SETLOUDNESS = "Diorama: set volume to (0-10):";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_TIP = "Change sound output of the Diorama board. If louder or quieter, we stop processing the button after the call.";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_WARNING = "Volume must be between 0 and 10!";  // untranslated
Blockly.Msg.ARD_DIO_STOPBTN = "Pushbutton 8: stop";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK = "Stop playing";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK_TIP = "Immediately stop playing the track that is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING = "track is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING_TIP = "Return true if a track is still playing, false otherwise";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_TIP = "If number 1, then play a track stored on SD card as 'track001.mp3'";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_WARNING = "Track must be a number between 1 and 100!";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL = "Arduino define up front:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL_TIP = "Code you want to declare up front (use this e.g. for variables you need in setup)";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Loop Arduino:";
Blockly.Msg.ARD_FUN_RUN_SETUP = "Setup Arduino:";
Blockly.Msg.ARD_FUN_RUN_TIP = "Definisce le funzioni setup() e loop() di Arduino.";
Blockly.Msg.ARD_HIGH = "ALTO";
Blockly.Msg.ARD_HIGHLOW_TIP = "Imposta lo stato logico del pin a Alto o Basso.";
Blockly.Msg.ARD_LEDLEG = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEGNEG = "minus";  // untranslated
Blockly.Msg.ARD_LEDLEGPOL = "leg polarity";  // untranslated
Blockly.Msg.ARD_LEDLEGPOS = "plus";  // untranslated
Blockly.Msg.ARD_LEDLEG_COMPONENT = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_DEFAULT_NAME = "Led1";  // untranslated
Blockly.Msg.ARD_LEDLEG_OFF = "OFF";  // untranslated
Blockly.Msg.ARD_LEDLEG_ON = "ON";  // untranslated
Blockly.Msg.ARD_LEDLEG_SET = "Set LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_TIP = "A LED light, on of the legs (the positive or negative) is connected to the Arduino. Can be ON or OFF.";  // untranslated
Blockly.Msg.ARD_LEDUP_GADGET = "Gadget LedUpKidz";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB = "LedUpKidz, destination: ";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB_TIP = "LedUpKidz is a gadget with 6 LED that you can program. There is a big prototype connected to an Arduino UNO, choose 'prototype' for code destined for this. The gadget itself works on a small attiny85 microchip, for code with that destination, select destination 'gadget'";  // untranslated
Blockly.Msg.ARD_LEDUP_LED0 = "LED 0";  // untranslated
Blockly.Msg.ARD_LEDUP_LED1 = "LED 1";  // untranslated
Blockly.Msg.ARD_LEDUP_LED2 = "LED 2";  // untranslated
Blockly.Msg.ARD_LEDUP_LED3 = "LED 3";  // untranslated
Blockly.Msg.ARD_LEDUP_LED4 = "LED 4";  // untranslated
Blockly.Msg.ARD_LEDUP_LED5 = "LED 5";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF1 = "Put LedUp LED";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF2 = "on? True/False:";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF_TIP = "Set a given LedUpKidz light to on or off using variable blocks";  // untranslated
Blockly.Msg.ARD_LEDUP_PROTO = "Prototype Arduino UNO";  // untranslated
Blockly.Msg.ARD_LOW = "BASSO";
Blockly.Msg.ARD_MAP = "Mappa";
Blockly.Msg.ARD_MAP_TIP = "Mappa un numero nell'intervallo [0-1024] a un'altro numero.";
Blockly.Msg.ARD_MAP_VAL = "valore a [0-";
Blockly.Msg.ARD_MD_180SERVO = "0~180 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_360SERVO = "0~360 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK = "AAA 3V Battery module";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK_TIP = "The battery block for Microduino";  // untranslated
Blockly.Msg.ARD_MD_AAASOUNDWARN = "A AAA Battery module must be added to your blocks if you work with sound";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK = "Loudspeaker (Amplifier) Module";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK_TIP = "Amplifier module, connect the loudspeaker to it to hear sound.";  // untranslated
Blockly.Msg.ARD_MD_AMPWARN = "An Amplifier module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_AUDIOAMPWARN = "An Audio module must be added to your blocks if you work with an amplifier";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK = "Sound modules (Audio). Mode:";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK_TIP = "Audio Function Module, Choose a mode and a volume";  // untranslated
Blockly.Msg.ARD_MD_AUDIOSOUNDWARN = "An Audio module must be added to your blocks to be able to work with music.";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE = "Pause sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE_TIP = "Pause the sound fragment that is playing";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY = "";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAYNR = "Play sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY_TIP = "Write the number of the sound fragment you want to play. On the this number corresponds to the order in which files have been copied to the SD Card. Best: 1/Empty the SD card 2/copy files to SD card in the order you want to play them 3/it is easier if you name the files 001.mp3, 002.mp3, ... and copy them one after the other to the card!";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP1 = "Repeat everything";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP2 = "Play everything 1 time";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP3 = "Repeat  1 track";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP4 = "Play 1 track";  // untranslated
Blockly.Msg.ARD_MD_BLOCKS = "Microduino blocks: ";  // untranslated
Blockly.Msg.ARD_MD_COOKIEBUTTON_COMPONENT = "Microduino MCookie CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK = "Brain (CoreUSB)";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK_TIP = "The Brain of your construction, the MCookie-CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREWARN = "A Brain (CoreUSB) module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_COMPONENT = "Microduino Crash Button";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_DEFAULT_NAME = "Crashbutton1";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_TIP = "The microduino crash-button with which you can detect if you hit something, or that you can use as a push button.";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK = "The Cable holder (Sensor Hub)";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK01 = "connected to pins:   IIC";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK_TIP = "The Hub allows to connect up to 12 sensors to your Microduino";  // untranslated
Blockly.Msg.ARD_MD_NOSERVO = "Geen Servo gekoppeld";  // untranslated
Blockly.Msg.ARD_MD_SERVOBOT_DEFAULT_NAME = "BottomServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON = "Servo Motor Connector.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_BOTTOM = "Define bottom Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TIP = "Servo Motor Connector, can control two Servo (top and bottom). You have to give the servo a name, and what type it is (no servo attached, a 180 degree servo or a 360 degree servo.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TOP = "Define top Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_MD_SERVOTOP_DEFAULT_NAME = "TopServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOTYPE_TIP = "Select the type of Servo you attach to the Servo connnector";  // untranslated
Blockly.Msg.ARD_MD_SERVO_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN1 = "A Servo configuration block must be added to the hub to use this block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN2 = "A Name input must be added to the Servo configuration block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN3 = "Selected servo does not exist any more, please select a new one.";  // untranslated
Blockly.Msg.ARD_MD_SERVO_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_NEOPIXEL = "NeoPixel LED light";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_BRIGHTNESS = " brightness (%)";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_COMPONENT = "Neopixel strip";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_DEFAULT_NAME = "NeoPixel1";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_HZ = "Frequency:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOUR = "on colour";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALBLUE = "blue:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALGREEN = "green:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALRED = "on colour (0-255) red:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXEL = "pixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXELS = "Pixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_SET = "Set Neopixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_STRIP = "Strip with";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TIP = "A NEOPIXEL LED light or a strip with multiple neopixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_NOTONE = "Spegne il tono sul pin #";
Blockly.Msg.ARD_NOTONE_PIN = "Nessun tono sul PIN#";
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Ferma la generazione di un tono su un pin.";
Blockly.Msg.ARD_NOTONE_TIP = "Spegne il tono sul pin selezionato";
Blockly.Msg.ARD_NO_ALLBOT = "No AllBot present";  // untranslated
Blockly.Msg.ARD_OUTPUT_WRITE_TO = "value";  // untranslated
Blockly.Msg.ARD_PIN_AN = "analog pin";  // untranslated
Blockly.Msg.ARD_PIN_AN_TIP = "One of the analog pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_DIG = "digital pin";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG = "digital pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG1 = "digital pin1#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG2 = "pin2#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG_TIP = "Component requiring two digital pins, pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIG_TIP = "One of the digital pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_PWM = "PWM pin";  // untranslated
Blockly.Msg.ARD_PIN_PWM_TIP = "One of the Pulse Width Modeling (PWM) pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Il Pin %1 è richiesto dal %2 come pin %3. Già usato come %4.";
Blockly.Msg.ARD_PULSEON = "pulse on pin #";  // untranslated
Blockly.Msg.ARD_PULSEREAD = "Read";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT = "timeout after";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_MS = "";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Misura la durata di un impulso sul pin selezionato, se è compreso all'interno del timeout.";
Blockly.Msg.ARD_PULSE_READ = "misura %1 impulso sul pin #%2";
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "misura %1 impulso sul pin #%2 (timeout dopo %3 μs)";
Blockly.Msg.ARD_PULSE_TIP = "Misura la durata di un impulso sul pin selezionato.";
Blockly.Msg.ARD_PWMOUTPUT = "PWM output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_COMPONENT = "PWM Output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_DEFAULT_NAME = "PWMOutput1";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_TIP = "Connect a generic PWM (Pulse Width Modulation) ouput to a pwm pin, so as to write an analog value to that pin. The value written should be a number between 0 and 255, and will generate a block pulse over this pin.";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_WRITE = "Write to PWM output";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";
Blockly.Msg.ARD_SERIAL_PRINT = "stampa";
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "aggiungi una nuova riga";
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Stampa dei dati sulla console/porta seriale in un formato leggibile (ASCII).";
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "Per utilizzare questo blocco devi aggiungere un blocco di setup per %1 nell'area di lavoro!";
Blockly.Msg.ARD_SERIAL_SETUP = "Imposta";
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Seleziona la velocità di una periferica Seriale";
Blockly.Msg.ARD_SERIAL_SPEED = ": velocità a";
Blockly.Msg.ARD_SERVOHUB = "Servo motor";  // untranslated
Blockly.Msg.ARD_SERVOHUB_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_SERVOHUB_TIP = "Servo Motor Connection, which can attach to a PWM pin. You have to give the servo a name, and what type it is (a 180 degree servo or a 360 degree servo.)";  // untranslated
Blockly.Msg.ARD_SERVOHUB_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_SERVO_COMPONENT = "servo";  // untranslated
Blockly.Msg.ARD_SERVO_DEFAULT_NAME = "Servo1";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "leggi SERVO dal Pin#";
Blockly.Msg.ARD_SERVO_READ_TIP = "Leggi l'angolazione di un Servo motore";
Blockly.Msg.ARD_SERVO_ROTATE360 = "Rotate 360 degree Servo";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATEPERC = "% (-100 to 100)";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATESPEED = "with speed";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATE_TIP = "Turn a Servo with a specific speed";  // untranslated
Blockly.Msg.ARD_SERVO_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "configura un SERVO sul Pin";
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "(0~180) gradi";
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Imposta un Servo all'angolazione specificata";
Blockly.Msg.ARD_SERVO_WRITE_TO = "a";
Blockly.Msg.ARD_SETTONE = "Imposta un tono sul pin #";
Blockly.Msg.ARD_SPI_SETUP = "Imposta";
Blockly.Msg.ARD_SPI_SETUP_CONF = "configurazione:";
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "divisione di frequenza";
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_MODE = "modalità SPI (idle - edge)";
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Basso - Discendente)";
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Basso - Ascendente)";
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (Alto - Discendente)";
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (Alto - Ascendente)";
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "dati di correzione";
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configura la periferica SPI.";
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Invia un messaggio SPI al dispositivo slave specificato e ricevi indietro dei dati.";
Blockly.Msg.ARD_SPI_TRANS_NONE = "vuoto";
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "al pin slave";
Blockly.Msg.ARD_SPI_TRANS_TIP = "Invia un messaggio SPI al dispositivo slave specificato.";
Blockly.Msg.ARD_SPI_TRANS_VAL = "trasferimento";
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "Per utilizzare questo blocco devi aggiungere un blocco di setup per %1 nell'area di lavoro!";
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Il precedente valore del pin %1 non è più disponibile.";
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";
Blockly.Msg.ARD_STEPPER_DEGREES = "degrees";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";
Blockly.Msg.ARD_STEPPER_ISROTATING = "in movement";  // untranslated
Blockly.Msg.ARD_STEPPER_ISROTATING_TIP = "Returns true if the stepper is moving.";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "motore stepper:";
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Numero di pin";
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";
Blockly.Msg.ARD_STEPPER_RESTART = "Get";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_AFTER = "ready";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_TIP = "Reset the motor ready after a rotation block has finished, so as to be able to rotate again";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "quanti passi per ogni rotazione";
Blockly.Msg.ARD_STEPPER_ROTATE = "Rotate";  // untranslated
Blockly.Msg.ARD_STEPPER_ROTATE_TIP = "Rotate the stepper motor over a number of degrees in a non-blocking way. This block must be called in the loop. When finished the stepper is blocked, and a call to restart movement is needed for the block to cause a next movement.";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Imposta un motore stepper";
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configura i pin e altre impostazioni di un motore stepper.";
Blockly.Msg.ARD_STEPPER_SPEED = "imposta la velocità (rpm) a";
Blockly.Msg.ARD_STEPPER_SPEED_TIP = "Sets speed of the stepper motor. The steps are set at the speed needed to have the set RPM speed based on the given steps per revolution in the constructor.";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "muovi stepper";
Blockly.Msg.ARD_STEPPER_STEPS = "passi";
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Fai girare di un certo numero di passi il motore stepper.";
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";
Blockly.Msg.ARD_TIME_DELAY = "attendi";
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microsecondi";
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Attendi per uno specifico intervallo di tempo in microsecondi";
Blockly.Msg.ARD_TIME_DELAY_TIP = "Aspetta per un intervallo di tempo in millisecondi";
Blockly.Msg.ARD_TIME_INF = "attendi per sempre (fine del programma)";
Blockly.Msg.ARD_TIME_INF_TIP = "Attende per un tempo infinito, cioè il programma termina.";
Blockly.Msg.ARD_TIME_MICROS = "Tempo passato in questo momento (microsecondi)";
Blockly.Msg.ARD_TIME_MICROS_TIP = "Restituisce il numero di millisecondi da quando la scheda Arduino ha iniziato a eseguire il programma. Deve essere salvato in una variabile positiva di tipo long integer";
Blockly.Msg.ARD_TIME_MILLIS = "Tempo passato in questo momento (millisecondi)";
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Restituisce il numero di millisecondi da quando la scheda Arduino ha iniziato a eseguire il programma. Deve essere salvato in una variabile positiva di tipo long integer";
Blockly.Msg.ARD_TIME_MS = "millisecondi";
Blockly.Msg.ARD_TONEDURATION = "and duration (ms)";  // untranslated
Blockly.Msg.ARD_TONEDURATION_TIP = "Sets tone on a buzzer to the specified frequency within range 31 - 65535 and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "alla frequenza di";
Blockly.Msg.ARD_TONEPITCH_TIP = "Sets tone on a buzzer to the specified pitch and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequenza";
Blockly.Msg.ARD_TONE_PIN = "Tono su PIN#";
Blockly.Msg.ARD_TONE_PIN_TIP = "Genera dei toni audio su un pin.";
Blockly.Msg.ARD_TONE_TIP = "Imposta un tono sul pin alla frequenza specificata in un intervallo fra 31 e 65535";
Blockly.Msg.ARD_TONE_WARNING = "La frequenza dev'essere compresa fra 31 e 65535";
Blockly.Msg.ARD_TONE_WARNING2 = "A duration must be positive (>0)";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";
Blockly.Msg.ARD_TYPE_BOOL = "Booleano";
Blockly.Msg.ARD_TYPE_CHAR = "Carattere";
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "Dipendenza mancante";
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimale";
Blockly.Msg.ARD_TYPE_LONG = "Numero Lungo";
Blockly.Msg.ARD_TYPE_NULL = "Null";
Blockly.Msg.ARD_TYPE_NUMBER = "Numero";
Blockly.Msg.ARD_TYPE_SHORT = "Numero breve";
Blockly.Msg.ARD_TYPE_TEXT = "Testo";
Blockly.Msg.ARD_TYPE_UNDEF = "Non definito";
Blockly.Msg.ARD_UNKNOWN_ALLBOTJOINT = "The old joint value %1 is no longer available";  // untranslated
Blockly.Msg.ARD_VAR_AS = "come";
Blockly.Msg.ARD_VAR_AS_TIP = "Imposta un tipo di valore";
Blockly.Msg.ARD_WRITE_TO = "a";
Blockly.Msg.NEW_INSTANCE = "Nuova istanza...";
Blockly.Msg.NEW_INSTANCE_TITLE = "Nuovo nome dell'istanza:";
Blockly.Msg.RENAME_INSTANCE = "Rinomina istanza...";
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rinomina tutte le '%1' istanze a:";
Blockly.Msg.REPLACE_EXISTING_BLOCKS = "Replace existing blocks? 'Cancel' will merge.";  // untranslated
Blockly.Msg.UPLOAD_CLICK_1 = "To Upload your code to Arduino:";  // untranslated
Blockly.Msg.UPLOAD_CLICK_2 = "  1. click on the Arduino tab";  // untranslated
Blockly.Msg.UPLOAD_CLICK_3 = "  2. select all the code, and copy (CTRL+A and CTRL+C)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_4 = "  3. In the Arduino IDE or in a http://codebender.cc sketch, paste the code (CTRL+V)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_5 = "  4. Upload to your connected Arduino";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TITLE_IF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TOOLTIP = Blockly.Msg.CONTROLS_IF_IF_TOOLTIP;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TITLE_ELSEIF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TITLE_ELSE = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE;