// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.fr');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Ajouter un commentaire";
Blockly.Msg.AUTH = "Veuillez autoriser cette application à permettre la sauvegarde de votre travail et à l’autoriser d'être partagé par vous.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Modifier la valeur :";
Blockly.Msg.CHAT = "Discutez avec votre collaborateur en tapant dans cette zone !";
Blockly.Msg.CLEAN_UP = "Nettoyer les blocs";
Blockly.Msg.COLLAPSE_ALL = "Réduire les blocs";
Blockly.Msg.COLLAPSE_BLOCK = "Réduire le bloc";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "couleur 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "couleur 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "taux";
Blockly.Msg.COLOUR_BLEND_TITLE = "mélanger";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mélange deux couleurs dans une proportion donnée (de 0.0 à 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://fr.wikipedia.org/wiki/Couleur";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choisir une couleur dans la palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "couleur aléatoire";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choisir une couleur au hasard.";
Blockly.Msg.COLOUR_RGB_BLUE = "bleu";
Blockly.Msg.COLOUR_RGB_GREEN = "vert";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "rouge";
Blockly.Msg.COLOUR_RGB_TITLE = "colorier avec";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Créer une couleur avec la quantité spécifiée de rouge, vert et bleu. Les valeurs doivent être comprises entre 0 et 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "quitter la boucle";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "passer à l’itération de boucle suivante";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Sortir de la boucle englobante.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Sauter le reste de cette boucle, et poursuivre avec l’itération suivante.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Attention : Ce bloc ne devrait être utilisé que dans une boucle.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "pour chaque élément %1 dans la liste %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Pour chaque élément d’une liste, assigner la valeur de l’élément à la variable '%1', puis exécuter des instructions.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "compter avec %1 de %2 à %3 par %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Faire prendre à la variable « %1 » les valeurs depuis le nombre de début jusqu’au nombre de fin, en s’incrémentant du pas spécifié, et exécuter les instructions spécifiées.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Ajouter une condition au bloc si.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Ajouter une condition finale fourre-tout au bloc si.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Ajouter, supprimer ou réordonner les sections pour reconfigurer ce bloc si.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "sinon";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "sinon si";
Blockly.Msg.CONTROLS_IF_MSG_IF = "si";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si une valeur est vraie, alors exécuter certains ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si une valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, exécuter le second bloc d’ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres. Si aucune des valeurs n’est vraie, exécuter le dernier bloc d’ordres.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "http://fr.wikipedia.org/wiki/Boucle_for";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "faire";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "répéter %1 fois";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Exécuter des instructions plusieurs fois.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "répéter jusqu’à";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "répéter tant que";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Tant qu’une valeur est fausse, alors exécuter des instructions.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Tant qu’une valeur est vraie, alors exécuter des instructions.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Supprimer ces %1 blocs ?";
Blockly.Msg.DELETE_BLOCK = "Supprimer le bloc";
Blockly.Msg.DELETE_X_BLOCKS = "Supprimer %1 blocs";
Blockly.Msg.DISABLE_BLOCK = "Désactiver le bloc";
Blockly.Msg.DUPLICATE_BLOCK = "Dupliquer";
Blockly.Msg.ENABLE_BLOCK = "Activer le bloc";
Blockly.Msg.EXPAND_ALL = "Développer les blocs";
Blockly.Msg.EXPAND_BLOCK = "Développer le bloc";
Blockly.Msg.EXTERNAL_INPUTS = "Entrées externes";
Blockly.Msg.HELP = "Aide";
Blockly.Msg.INLINE_INPUTS = "Entrées en ligne";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "créer une liste vide";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Renvoyer une liste, de longueur 0, ne contenant aucun enregistrement";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "liste";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Ajouter, supprimer, ou réordonner les sections pour reconfigurer ce bloc de liste.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "créer une liste avec";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Ajouter un élément à la liste.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Créer une liste avec un nombre quelconque d’éléments.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "premier";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# depuis la fin";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "obtenir";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obtenir et supprimer";
Blockly.Msg.LISTS_GET_INDEX_LAST = "dernier";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aléatoire";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "supprimer";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Renvoie le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Renvoie l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Renvoie l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Renvoie le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Renvoie un élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Supprime et renvoie le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Supprime et renvoie l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Supprime et renvoie l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Supprime et renvoie le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Supprime et renvoie un élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Supprime le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Supprime l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Supprime l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Supprime le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Supprime un élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "jusqu’à # depuis la fin";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "jusqu’à #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "jusqu’à la fin";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obtenir la sous-liste depuis le début";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obtenir la sous-liste depuis # depuis la fin";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obtenir la sous-liste depuis #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crée une copie de la partie spécifiée d’une liste.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "trouver la première occurrence de l’élément";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "trouver la dernière occurrence de l’élément";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Renvoie l’index de la première/dernière occurrence de l’élément dans la liste. Renvoie 0 si l'élément n'est pas trouvé.";
Blockly.Msg.LISTS_INLIST = "dans la liste";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 est vide";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Renvoie vrai si la liste est vide.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "longueur de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Renvoie la longueur d’une liste.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "créer une liste avec l’élément %1 répété %2 fois";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crée une liste consistant en la valeur fournie répétée le nombre de fois indiqué.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "comme";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insérer en";
Blockly.Msg.LISTS_SET_INDEX_SET = "mettre";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Insère l’élément au début d’une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Insère l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Insère l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Ajouter l’élément à la fin d’une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Insère l’élément au hasard dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Fixe le premier élément dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Fixe l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Fixe l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Fixe le dernier élément dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Fixe un élément au hasard dans une liste.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "croissant";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "décroissant";
Blockly.Msg.LISTS_SORT_TITLE = "trier %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Trier une copie d’une liste.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabétique, en ignorant la casse";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numérique";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabétique";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "créer une liste depuis le texte";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "créer un texte depuis la liste";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Réunir une liste de textes en un seul, en les séparant par un séparateur.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Couper un texte en une liste de textes, en coupant à chaque séparateur.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "avec le séparateur";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "faux";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Renvoie soit vrai soit faux.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "vrai";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://fr.wikipedia.org/wiki/Inegalite_(mathematiques)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Renvoyer vrai si les deux entrées sont égales.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Renvoyer vrai si la première entrée est plus grande que la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Renvoyer vrai si la première entrée est plus grande ou égale à la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Renvoyer vrai si la première entrée est plus petite que la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Renvoyer vrai si la première entrée est plus petite ou égale à la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Renvoyer vrai si les deux entrées sont différentes.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "pas %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Renvoie vrai si l’entrée est fausse. Renvoie faux si l’entrée est vraie.";
Blockly.Msg.LOGIC_NULL = "nul";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Renvoie nul.";
Blockly.Msg.LOGIC_OPERATION_AND = "et";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "ou";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Renvoyer vrai si les deux entrées sont vraies.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Renvoyer vrai si au moins une des entrées est vraie.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "si faux";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "si vrai";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Vérifier la condition dans 'test'. Si elle est vraie, renvoie la valeur 'si vrai' ; sinon renvoie la valeur 'si faux'.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://fr.wikipedia.org/wiki/Arithmetique";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Renvoie la somme des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Renvoie le quotient des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Renvoie la différence des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Renvoie le produit des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Renvoie le premier nombre élevé à la puissance du second.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "incrémenter %1 de %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Ajouter un nombre à la variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Renvoie une des constantes courantes : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infini).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "contraindre %1 entre %2 et %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Contraindre un nombre à être entre les limites spécifiées (incluses).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "est divisible par";
Blockly.Msg.MATH_IS_EVEN = "est pair";
Blockly.Msg.MATH_IS_NEGATIVE = "est négatif";
Blockly.Msg.MATH_IS_ODD = "est impair";
Blockly.Msg.MATH_IS_POSITIVE = "est positif";
Blockly.Msg.MATH_IS_PRIME = "est premier";
Blockly.Msg.MATH_IS_TOOLTIP = "Vérifier si un nombre est pair, impair, premier, entier, positif, négatif, ou s’il est divisible par un certain nombre. Renvoie vrai ou faux.";
Blockly.Msg.MATH_IS_WHOLE = "est entier";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "reste de %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Renvoyer le reste de la division euclidienne des deux nombres.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://fr.wikipedia.org/wiki/Nombre";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un nombre.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "moyenne de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maximum de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "médiane de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimum de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "majoritaires de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "élément aléatoire de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "écart-type de la liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "somme de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Renvoyer la moyenne (arithmétique) des valeurs numériques dans la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Renvoyer le plus grand nombre dans la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Renvoyer le nombre médian de la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Renvoyer le plus petit nombre dans la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Renvoyer une liste des élément(s) le(s) plus courant(s) dans la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Renvoyer un élément dans la liste au hasard.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Renvoyer l’écart-type de la liste.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Renvoyer la somme de tous les nombres dans la liste.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fraction aléatoire";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Renvoyer une fraction aléatoire entre 0.0 (inclus) et 1.0 (exclus).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "entier aléatoire entre %1 et %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Renvoyer un entier aléatoire entre les deux limites spécifiées, incluses.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arrondir";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arrondir par défaut";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arrondir par excès";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arrondir un nombre au-dessus ou au-dessous.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://fr.wikipedia.org/wiki/Racine_carree";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "valeur absolue";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "racine carrée";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Renvoie la valeur absolue d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Renvoie e à la puissance d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Renvoie le logarithme naturel d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Renvoie le logarithme base 10 d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Renvoie l’opposé d’un nombre";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Renvoie 10 à la puissance d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Renvoie la racine carrée d’un nombre.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Renvoie l’arccosinus d’un nombre.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Renvoie l’arcsinus d’un nombre.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Renvoie l’arctangente d’un nombre.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Renvoie le cosinus d’un angle en degrés (pas en radians).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Renvoie le sinus d’un angle en degrés (pas en radians).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Renvoie la tangente d’un angle en degrés (pas en radians).";
Blockly.Msg.ME = "Moi";
Blockly.Msg.NEW_VARIABLE = "Nouvelle variable…";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nouveau nom de la variable :";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "autoriser les ordres";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "avec :";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "http://fr.wikipedia.org/wiki/Proc%C3%A9dure_%28informatique%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Exécuter la fonction '%1' définie par l’utilisateur.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Exécuter la fonction '%1' définie par l’utilisateur et utiliser son résultat.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "avec :";
Blockly.Msg.PROCEDURES_CREATE_DO = "Créer '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Décrire cette fonction…";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "faire quelque chose";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "pour";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crée une fonction sans sortie.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retour";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crée une fonction avec une sortie.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Attention : Cette fonction a des paramètres en double.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Surligner la définition de la fonction";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si une valeur est vraie, alors renvoyer une seconde valeur.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Attention : Ce bloc pourrait n’être utilisé que dans une définition de fonction.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nom de l’entrée :";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Ajouter une entrée à la fonction.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entrées";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Ajouter, supprimer, ou réarranger les entrées de cette fonction.";
Blockly.Msg.REDO = "Refaire";
Blockly.Msg.REMOVE_COMMENT = "Supprimer un commentaire";
Blockly.Msg.RENAME_VARIABLE = "Renommer la variable…";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renommer toutes les variables « %1 » en :";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "ajouter le texte";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "à";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Ajouter du texte à la variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "en minuscules";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "en Majuscule Au Début De Chaque Mot";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "en MAJUSCULES";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Renvoyer une copie du texte dans une autre casse.";
Blockly.Msg.TEXT_CHARAT_FIRST = "obtenir la première lettre";
Blockly.Msg.TEXT_CHARAT_FROM_END = "obtenir la lettre # depuis la fin";
Blockly.Msg.TEXT_CHARAT_FROM_START = "obtenir la lettre #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "dans le texte";
Blockly.Msg.TEXT_CHARAT_LAST = "obtenir la dernière lettre";
Blockly.Msg.TEXT_CHARAT_RANDOM = "obtenir une lettre au hasard";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Renvoie la lettre à la position indiquée.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Ajouter un élément au texte.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "joindre";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Ajouter, supprimer, ou réordonner des sections pour reconfigurer ce bloc de texte.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "jusqu’à la lettre # depuis la fin";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "jusqu’à la lettre #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "jusqu’à la dernière lettre";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "dans le texte";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obtenir la sous-chaîne depuis la première lettre";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obtenir la sous-chaîne depuis la lettre # depuis la fin";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obtenir la sous-chaîne depuis la lettre #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Renvoie une partie indiquée du texte.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "dans le texte";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "trouver la première occurrence de la chaîne";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "trouver la dernière occurrence de la chaîne";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Renvoie l’index de la première/dernière occurrence de la première chaîne dans la seconde. Renvoie 0 si la chaîne n’est pas trouvée.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 est vide";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Renvoie vrai si le texte fourni est vide.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "créer un texte avec";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Créer un morceau de texte en agrégeant un nombre quelconque d’éléments.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "longueur de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Renvoie le nombre de lettres (espaces compris) dans le texte fourni.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "afficher %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Afficher le texte, le nombre ou une autre valeur spécifié.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Demander un nombre à l’utilisateur.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Demander un texte à l’utilisateur.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "invite pour un nombre avec un message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "invite pour un texte avec un message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Une lettre, un mot ou une ligne de texte.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "supprimer les espaces des deux côtés";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "supprimer les espaces du côté gauche";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "supprimer les espaces du côté droit";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Renvoyer une copie du texte avec les espaces supprimés d’un bout ou des deux.";
Blockly.Msg.TODAY = "Aujourd'hui";
Blockly.Msg.UNDO = "Annuler";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "élément";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Créer 'fixer %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Renvoie la valeur de cette variable.";
Blockly.Msg.VARIABLES_SET = "fixer %1 à %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Créer 'obtenir %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Fixe cette variable pour qu’elle soit égale à la valeur de l’entrée.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_180SERVO = "0~180 degree Servo (angle)";  // untranslated
Blockly.Msg.ARD_360SERVO = "0~360 degree Servo (rotation)";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT = "7-Segment Display";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_TIP = "7-Segment LED Display can be used to show numbers and some characters. It has 7 segments and 1 dot, requiring 8 digital pins on the Arduino to use.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_WARN = "Pin used in segment %1 is also present in one of the other segments! Change the pin number.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE = "show number";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG = "Set segment";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG_TIP = "Set a specific segment of the 7-Segment display high";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE_TIP = "Write a specific number to the 7-segment display. Number must be between 0 and 9, otherwise nothing is shown.";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE = "Move AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE_TIP = "Move Servo to a specified angle gradually over the animation duration. You can combine this with other servo movements";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_WRITE = "Set AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE = "Animate AllBot";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESERVOS = "Servos";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESPEED = "Animation duration (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE_TIP = "Animate the allbot by moving different servos at the same time. Total duration of this animation can be set. A servo may have only one movement block present.";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTLEFT = "ankleFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTRIGHT = "ankleFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLELEFT = "ankleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLELEFT = "ankleMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLERIGHT = "ankleMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARLEFT = "ankleRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARRIGHT = "ankleRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLERIGHT = "ankleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_BACKWARD = "AllBot Backward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP = "AllBot Chirp:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRPSPEED = "beeps, beepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP_TIP = "Make the allbot chirp a number of beeps at the given speed (delay in microseconds, use 1 to 255)";  // untranslated
Blockly.Msg.ARD_ALLBOT_FORWARD = "AllBot Forward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTLEFT = "hipFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTRIGHT = "hipFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPLEFT = "hipLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLELEFT = "hipMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLERIGHT = "hipMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARLEFT = "hipRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARRIGHT = "hipRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPRIGHT = "hipRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTLEFT = "kneeFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTRIGHT = "kneeFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLELEFT = "kneeMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLERIGHT = "kneeMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARLEFT = "kneeRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARRIGHT = "kneeRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_LEFT = "AllBot Left:";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKLEFT = "AllBot Look Left, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKRIGHT = "AllBot Look Right, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOK_TIP = "Make the allbot look towards a specific direction with the given speed (ms)";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC = "AllBot Remote Control Handling";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND = "On receiving command ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMANDS = "Commands ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_SINGLE = "This block must be inside an AllBot Remote Control block ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_TIP = "Set the actions the AllBot must do on receiving a command.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCDO = "Do ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCSERIAL = "Use Serial to view Commands";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED = "RC Speed";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED_TIP = "The speed as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES = "RC Times";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES_TIP = "The times (number of steps) as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIP = "A block to react to the AllBot Remote Control App on your smarthphone. Check Serial to see in the serial monitor what commands are received. Note: Your AllBot shield must be switched to RECEIVE after programming it.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RIGHT = "AllBot Right:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED = "AllBot Look Scared:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCAREDBEEPS = "shakes, beeps:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED_TIP = "Make the allbot shake the given number of shakes, and beep the given number of beeps ";  // untranslated
Blockly.Msg.ARD_ALLBOT_SERVOHUB = "AllBot Servo motor";  // untranslated
Blockly.Msg.ARD_ALLBOT_STEPS = "steps, stepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_WALK_TIP = "Make the allbot move a number of steps with the given speed (ms) for one step";  // untranslated
Blockly.Msg.ARD_ANALOGREAD = "Lecture du signal analogique #";
Blockly.Msg.ARD_ANALOGREAD_TIP = "Valeur de retour entre 0 et 1024";
Blockly.Msg.ARD_ANALOGWRITE = "Ecriture du signal analogique #";
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Ecrit une valeur analogique comprise entre 0 et 255 sur un port PWM spécifique";
Blockly.Msg.ARD_ANASENSOR = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_COMPONENT = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_DEFAULT_NAME = "AnaSensor1";  // untranslated
Blockly.Msg.ARD_ANASENSOR_READ = "Read analog sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_TIP = "Connect an analog sensor to an analog pin, so as to read its value. On an Arduino UNO a value between 0 and 1024 is returned, corresponding to a measured value between 0 and 5V. Eg.: an LDR sensor, a potmeter, ...";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN = "as analog input";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN_TIP = "Declare a variable as a analog input pin";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN = "as analg output";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN_TIP = "Declare a variable as a analog PWM output pin";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER = "as boolean";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER_TIP = "Declare a variable as boolean with value true or false";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN = "as digital input";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN_TIP = "Declare a variable as a digital input pin";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN = "as digital output";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN_TIP = "Declare a variable as a digital output pin";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER = "as decimal number";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER_TIP = "Declare a variable as a decimal number, eg 3.6 or 5e4 or -3.14";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER = "as integer number";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER_TIP = "Declare a variable as integer, -32768 to 32767";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER = "as long integer number";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER_TIP = "Declare a variable as a long integer, -2,147,483,648 to 2,147,483,647";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER = "as positive integer number";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER_TIP = "Declare a variable as a positive integer, 0 to 65535";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER = "as long positive integer number";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER_TIP = "Declare a variable as a long positive integer, 0 to 4,294,967,295";  // untranslated
Blockly.Msg.ARD_BLOCKS = "You have this block twice on the canvas. That is once too many!";  // untranslated
Blockly.Msg.ARD_BOARD = "Board";  // untranslated
Blockly.Msg.ARD_BOARD_WARN = "This block requires as board %1, but or a duplicate block is present or another block is present that requires another Arduino board!";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "Configurer la DEL";
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Allumer ou éteindre la DEL de la carte";
Blockly.Msg.ARD_BUTTON_COMPONENT = "Push Button";  // untranslated
Blockly.Msg.ARD_BUTTON_DEFAULT_NAME = "PushButton1";  // untranslated
Blockly.Msg.ARD_BUTTON_IFPUSHED = "If pushed we measure value";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_CLICK = " is clicked";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_IF = "If button";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_LONGCLICK = "is undergoing a long click";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PRESSED = "is being pressed";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_COMPONENT = "Pushbutton 2-wire no resistor";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_TIP = "A push button which can be ON or OFF, connected to the Arduino with 2 wires: GND, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_THEN = "do";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_TIP = "Check the input received on a button, and react to it. This function does not block your program if you do not check the checkbox to wait for a click. A click is a press and a release of the button, a long press a click and holding long time before you release, press is active as soon as the button is pressed down.";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_WAIT = "wait for a click to happen";  // untranslated
Blockly.Msg.ARD_BUTTON_READ = "Read value button";  // untranslated
Blockly.Msg.ARD_BUTTON_TIP = "A push button which can be ON or OFF, connected to the Arduino with 3 wires: GND, 5V over resisotor, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUZNOTONE = "No tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZNOTONE_TIP = "Stop generating a tone on the buzzer";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_COMPONENT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_DEFAULT_NAME = "MyBuzzer1";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_TIP = "This component is a Buzzer or a Loudspeaker. You can connect it to a digital pin of the Arduino.";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH = "Pitch";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH_TIP = "Select the pitch you want. This block returns a number which is the frequency of the selected pitch.";  // untranslated
Blockly.Msg.ARD_BUZSETPITCH = "with pitch";  // untranslated
Blockly.Msg.ARD_BUZSETTONE = "Set tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZZEROUTPUT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_COMMENT = "Comment";  // untranslated
Blockly.Msg.ARD_COMMENT_TIP = "Add the given text as comment to the Arduino code";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD = "a specific Arduino Board";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_HUB_TIP = "Set the Arduino board you work with, and to what it connects";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_TIP = "Set which Arduino board you work with, and connect components to the pins.";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TOOLTIP = "Add an extra effect time at which statements must be done";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TOOLTIP = "Add a block for statements when the effect is finished.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE = "at the end do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF = "if effect time becomes greater than";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST1 = "Effect";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST2 = "with total duration (ms) =";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF = "at the start do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_1 = "At the start of an effect, do some statements";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_2 = "At the start of an effect, do some statements, and at the end of the effect too";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_3 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_4 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements. Ath end of the effect the final statements are done.";  // untranslated
Blockly.Msg.ARD_DEFINE = "Définir";
Blockly.Msg.ARD_DHTHUB = "Temperature and humidity sensor";  // untranslated
Blockly.Msg.ARD_DHTHUB_READRH = "Relative Humidity at";  // untranslated
Blockly.Msg.ARD_DHTHUB_READTEMP = "°C temperature at";  // untranslated
Blockly.Msg.ARD_DHTHUB_TIP = "Block to assign to an Arduino pin a DHT type sensor";  // untranslated
Blockly.Msg.ARD_DHT_COMPONENT = "DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_DEFAULT_NAME = "TempRH_Sensor";  // untranslated
Blockly.Msg.ARD_DHT_READRH_TIP = "Obtain the RH (Relative Humidity in %) as a value from 0 to 100 a DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_READTEMP_TIP = "Obtain the temperature in degree Celcius of a DHT sensor";  // untranslated
Blockly.Msg.ARD_DIGINPUT = "Digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_COMPONENT = "Digital Input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_DEFAULT_NAME = "DigInput1";  // untranslated
Blockly.Msg.ARD_DIGINPUT_READ = "Read digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_TIP = "Connect a digital input to a digital pin, so as to read its value. The digital state can then be read, corresponding to 0V or 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "Lecture du signal numérique #";
Blockly.Msg.ARD_DIGITALREAD_TIP = "Lecture de la valeur d'un signal numérique: HAUT ou BAS";
Blockly.Msg.ARD_DIGITALWRITE = "Configuration du signal numérique #";
Blockly.Msg.ARD_DIGITALWRITEVAR_TIP = "Write digital value to a Port, the value and port can be computed variables";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = " Ecriture de la valeur HAUT ou BAS du signal numérique #";
Blockly.Msg.ARD_DIGOUTPUT = "Digital output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_COMPONENT = "Digital Output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_DEFAULT_NAME = "DigOutput1";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_TIP = "Connect a generic digital ouput to a digital pin, so as to write to that pin. The digital state can be set to LOW or HIGH, corresponding to 0V and 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_WRITE = "Write to digital output";  // untranslated
Blockly.Msg.ARD_DIORAMA_BOARD_TIP = "The Ingegno Diorama board - See manual for info";  // untranslated
Blockly.Msg.ARD_DIORAMA_BTN_TIP = "Diorama button code, executed in a loop once the button has been pressed";  // untranslated
Blockly.Msg.ARD_DIO_BOARD_MISSING = "No Diorama board present. Add it to the canvas!";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT = "Show on display: ";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_TIP = "Give a text of 8 characters to show on the diorama display";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_WARNING = "Text can only be 8 long, not longer!";  // untranslated
Blockly.Msg.ARD_DIO_LESSLOUD = "Diorama: less loud output";  // untranslated
Blockly.Msg.ARD_DIO_LOUDER = "Diorama: louder output";  // untranslated
Blockly.Msg.ARD_DIO_PLAYTRACK = "Play track number ";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN = "stop buttons";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTNNR_TIP = "Stop action of the given button.";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN_TIP = "Reset the buttons, so no button is considered pressed.";  // untranslated
Blockly.Msg.ARD_DIO_SETLOUDNESS = "Diorama: set volume to (0-10):";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_TIP = "Change sound output of the Diorama board. If louder or quieter, we stop processing the button after the call.";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_WARNING = "Volume must be between 0 and 10!";  // untranslated
Blockly.Msg.ARD_DIO_STOPBTN = "Pushbutton 8: stop";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK = "Stop playing";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK_TIP = "Immediately stop playing the track that is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING = "track is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING_TIP = "Return true if a track is still playing, false otherwise";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_TIP = "If number 1, then play a track stored on SD card as 'track001.mp3'";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_WARNING = "Track must be a number between 1 and 100!";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL = "Arduino define up front:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL_TIP = "Code you want to declare up front (use this e.g. for variables you need in setup)";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino boucle infinie:";
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino exécute en premier:";
Blockly.Msg.ARD_FUN_RUN_TIP = "Definition de la configuration de l'Arduino: fonctions setup() et loop().";
Blockly.Msg.ARD_HIGH = "HAUT";
Blockly.Msg.ARD_HIGHLOW_TIP = " Configuration d'un signal à l'état HAUT ou BAS";
Blockly.Msg.ARD_LEDLEG = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEGNEG = "minus";  // untranslated
Blockly.Msg.ARD_LEDLEGPOL = "leg polarity";  // untranslated
Blockly.Msg.ARD_LEDLEGPOS = "plus";  // untranslated
Blockly.Msg.ARD_LEDLEG_COMPONENT = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_DEFAULT_NAME = "Led1";  // untranslated
Blockly.Msg.ARD_LEDLEG_OFF = "OFF";  // untranslated
Blockly.Msg.ARD_LEDLEG_ON = "ON";  // untranslated
Blockly.Msg.ARD_LEDLEG_SET = "Set LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_TIP = "A LED light, on of the legs (the positive or negative) is connected to the Arduino. Can be ON or OFF.";  // untranslated
Blockly.Msg.ARD_LEDUP_GADGET = "Gadget LedUpKidz";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB = "LedUpKidz, destination: ";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB_TIP = "LedUpKidz is a gadget with 6 LED that you can program. There is a big prototype connected to an Arduino UNO, choose 'prototype' for code destined for this. The gadget itself works on a small attiny85 microchip, for code with that destination, select destination 'gadget'";  // untranslated
Blockly.Msg.ARD_LEDUP_LED0 = "LED 0";  // untranslated
Blockly.Msg.ARD_LEDUP_LED1 = "LED 1";  // untranslated
Blockly.Msg.ARD_LEDUP_LED2 = "LED 2";  // untranslated
Blockly.Msg.ARD_LEDUP_LED3 = "LED 3";  // untranslated
Blockly.Msg.ARD_LEDUP_LED4 = "LED 4";  // untranslated
Blockly.Msg.ARD_LEDUP_LED5 = "LED 5";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF1 = "Put LedUp LED";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF2 = "on? True/False:";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF_TIP = "Set a given LedUpKidz light to on or off using variable blocks";  // untranslated
Blockly.Msg.ARD_LEDUP_PROTO = "Prototype Arduino UNO";  // untranslated
Blockly.Msg.ARD_LOW = "BAS";
Blockly.Msg.ARD_MAP = "Converti";
Blockly.Msg.ARD_MAP_TIP = "Converti un nombre de la plage [0-1024].";
Blockly.Msg.ARD_MAP_VAL = "valeur de [0-";
Blockly.Msg.ARD_MD_180SERVO = "0~180 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_360SERVO = "0~360 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK = "AAA 3V Battery module";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK_TIP = "The battery block for Microduino";  // untranslated
Blockly.Msg.ARD_MD_AAASOUNDWARN = "A AAA Battery module must be added to your blocks if you work with sound";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK = "Loudspeaker (Amplifier) Module";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK_TIP = "Amplifier module, connect the loudspeaker to it to hear sound.";  // untranslated
Blockly.Msg.ARD_MD_AMPWARN = "An Amplifier module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_AUDIOAMPWARN = "An Audio module must be added to your blocks if you work with an amplifier";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK = "Sound modules (Audio). Mode:";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK_TIP = "Audio Function Module, Choose a mode and a volume";  // untranslated
Blockly.Msg.ARD_MD_AUDIOSOUNDWARN = "An Audio module must be added to your blocks to be able to work with music.";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE = "Pause sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE_TIP = "Pause the sound fragment that is playing";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY = "";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAYNR = "Play sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY_TIP = "Write the number of the sound fragment you want to play. On the this number corresponds to the order in which files have been copied to the SD Card. Best: 1/Empty the SD card 2/copy files to SD card in the order you want to play them 3/it is easier if you name the files 001.mp3, 002.mp3, ... and copy them one after the other to the card!";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP1 = "Repeat everything";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP2 = "Play everything 1 time";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP3 = "Repeat  1 track";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP4 = "Play 1 track";  // untranslated
Blockly.Msg.ARD_MD_BLOCKS = "Microduino blocks: ";  // untranslated
Blockly.Msg.ARD_MD_COOKIEBUTTON_COMPONENT = "Microduino MCookie CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK = "Brain (CoreUSB)";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK_TIP = "The Brain of your construction, the MCookie-CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREWARN = "A Brain (CoreUSB) module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_COMPONENT = "Microduino Crash Button";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_DEFAULT_NAME = "Crashbutton1";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_TIP = "The microduino crash-button with which you can detect if you hit something, or that you can use as a push button.";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK = "The Cable holder (Sensor Hub)";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK01 = "connected to pins:   IIC";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK_TIP = "The Hub allows to connect up to 12 sensors to your Microduino";  // untranslated
Blockly.Msg.ARD_MD_NOSERVO = "Geen Servo gekoppeld";  // untranslated
Blockly.Msg.ARD_MD_SERVOBOT_DEFAULT_NAME = "BottomServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON = "Servo Motor Connector.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_BOTTOM = "Define bottom Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TIP = "Servo Motor Connector, can control two Servo (top and bottom). You have to give the servo a name, and what type it is (no servo attached, a 180 degree servo or a 360 degree servo.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TOP = "Define top Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_MD_SERVOTOP_DEFAULT_NAME = "TopServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOTYPE_TIP = "Select the type of Servo you attach to the Servo connnector";  // untranslated
Blockly.Msg.ARD_MD_SERVO_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN1 = "A Servo configuration block must be added to the hub to use this block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN2 = "A Name input must be added to the Servo configuration block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN3 = "Selected servo does not exist any more, please select a new one.";  // untranslated
Blockly.Msg.ARD_MD_SERVO_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_NEOPIXEL = "NeoPixel LED light";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_BRIGHTNESS = " brightness (%)";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_COMPONENT = "Neopixel strip";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_DEFAULT_NAME = "NeoPixel1";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_HZ = "Frequency:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOUR = "on colour";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALBLUE = "blue:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALGREEN = "green:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALRED = "on colour (0-255) red:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXEL = "pixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXELS = "Pixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_SET = "Set Neopixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_STRIP = "Strip with";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TIP = "A NEOPIXEL LED light or a strip with multiple neopixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_NOTONE = "Eteindre la tonalité du signal #";
Blockly.Msg.ARD_NOTONE_PIN = "PAS de Signal de tonalité #";
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Arret de la génération de tonalité (son)sur un signal";
Blockly.Msg.ARD_NOTONE_TIP = "Eteindre / Activer la tonalité du signal selectioné";
Blockly.Msg.ARD_NO_ALLBOT = "No AllBot present";  // untranslated
Blockly.Msg.ARD_OUTPUT_WRITE_TO = "value";  // untranslated
Blockly.Msg.ARD_PIN_AN = "analog pin";  // untranslated
Blockly.Msg.ARD_PIN_AN_TIP = "One of the analog pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_DIG = "digital pin";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG = "digital pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG1 = "digital pin1#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG2 = "pin2#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG_TIP = "Component requiring two digital pins, pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIG_TIP = "One of the digital pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_PWM = "PWM pin";  // untranslated
Blockly.Msg.ARD_PIN_PWM_TIP = "One of the Pulse Width Modeling (PWM) pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Signal %1 est utilisé pour %2 alors que signal %3. Déjà utilisé en tant que %4.";
Blockly.Msg.ARD_PULSEON = "pulse on pin #";  // untranslated
Blockly.Msg.ARD_PULSEREAD = "Read";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT = "timeout after";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_MS = "";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Mesure la durée d'une pulsation sur le signal selectioné, dans le delai imparti";
Blockly.Msg.ARD_PULSE_READ = "mesure %1 impulsion sur le signal #%2";
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "mesure %1 impulsion sur le signal #%2 (délai de retard %3 μs)";
Blockly.Msg.ARD_PULSE_TIP = "Mesure la durée d'une pulsation sur le signal selectioné.";
Blockly.Msg.ARD_PWMOUTPUT = "PWM output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_COMPONENT = "PWM Output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_DEFAULT_NAME = "PWMOutput1";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_TIP = "Connect a generic PWM (Pulse Width Modulation) ouput to a pwm pin, so as to write an analog value to that pin. The value written should be a number between 0 and 255, and will generate a block pulse over this pin.";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_WRITE = "Write to PWM output";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";
Blockly.Msg.ARD_SERIAL_PRINT = "imprimer";
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "ajouter une nouvelle ligne";
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Imprime les données sur la console série en texte lisible ASCII.";
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "Un bloc de configuration pour %1 doit être ajouté à l'espace de travail afin d'utiliser ce bloc!";
Blockly.Msg.ARD_SERIAL_SETUP = "Configuration";
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Choisir la vitesse d'un périphérique série";
Blockly.Msg.ARD_SERIAL_SPEED = ":  vitesse";
Blockly.Msg.ARD_SERVOHUB = "Servo motor";  // untranslated
Blockly.Msg.ARD_SERVOHUB_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_SERVOHUB_TIP = "Servo Motor Connection, which can attach to a PWM pin. You have to give the servo a name, and what type it is (a 180 degree servo or a 360 degree servo.)";  // untranslated
Blockly.Msg.ARD_SERVOHUB_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_SERVO_COMPONENT = "servo";  // untranslated
Blockly.Msg.ARD_SERVO_DEFAULT_NAME = "Servo1";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "Lecture du signal# du SERVO";
Blockly.Msg.ARD_SERVO_READ_TIP = "Lecture d'un angle du SERVO";
Blockly.Msg.ARD_SERVO_ROTATE360 = "Rotate 360 degree Servo";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATEPERC = "% (-100 to 100)";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATESPEED = "with speed";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATE_TIP = "Turn a Servo with a specific speed";  // untranslated
Blockly.Msg.ARD_SERVO_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "Configurer SERVO sur Patte";
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrés (0~180)";
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Configurer un SERVO à un angle donné";
Blockly.Msg.ARD_SERVO_WRITE_TO = "vers";
Blockly.Msg.ARD_SETTONE = "Définir une tonalité sur le signal #";
Blockly.Msg.ARD_SPI_SETUP = "Configuration";
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "Division de fréquence";
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_MODE = "mode SPI  (idle - edge)";
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Bas - Descendant)";
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Bas - Montant)";
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (Haut - Descendant)";
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (Haut - Montant)";
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "décalage de données";
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configuration du périphérique SPI.";
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Envoie d'un message SPI à un esclave précis et recuperation de la donnée.";
Blockly.Msg.ARD_SPI_TRANS_NONE = "vide";
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "vers le signal esclave";
Blockly.Msg.ARD_SPI_TRANS_TIP = "Envoie d'un message SPI à un esclave précis.";
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfert";
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "Un bloc de configuration pour %1 doit être ajouté à l'espace de travail afin d'utiliser ce bloc!";
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "L'ancienne valeur du signal %1 n'est plus disponible.";
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEGREES = "degrees";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";
Blockly.Msg.ARD_STEPPER_ISROTATING = "in movement";  // untranslated
Blockly.Msg.ARD_STEPPER_ISROTATING_TIP = "Returns true if the stepper is moving.";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "Moteur pas-à-pas:";
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "signal1 #";
Blockly.Msg.ARD_STEPPER_PIN2 = "signal2 #";
Blockly.Msg.ARD_STEPPER_PIN3 = "signal3 #";
Blockly.Msg.ARD_STEPPER_PIN4 = "signal4 #";
Blockly.Msg.ARD_STEPPER_RESTART = "Get";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_AFTER = "ready";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_TIP = "Reset the motor ready after a rotation block has finished, so as to be able to rotate again";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "Combien de pas par tour";
Blockly.Msg.ARD_STEPPER_ROTATE = "Rotate";  // untranslated
Blockly.Msg.ARD_STEPPER_ROTATE_TIP = "Rotate the stepper motor over a number of degrees in a non-blocking way. This block must be called in the loop. When finished the stepper is blocked, and a call to restart movement is needed for the block to cause a next movement.";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Configuration";
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configuration d'un moteur pas-à-pas: signaux et autres paramètres.";
Blockly.Msg.ARD_STEPPER_SPEED = "Configuration de la vitesse(rpm) à";
Blockly.Msg.ARD_STEPPER_SPEED_TIP = "Sets speed of the stepper motor. The steps are set at the speed needed to have the set RPM speed based on the given steps per revolution in the constructor.";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "Déplacement grace au moteur pas-à-pas";
Blockly.Msg.ARD_STEPPER_STEPS = "pas";
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Configurer le moteur pas-à-pas avec un nombre précis de pas.";
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";
Blockly.Msg.ARD_TIME_DELAY = "Délai d'attente de";
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microsecondes";
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Attendre un délai précis en microsecondes";
Blockly.Msg.ARD_TIME_DELAY_TIP = "Attendre un délai précis en millisecondes";
Blockly.Msg.ARD_TIME_INF = "Attente sans fin (fin du programme)";
Blockly.Msg.ARD_TIME_INF_TIP = "Attente indéfinie, arrêt du programme.";
Blockly.Msg.ARD_TIME_MICROS = "Temps écoulé (microsecondes)";
Blockly.Msg.ARD_TIME_MICROS_TIP = "Renvoie le temps en microseconds depuis le lancement de ce programme sur la carte Arduino. Doit être stocké dans un Entier long positif";
Blockly.Msg.ARD_TIME_MILLIS = "Temps écoulé (millisecondes)";
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Renvoie le temps en milliseconds depuis le lancement de ce programme sur la carte Arduino. Doit être stocké dans un Entier long positif";
Blockly.Msg.ARD_TIME_MS = "millisecondes";
Blockly.Msg.ARD_TONEDURATION = "and duration (ms)";  // untranslated
Blockly.Msg.ARD_TONEDURATION_TIP = "Sets tone on a buzzer to the specified frequency within range 31 - 65535 and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "à la frequence";
Blockly.Msg.ARD_TONEPITCH_TIP = "Sets tone on a buzzer to the specified pitch and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequence";
Blockly.Msg.ARD_TONE_PIN = "Signal de tonalité #";
Blockly.Msg.ARD_TONE_PIN_TIP = "Génération de tonalité (son)sur un signal";
Blockly.Msg.ARD_TONE_TIP = " Configurer le signal de tonalité dans la plage: 31 - 65535";
Blockly.Msg.ARD_TONE_WARNING = "La fréquence doit être dans la plage 31 - 65535";
Blockly.Msg.ARD_TONE_WARNING2 = "A duration must be positive (>0)";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Tableau";
Blockly.Msg.ARD_TYPE_BOOL = "Booléen";
Blockly.Msg.ARD_TYPE_CHAR = "Charactère";
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "Dépendance manquante";
Blockly.Msg.ARD_TYPE_DECIMAL = "Décimal";
Blockly.Msg.ARD_TYPE_LONG = "Entier long";
Blockly.Msg.ARD_TYPE_NULL = "Null";
Blockly.Msg.ARD_TYPE_NUMBER = "Entier";
Blockly.Msg.ARD_TYPE_SHORT = "Entier court";
Blockly.Msg.ARD_TYPE_TEXT = "Texte";
Blockly.Msg.ARD_TYPE_UNDEF = "Non défini";
Blockly.Msg.ARD_UNKNOWN_ALLBOTJOINT = "The old joint value %1 is no longer available";  // untranslated
Blockly.Msg.ARD_VAR_AS = "comme";
Blockly.Msg.ARD_VAR_AS_TIP = "Configure une valeur à un type précis";
Blockly.Msg.ARD_WRITE_TO = "à";
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
Blockly.Msg.REPLACE_EXISTING_BLOCKS = "Replace existing blocks? 'Cancel' will merge.";  // untranslated
Blockly.Msg.UPLOAD_CLICK_1 = "To Upload your code to Arduino:";  // untranslated
Blockly.Msg.UPLOAD_CLICK_2 = "  1. click on the Arduino tab";  // untranslated
Blockly.Msg.UPLOAD_CLICK_3 = "  2. select all the code, and copy (CTRL+A and CTRL+C)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_4 = "  3. In the Arduino IDE or in a http://codebender.cc sketch, paste the code (CTRL+V)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_5 = "  4. Upload to your connected Arduino";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TITLE_IF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TOOLTIP = Blockly.Msg.CONTROLS_IF_IF_TOOLTIP;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TITLE_ELSEIF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TITLE_ELSE = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE;