// Do not edit this file; automatically generated by build.py.
'use strict';

/*
 Licensed under the Apache License, Version 2.0 (the "License"):
          http://www.apache.org/licenses/LICENSE-2.0
*/
Blockly.Arduino=new Blockly.Generator("Arduino");Blockly.Arduino.StaticTyping=new Blockly.StaticTyping;Blockly.Arduino.addReservedWords("Blockly,setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,integer,constants,floating,point,void,boolean,char,unsigned,byte,int,word,long,float,double,string,String,array,static,volatile,const,sizeof,pinMode,digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,detachInterrupt,interrupts,noInterrupts");
Blockly.Arduino.ORDER_ATOMIC=0;Blockly.Arduino.ORDER_UNARY_POSTFIX=1;Blockly.Arduino.ORDER_UNARY_PREFIX=2;Blockly.Arduino.ORDER_MULTIPLICATIVE=3;Blockly.Arduino.ORDER_ADDITIVE=4;Blockly.Arduino.ORDER_SHIFT=5;Blockly.Arduino.ORDER_RELATIONAL=6;Blockly.Arduino.ORDER_EQUALITY=7;Blockly.Arduino.ORDER_BITWISE_AND=8;Blockly.Arduino.ORDER_BITWISE_XOR=9;Blockly.Arduino.ORDER_BITWISE_OR=10;Blockly.Arduino.ORDER_LOGICAL_AND=11;Blockly.Arduino.ORDER_LOGICAL_OR=12;Blockly.Arduino.ORDER_CONDITIONAL=13;
Blockly.Arduino.ORDER_ASSIGNMENT=14;Blockly.Arduino.ORDER_NONE=99;Blockly.Arduino.PinTypes={INPUT:"INPUT",OUTPUT:"OUTPUT",PWM:"PWM",SERVO:"SERVO",STEPPER:"STEPPER",SERIAL:"SERIAL",I2C:"I2C/TWI",SPI:"SPI",INPUT_PULLUP:"INPUT_PULLUP"};Blockly.Arduino.DEF_FUNC_NAME=Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_;
Blockly.Arduino.init=function(a){Blockly.Arduino.includes_=Object.create(null);Blockly.Arduino.definitions_=Object.create(null);Blockly.Arduino.variables_=Object.create(null);Blockly.Arduino.codeFunctions_=Object.create(null);Blockly.Arduino.userFunctions_=Object.create(null);Blockly.Arduino.functionNames_=Object.create(null);Blockly.Arduino.setups_=Object.create(null);Blockly.Arduino.pins_=Object.create(null);Blockly.Arduino.variableDB_?Blockly.Arduino.variableDB_.reset():Blockly.Arduino.variableDB_=
new Blockly.Names(Blockly.Arduino.RESERVED_WORDS_);var c=Blockly.Arduino.StaticTyping.collectVarsWithTypes(a);Blockly.Arduino.StaticTyping.setProcedureArgs(a,c);for(var b in c)Blockly.Arduino.addVariable(b,Blockly.Arduino.getArduinoType_(c[b])+" "+Blockly.Arduino.variableDB_.getName(b,Blockly.Variables.NAME_TYPE)+";")};
Blockly.Arduino.finish=function(a){var c=[],b=[],d=[],e=[],f;for(f in Blockly.Arduino.includes_)c.push(Blockly.Arduino.includes_[f]);c.length&&c.push("\n");for(f in Blockly.Arduino.variables_)d.push(Blockly.Arduino.variables_[f]);d.length&&d.push("\n");for(f in Blockly.Arduino.definitions_)b.push(Blockly.Arduino.definitions_[f]);b.length&&b.push("\n");for(f in Blockly.Arduino.codeFunctions_)e.push(Blockly.Arduino.codeFunctions_[f]);for(f in Blockly.Arduino.userFunctions_)e.push(Blockly.Arduino.userFunctions_[f]);
e.length&&e.push("\n");var g=[""],h="",k="";void 0!==Blockly.Arduino.setups_.userDeclareCode&&(k="\n"+Blockly.Arduino.setups_.userDeclareCode,delete Blockly.Arduino.setups_.userDeclareCode);void 0!==Blockly.Arduino.setups_.userSetupCode&&(h="\n"+Blockly.Arduino.setups_.userSetupCode,delete Blockly.Arduino.setups_.userSetupCode);k&&g.push("declareUpFront();");for(f in Blockly.Arduino.setups_)g.push(Blockly.Arduino.setups_[f]);h&&g.push(h);delete Blockly.Arduino.includes_;delete Blockly.Arduino.definitions_;
delete Blockly.Arduino.codeFunctions_;delete Blockly.Arduino.userFunctions_;delete Blockly.Arduino.functionNames_;delete Blockly.Arduino.setups_;delete Blockly.Arduino.pins_;Blockly.Arduino.variableDB_.reset();c=c.join("\n")+d.join("\n")+b.join("\n")+e.join("\n\n");g="void setup() {"+g.join("\n  ")+"\n}\n\n";a="void loop() {\n  "+a.replace(/\n/g,"\n  ")+"\n}";return c+g+a};Blockly.Arduino.addInclude=function(a,c){void 0===Blockly.Arduino.includes_[a]&&(Blockly.Arduino.includes_[a]=c)};
Blockly.Arduino.addDeclaration=function(a,c){void 0===Blockly.Arduino.definitions_[a]&&(Blockly.Arduino.definitions_[a]=c)};Blockly.Arduino.hasDeclaration=function(a,c){return void 0!==Blockly.Arduino.definitions_[a]};Blockly.Arduino.addVariable=function(a,c,b){var d=!1;if(b||void 0===Blockly.Arduino.variables_[a])Blockly.Arduino.variables_[a]=c,d=!0;return d};Blockly.Arduino.addSetup=function(a,c,b){var d=!1;if(b||void 0===Blockly.Arduino.setups_[a])Blockly.Arduino.setups_[a]=c,d=!0;return d};
Blockly.Arduino.addFunction=function(a,c,b){void 0===Blockly.Arduino.codeFunctions_[a]?(b=Blockly.Arduino.variableDB_.getDistinctName(a,Blockly.Generator.NAME_TYPE),Blockly.Arduino.codeFunctions_[a]=c.replace(Blockly.Arduino.DEF_FUNC_NAME,b),Blockly.Arduino.functionNames_[a]=b):b&&(b=Blockly.Arduino.functionNames_[a],Blockly.Arduino.codeFunctions_[a]=c.replace(Blockly.Arduino.DEF_FUNC_NAME,b));return Blockly.Arduino.functionNames_[a]};
Blockly.Arduino.reservePin=function(a,c,b,d){void 0!==Blockly.Arduino.pins_[c]?Blockly.Arduino.pins_[c]!=b?a.setWarningText(Blockly.Msg.ARD_PIN_WARN1.replace("%1",c).replace("%2",d).replace("%3",b).replace("%4",Blockly.Arduino.pins_[c]),d):a.setWarningText(null,d):(Blockly.Arduino.pins_[c]=b,a.setWarningText(null,d))};Blockly.Arduino.scrubNakedValue=function(a){return a+";\n"};
Blockly.Arduino.quote_=function(a){a=a.replace(/\\/g,"\\\\").replace(/\n/g,"\\\n").replace(/\$/g,"\\$").replace(/'/g,"\\'");return'"'+a+'"'};
Blockly.Arduino.scrub_=function(a,c){if(null===c)return"";var b="";if(!a.outputConnection||!a.outputConnection.targetConnection){var d=a.getCommentText();d&&(b+=this.prefixLines(d,"// ")+"\n");for(var e=0;e<a.inputList.length;e++)a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=this.allNestedComments(d))&&(b+=this.prefixLines(d,"// "))}e=a.nextConnection&&a.nextConnection.targetBlock();e=this.blockToCode(e);return b+c+e};
Blockly.Arduino.getArduinoType_=function(a){switch(a.typeId){case Blockly.Types.SHORT_NUMBER.typeId:return"char";case Blockly.Types.NUMBER.typeId:return"int";case Blockly.Types.LARGE_NUMBER.typeId:return"long";case Blockly.Types.DECIMAL.typeId:return"float";case Blockly.Types.TEXT.typeId:return"String";case Blockly.Types.CHARACTER.typeId:return"char";case Blockly.Types.BOOLEAN.typeId:return"boolean";case Blockly.Types.NULL.typeId:return"void";case Blockly.Types.UNDEF.typeId:return"undefined";case Blockly.Types.CHILD_BLOCK_MISSING.typeId:return"int";
default:return"Invalid Blockly Type"}};Blockly.Arduino.noGeneratorCodeInline=function(){return["",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.noGeneratorCodeLine=function(){return""};Blockly.Arduino.md_actuator={};Blockly.Arduino.mcookie_servo_type=function(a){return[a.getFieldValue("SERVOTYPE"),Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.mcookie_servo_setup=function(a){var c=a.getFieldValue("NAMETOPSERVO"),b=a.getFieldValue("NAMEBOTTOMSERVO"),d=Blockly.Arduino.valueToCode(a,"SERVOTOPTYPE",Blockly.Arduino.ORDER_ATOMIC)||"NOSERVO",e=Blockly.Arduino.valueToCode(a,"SERVOBOTTOMTYPE",Blockly.Arduino.ORDER_ATOMIC)||"NOSERVO",f=a.connector||["0","1"],g=f[0];f=f[1];"NOSERVO"!=d&&(d="myServo"+c,Blockly.Arduino.addVariable(c,"int "+c+" = "+g+";",!0),Blockly.Arduino.addInclude("servo","#include <Servo.h>"),Blockly.Arduino.addDeclaration("servo_"+
d,"Servo "+d+";"),Blockly.Arduino.reservePin(a,g,Blockly.Arduino.PinTypes.SERVO,"Servo Microduino Use"),Blockly.Arduino.addSetup("servo_"+d,d+".attach("+g+");",!0));"NOSERVO"!=e&&(d="myServo"+b,g=f,Blockly.Arduino.addVariable(b,"int "+b+" = "+g+";",!0),Blockly.Arduino.addInclude("servo","#include <Servo.h>"),Blockly.Arduino.addDeclaration("servo_"+d,"Servo "+d+";"),Blockly.Arduino.reservePin(a,g,Blockly.Arduino.PinTypes.SERVO,"Servo Microduino Use"),Blockly.Arduino.addSetup("servo_"+d,d+".attach("+
g+");",!0));return""};Blockly.Arduino.components={};
Blockly.Arduino.core_hub_component=function(a){function c(a,c,b){(a=a.getInputTargetBlock(c))&&a.setHubConnector(b);b=Blockly.Arduino.blockToCode(a);if(!goog.isString(b))throw'Expecting code from statement block "'+a.type+'".';b&&console.log("Unexpected code in core_hub_component",b);return b}for(var b=1;b<=this.digCount_;b++){var d=a.getFieldValue("PIND"+b);c(a,"DIG"+b,[d])}for(b=1;b<=this.anaCount_;b++)d=a.getFieldValue("PINA"+b),c(a,"ANA"+b,[d]);for(b=1;b<=this.pwmCount_;b++)d=a.getFieldValue("PINP"+
b),c(a,"PWM"+b,[d]);for(b=1;b<=this.digdigCount_;b++){d=a.getFieldValue("PINDD1_"+b);var e=a.getFieldValue("PINDD2_"+b);c(a,"DIGDIG"+b,[d,e])}a.getBoardName().startsWith("allbot")&&(Blockly.Arduino.addInclude("servo","#include <Servo.h>"),Blockly.Arduino.addInclude("allbot0","\n/* ALLBOT library\n * Copyright (C) 2014 Velleman nv\n *\n * This software may be modified and distributed under the terms\n * of the MIT license.  See the LICENSE file for details.\n *\n */\n#include <Arduino.h>\n\nclass ALLBOT_Servo {\n  public:\n    ALLBOT_Servo():_flipped(false){};\n    void attach(int pin){\n      _servo.attach(pin);\n    };\n    void flipped(bool flipped){\n      _flipped = flipped;\n    };\n    void offset(int offset){\n      _offset = offset;\n    };\n    void write(int angle){\n      _angle = angle;\n      if (_flipped) angle = 180 - angle;\n      angle += (_flipped ? -_offset : _offset);\n    _servo.write(angle);\n    };\n    ALLBOT_Servo& operator=(int angle){\n      write(angle);\n    };\n  protected:\n    int _angle;\n    bool _flipped;\n    int _offset;\n    Servo _servo;\n};\n\nclass ALLBOT_AsyncServo : public ALLBOT_Servo {\n  public:\n    ALLBOT_AsyncServo():ALLBOT_Servo() { };\n    void reset(){\n      _to_angle = _angle;\n    };\n    void move(int to_angle){\n      // save the target angle\n      _to_angle = to_angle;\n    };\n    void prepare(int speed){\n      // calculate the absolute value of the angle difference\n      int angle_diff = _to_angle - _angle;\n      if (angle_diff < 0)\n        angle_diff *= -1;\n      if (angle_diff == 0) {\n        _step = 0;\n        _steps = 0;\n        return;\n      }\n      // number of degrees to move with each 1ms step\n      _step_angle = (double)angle_diff / speed;\n      _cur_angle = _angle;\n      // stepping\n      _step = 0;\n      _steps = angle_diff / _step_angle;\n      // 180\u00b0->0\u00b0 = count downwards\n      if (_to_angle < _angle)\n        _step_angle *= -1;\n    };\n    boolean tick(){\n      if (_step < _steps) {\n        _cur_angle += _step_angle;\n        write(_cur_angle);\n        _step++;\n      }\n      return (_step >= _steps);\n    };\n  protected:\n  private:\n    int _to_angle;\n    double _step_angle;\n    double _cur_angle;\n    int _step;\n    int _steps;\n};\n\nclass ALLBOT {\n  public:\n    ALLBOT(int count):_count(count) {\n      _servo = new ALLBOT_AsyncServo[count];\n    };\n    ~ALLBOT(){\n      delete[] _servo;\n    };\n    ALLBOT_AsyncServo& operator[](int i){\n      return _servo[i];\n    };\n    void attach(int servo, int pin, int angle, bool flipped, int offset){\n      ALLBOT_AsyncServo &s = _servo[servo];\n      \n      s.flipped(flipped);\n      s.offset(offset);\n      \t\n      s.attach(pin);\n      s.write(angle);\n      s.reset();\n    };\n    void write(int servo, int angle){\n      // go to angle immediately\n      _servo[servo].write(angle);\n    };\n    void move(int servo, int angle){\n      // set an intended angle to move to\n      _servo[servo].move(angle);\n    };\n    void animate(int speed){\n      for (int i=0; i<_count; i++) {\n        _servo[i].prepare(speed);\n      }\n      bool done;\n      do {\n        done = true;\n        for (int i=0; i<_count; i++) {\n          done &= _servo[i].tick();\n        }\n        delay(1);\n      }\n      while(!done);\n    };\n  protected:\n  private:\n    ALLBOT_AsyncServo *_servo;\n    int _count;\n};\n\nint sounderPin = 13;  // Declaring what pin the sounder on the VRSSM is connected to\n"),
d=13,Blockly.Arduino.reservePin(a,d,Blockly.Arduino.PinTypes.OUTPUT,"Tone Pin"),Blockly.Arduino.addSetup("io_"+d,"pinMode(sounderPin, OUTPUT);\n",!1));return""};Blockly.Arduino.loops={};Blockly.Arduino.controls_repeat=function(a){var c=Number(a.getFieldValue("TIMES")),b=Blockly.Arduino.statementToCode(a,"DO");b=Blockly.Arduino.addLoopTrap(b,a.id);a=Blockly.Arduino.variableDB_.getDistinctName("count",Blockly.Variables.NAME_TYPE);return"for (int "+a+" = 0; "+a+" < "+c+"; "+a+"++) {\n"+b+"}\n"};
Blockly.Arduino.controls_repeat_ext=function(a){var c=Blockly.Arduino.valueToCode(a,"TIMES",Blockly.Arduino.ORDER_ADDITIVE)||"0",b=Blockly.Arduino.statementToCode(a,"DO");b=Blockly.Arduino.addLoopTrap(b,a.id);a="";var d=Blockly.Arduino.variableDB_.getDistinctName("count",Blockly.Variables.NAME_TYPE),e=c;c.match(/^\w+$/)||Blockly.isNumber(c)||(e=Blockly.Arduino.variableDB_.getDistinctName("repeat_end",Blockly.Variables.NAME_TYPE),a+="int "+e+" = "+c+";\n");return a+("for (int "+d+" = 0; "+d+" < "+
e+"; "+d+"++) {\n"+b+"}\n")};Blockly.Arduino.controls_whileUntil=function(a){var c="UNTIL"==a.getFieldValue("MODE"),b=Blockly.Arduino.valueToCode(a,"BOOL",c?Blockly.Arduino.ORDER_LOGICAL_OR:Blockly.Arduino.ORDER_NONE)||"false",d=Blockly.Arduino.statementToCode(a,"DO");d=Blockly.Arduino.addLoopTrap(d,a.id);c&&(b.match(/^\w+$/)||(b="("+b+")"),b="!"+b);return"while ("+b+") {\n"+d+"}\n"};
Blockly.Arduino.controls_for=function(a){var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),b=Blockly.Arduino.valueToCode(a,"FROM",Blockly.Arduino.ORDER_ASSIGNMENT)||"0",d=Blockly.Arduino.valueToCode(a,"TO",Blockly.Arduino.ORDER_ASSIGNMENT)||"0",e=Blockly.Arduino.valueToCode(a,"BY",Blockly.Arduino.ORDER_ASSIGNMENT)||"1",f=Blockly.Arduino.statementToCode(a,"DO");f=Blockly.Arduino.addLoopTrap(f,a.id);if(Blockly.isNumber(b)&&Blockly.isNumber(d)&&Blockly.isNumber(e)){var g=
parseFloat(b)<=parseFloat(d);a="for ("+c+" = "+b+"; "+c+(g?" <= ":" >= ")+d+"; "+c;c=Math.abs(parseFloat(e));a=(1==c?a+(g?"++":"--"):a+((g?" += ":" -= ")+c))+(") {\n"+f+"}\n")}else a="",g=b,b.match(/^\w+$/)||Blockly.isNumber(b)||(g=Blockly.Arduino.variableDB_.getDistinctName(c+"_start",Blockly.Variables.NAME_TYPE),a+="int "+g+" = "+b+";\n"),b=d,d.match(/^\w+$/)||Blockly.isNumber(d)||(b=Blockly.Arduino.variableDB_.getDistinctName(c+"_end",Blockly.Variables.NAME_TYPE),a+="int "+b+" = "+d+";\n"),d=Blockly.Arduino.variableDB_.getDistinctName(c+
"_inc",Blockly.Variables.NAME_TYPE),a+="int "+d+" = ",a=Blockly.isNumber(e)?a+(Math.abs(e)+";\n"):a+("abs("+e+");\n"),a=a+("if ("+g+" > "+b+") {\n")+(Blockly.Arduino.INDENT+d+" = -"+d+";\n"),a+="}\n",a+="for ("+c+" = "+g+";\n     "+d+" >= 0 ? "+c+" <= "+b+" : "+c+" >= "+b+";\n     "+c+" += "+d+") {\n"+f+"}\n";return a};Blockly.Arduino.controls_forEach=Blockly.Arduino.noGeneratorCodeLine;
Blockly.Arduino.controls_flow_statements=function(a){switch(a.getFieldValue("FLOW")){case "BREAK":return"break;\n";case "CONTINUE":return"continue;\n"}throw"Unknown flow statement.";};Blockly.Arduino.tone={};Blockly.Arduino.io_tone=function(a){var c=a.getFieldValue("TONEPIN"),b=Blockly.Arduino.valueToCode(a,"FREQUENCY",Blockly.Arduino.ORDER_ATOMIC);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Tone Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);\n",!1);return"tone("+c+","+b+");\n"};
Blockly.Arduino.io_notone=function(a){var c=a.getFieldValue("TONEPIN");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Tone Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);\n",!1);return"noTone("+c+");\n"};
Blockly.Arduino.buzzer_config_hub=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,"Tone Pin");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};Blockly.Arduino.io_tone_buz=function(a){var c=a.getFieldValue("OUTPUTNAME");a=Blockly.Arduino.valueToCode(a,"FREQUENCY",Blockly.Arduino.ORDER_ATOMIC);return"tone("+c+", "+a+");\n"};
Blockly.Arduino.io_notone_buz=function(a){return"noTone("+a.getFieldValue("OUTPUTNAME")+");\n"};Blockly.Arduino.io_toneduration=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=Blockly.Arduino.valueToCode(a,"FREQUENCY",Blockly.Arduino.ORDER_ATOMIC);a=Blockly.Arduino.valueToCode(a,"DURATION",Blockly.Arduino.ORDER_ATOMIC);return"tone("+c+", "+b+", "+a+");\n"};Blockly.Arduino.io_pitch=function(a){return[a.getFieldValue("TONEPITCH"),Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_tonepitch=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=a.getFieldValue("TONEPITCH"),d=Blockly.Arduino.valueToCode(a,"DURATION",Blockly.Arduino.ORDER_ATOMIC);return"tone("+c+", "+b+", "+d+"); // pitch "+a.getField("TONEPITCH").getText()+"\n"};Blockly.Arduino.Boards={};Blockly.Arduino.Boards.generateDigitalIo=function(a,c){for(var b=[],d=a;d<c+1;d++)b.push([d.toString(),d.toString()]);return b};Blockly.Arduino.Boards.generateAnalogIo=function(a,c){for(var b=[],d=a;d<c+1;d++)b.push(["A"+d.toString(),"A"+d.toString()]);return b};
Blockly.Arduino.Boards.duplicateBoardProfile=function(a,c,b,d){return{name:c,description:b||a.description,compilerFlag:d||a.compilerFlag,analogPins:a.analogPins,digitalPins:a.digitalPins,pwmPins:a.pwmPins,serial:a.serial,serialPins:a.serialPins,serialSpeed:a.serialSpeed,spi:a.spi,spiPins:a.spiPins,spiClockDivide:a.spiClockDivide,i2c:a.i2c,i2cPins:a.i2cPins,i2cSpeed:a.i2cSpeed,builtinLed:a.builtinLed,interrupt:a.interrupt}};Blockly.Arduino.Boards.profiles={};
Blockly.Arduino.Boards.profiles.uno={name:"Arduino Uno",description:"Arduino Uno standard compatible board",compilerFlag:"arduino:avr:uno",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,5),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,13).concat(Blockly.Arduino.Boards.generateAnalogIo(0,5)),pwmPins:[["3","3"],["5","5"],["6","6"],["9","9"],["10","10"],["11","11"]],serial:[["serial","Serial"]],serialPins:{Serial:[["RX","0"],["TX","1"]]},serialSpeed:[["300","300"],["600","600"],["1200",
"1200"],["2400","2400"],["4800","4800"],["9600","9600"],["14400","14400"],["19200","19200"],["28800","28800"],["31250","31250"],["38400","38400"],["57600","57600"],["115200","115200"]],spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","11"],["MISO","12"],["SCK","13"]]},spiClockDivide:[["2 (8MHz)","SPI_CLOCK_DIV2"],["4 (4MHz)","SPI_CLOCK_DIV4"],["8 (2MHz)","SPI_CLOCK_DIV8"],["16 (1MHz)","SPI_CLOCK_DIV16"],["32 (500KHz)","SPI_CLOCK_DIV32"],["64 (250KHz)","SPI_CLOCK_DIV64"],["128 (125KHz)","SPI_CLOCK_DIV128"]],
i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","A4"],["SCL","A5"]]},i2cSpeed:[["100kHz","100000L"],["400kHz","400000L"]],builtinLed:[["BUILTIN_1","13"]],interrupt:[["interrupt0","2"],["interrupt1","3"]]};
Blockly.Arduino.Boards.profiles.nano_328={name:"Arduino Nano 328",description:"Arduino Nano with ATmega328 board",compilerFlag:"arduino:avr:nano:cpu=atmega328",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,7),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,13).concat(Blockly.Arduino.Boards.generateAnalogIo(0,7)),pwmPins:Blockly.Arduino.Boards.profiles.uno.pwmPins,serial:Blockly.Arduino.Boards.profiles.uno.serial,serialPins:Blockly.Arduino.Boards.profiles.uno.serialPins,serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,
spi:Blockly.Arduino.Boards.profiles.uno.spi,spiPins:Blockly.Arduino.Boards.profiles.uno.spiPins,spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:Blockly.Arduino.Boards.profiles.uno.i2c,i2cPins:Blockly.Arduino.Boards.profiles.uno.i2cPins,i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:Blockly.Arduino.Boards.profiles.uno.builtinLed,interrupt:Blockly.Arduino.Boards.profiles.uno.interrupt};
Blockly.Arduino.Boards.profiles.nano_168=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.nano_328,"Arduino Nano 168","Arduino Nano with ATmega168 compatible board","arduino:avr:nano:cpu=atmega168");
Blockly.Arduino.Boards.profiles.duemilanove_168p={name:"Arduino Nano 168p",description:"Arduino Duemilanove with ATmega168p compatible board",compilerFlag:"arduino:avr:diecimila:cpu=atmega168",analogPins:Blockly.Arduino.Boards.profiles.uno.analogPins,digitalPins:Blockly.Arduino.Boards.profiles.uno.digitalPins,pwmPins:Blockly.Arduino.Boards.profiles.uno.pwmPins,serial:Blockly.Arduino.Boards.profiles.uno.serial,serialPins:Blockly.Arduino.Boards.profiles.uno.serialPins,serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,
spi:Blockly.Arduino.Boards.profiles.uno.spi,spiPins:Blockly.Arduino.Boards.profiles.uno.spiPins,spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:Blockly.Arduino.Boards.profiles.uno.i2c,i2cPins:Blockly.Arduino.Boards.profiles.uno.i2cPins,i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:Blockly.Arduino.Boards.profiles.uno.builtinLed,interrupt:Blockly.Arduino.Boards.profiles.uno.interrupt};
Blockly.Arduino.Boards.profiles.duemilanove_328p=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.duemilanove_168p,"Arduino Duemilanove 328p","Arduino Duemilanove with ATmega328p compatible board","arduino:avr:diecimila");
Blockly.Arduino.Boards.profiles.mega={name:"Arduino Mega",description:"Arduino Mega-compatible board",compilerFlag:"arduino:avr:mega",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,15),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,53),pwmPins:Blockly.Arduino.Boards.generateDigitalIo(2,13).concat(Blockly.Arduino.Boards.generateDigitalIo(44,46)),serial:[["serial","Serial"],["serial_1","Serial1"],["serial_2","Serial2"],["serial_3","Serial3"]],serialPins:{Serial:[["TX","0"],["RX","1"]],
Serial1:[["TX","18"],["TX","19"]],Serial2:[["TX","16"],["TX","17"]],Serial3:[["TX","14"],["TX","15"]]},serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","51"],["MISO","50"],["SCK","52"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","20"],["SCL","21"]]},i2cSpeed:[["100kHz","100000L"],["400kHz","400000L"]],builtinLed:Blockly.Arduino.Boards.profiles.uno.builtinLed,interrupt:[["interrupt0",
"2"],["interrupt1","3"],["interrupt2","21"],["interrupt3","20"],["interrupt4","19"],["interrupt5","18"]]};
Blockly.Arduino.Boards.profiles.leonardo={name:"Arduino Leonardo",description:"Arduino Leonardo-compatible board",compilerFlag:"arduino:avr:leonardo",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,5).concat([["A6","4"],["A7","6"],["A8","8"],["A9","9"],["A10","10"],["A11","12"]]),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,13).concat(Blockly.Arduino.Boards.generateAnalogIo(0,5)),pwmPins:Blockly.Arduino.Boards.profiles.uno.pwmPins.concat([["13","13"]]),serial:Blockly.Arduino.Boards.profiles.uno.serial,
serialPins:Blockly.Arduino.Boards.profiles.uno.serialPins,serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","ICSP-4"],["MISO","ICSP-1"],["SCK","ICSP-3"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","2"],["SCL","3"]]},i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:Blockly.Arduino.Boards.profiles.uno.builtinLed,interrupt:[["interrupt0","3"],["interrupt1","2"],["interrupt2",
"0"],["interrupt3","1"],["interrupt4","17"]]};Blockly.Arduino.Boards.profiles.yun=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.leonardo,"Arduino Yun","Arduino Yun compatible board");
Blockly.Arduino.Boards.profiles.atmel_atmega328p_xplained_mini={name:"Atmel atmega328p Xplained mini",description:"Atmel Xplained mini board with atmega328p (Uno compatible)",compilerFlag:"atmel:avr:atmega328p_xplained_mini",analogPins:Blockly.Arduino.Boards.profiles.uno.analogPins,digitalPins:Blockly.Arduino.Boards.profiles.uno.digitalPins.concat([["20","20"]]),pwmPins:Blockly.Arduino.Boards.profiles.uno.pwmPins,serial:Blockly.Arduino.Boards.profiles.uno.serial,serialPins:Blockly.Arduino.Boards.profiles.uno.serialPins,
serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,spi:Blockly.Arduino.Boards.profiles.uno.spi,spiPins:Blockly.Arduino.Boards.profiles.uno.spiPins,spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:Blockly.Arduino.Boards.profiles.uno.i2c,i2cPins:Blockly.Arduino.Boards.profiles.uno.i2cPins,i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:[["BUILTIN_LED","13"]],interrupt:Blockly.Arduino.Boards.profiles.uno.interrupt,builtinButton:[["BUILTIN_BUTTON","20"]]};
Blockly.Arduino.Boards.profiles.atmel_atmega328pb_xplained_mini=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.atmel_atmega328p_xplained_mini,"Atmel atmega328pb Xplained mini","Atmel Xplained mini board with atmega328pb (Arduino Uno compatible)","atmel:avr:atmega328pb_xplained_mini");
Blockly.Arduino.Boards.profiles.atmel_atmega168pb_xplained_mini=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.atmel_atmega328p_xplained_mini,"Atmel atmega168pb Xplained mini","Atmel Xplained mini board with atmega168pb (Arduino Uno compatible)","atmel:avr:atmega168pb_xplained_mini");
Blockly.Arduino.Boards.profiles.esp8266_huzzah={name:"Adafruit Feather HUZZAH",description:"Adafruit HUZZAH ESP8266 compatible board",compilerFlag:"esp8266:esp8266:generic",analogPins:[["A0","A0"]],digitalPins:[["0","0"],["2","2"],["4","4"],["5","5"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"]],pwmPins:[["2","2"]],serial:[["serial","Serial"]],serialPins:{Serial:[["RX","RX"],["TX","TX"]]},serialSpeed:Blockly.Arduino.Boards.profiles.uno.serial,spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI",
"13"],["MISO","12"],["SCK","14"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","4"],["SCL","5"]]},i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:[["BUILTIN_1","0"]],interrupt:[["interrupt0","2"],["interrupt1","3"]]};
Blockly.Arduino.Boards.profiles.esp8266_wemos_d1={name:"Wemos D1",description:"Wemos D1 R2 compatible board",compilerFlag:"esp8266:esp8266:generic",analogPins:[["A0","A0"]],digitalPins:[["D0","D0"],["D1","D1"],["D2","D2"],["D3","D3"],["D4","D4"],["D5","D5"],["D6","D7"],["D8","D8"]],pwmPins:[["D1","D1"],["D2","D2"],["D3","D3"],["D4","D4"],["D5","D5"],["D6","D7"],["D8","D8"]],serial:[["serial","Serial"]],serialPins:{Serial:[["RX","RX"],["TX","TX"]]},serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,
spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","D7"],["MISO","D6"],["SCK","D5"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","D2"],["SCL","D1"]]},i2cSpeed:Blockly.Arduino.Boards.profiles.uno.i2cSpeed,builtinLed:[["BUILTIN_1","D4"]],interrupt:[["D0","D0"],["D1","D1"],["D2","D2"],["D3","D3"],["D4","D4"],["D5","D5"],["D6","D7"],["D8","D8"]]};
Blockly.Arduino.Boards.profiles.mdcore32u4={name:"Microduino CoreUSB 32U4",description:"Microduino CoreUSB 32U4 board",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,3).concat(Blockly.Arduino.Boards.generateAnalogIo(6,11)),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,21),pwmPins:Blockly.Arduino.Boards.generateDigitalIo(3,11),serial:Blockly.Arduino.Boards.profiles.leonardo.serial,serialPins:Blockly.Arduino.Boards.profiles.leonardo.serialPins,serialSpeed:Blockly.Arduino.Boards.profiles.leonardo.serialSpeed,
spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","11"],["MISO","12"],["SCK","13"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.leonardo.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","18"],["SCL","19"]]},i2cSpeed:Blockly.Arduino.Boards.profiles.leonardo.i2cSpeed,builtinLed:Blockly.Arduino.Boards.profiles.leonardo.builtinLed,interrupt:[["interrupt0","19"],["interrupt1","18"],["interrupt2","0"],["interrupt3","1"],["interrupt4","2"]]};
Blockly.Arduino.Boards.profiles.mdcookiecoreusb={name:"MCookie-CoreUSB",description:"Microduino MCookie-CoreUSB board",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,3).concat(Blockly.Arduino.Boards.generateAnalogIo(6,11)),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,21),pwmPins:Blockly.Arduino.Boards.generateDigitalIo(3,9).concat([["19","19"]]),serial:Blockly.Arduino.Boards.profiles.leonardo.serial,serialPins:Blockly.Arduino.Boards.profiles.leonardo.serialPins,serialSpeed:Blockly.Arduino.Boards.profiles.leonardo.serialSpeed,
spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","11"],["MISO","12"],["SCK","13"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.leonardo.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","18"],["SCL","19"]]},i2cSpeed:Blockly.Arduino.Boards.profiles.leonardo.i2cSpeed,builtinLed:Blockly.Arduino.Boards.profiles.leonardo.builtinLed,interrupt:[["interrupt0","19"],["interrupt1","18"],["interrupt2","0"],["interrupt3","1"],["interrupt4","2"]]};
Blockly.Arduino.Boards.profiles.allbotVR204uno=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.uno,"AllBot VR204 Uno","AllBot with 2 legs, 4 servo, with uno");Blockly.Arduino.Boards.profiles.allbotVR204uno.allbotname="VR204";Blockly.Arduino.Boards.profiles.allbotVR204uno.joints={name:[["ARD_ALLBOT_HIPLEFT","hipLeft"],["ARD_ALLBOT_HIPRIGHT","hipRight"],["ARD_ALLBOT_ANKLELEFT","ankleLeft"],["ARD_ALLBOT_ANKLERIGHT","ankleRight"]],initangle:[90,90,90,90],flipped:[1,0,1,0]};
Blockly.Arduino.Boards.profiles.allbotVR204mega=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.mega,"AllBot VR204 Mega","AllBot with 2 legs, 4 servo, with mega");Blockly.Arduino.Boards.profiles.allbotVR204mega.allbotname="VR204";Blockly.Arduino.Boards.profiles.allbotVR204mega.joints=Blockly.Arduino.Boards.profiles.allbotVR204uno.joints;
Blockly.Arduino.Boards.profiles.allbotVR408uno=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.uno,"AllBot VR408 Uno","AllBot with 4 legs, 8 servo, with uno");Blockly.Arduino.Boards.profiles.allbotVR408uno.allbotname="VR408";
Blockly.Arduino.Boards.profiles.allbotVR408uno.joints={name:[["ARD_ALLBOT_HIPFRONTLEFT","hipFrontLeft"],["ARD_ALLBOT_HIPFRONTRIGHT","hipFrontRight"],["ARD_ALLBOT_HIPREARLEFT","hipRearLeft"],["ARD_ALLBOT_HIPREARRIGHT","hipRearRight"],["ARD_ALLBOT_KNEEFRONTLEFT","kneeFrontLeft"],["ARD_ALLBOT_KNEEFRONTRIGHT","kneeFrontRight"],["ARD_ALLBOT_KNEEREARLEFT","kneeRearLeft"],["ARD_ALLBOT_KNEEREARRIGHT","kneeRearRight"]],initangle:[45,45,45,45,45,45,45,45],flipped:[0,1,1,0,1,0,1,0]};
Blockly.Arduino.Boards.profiles.allbotVR408mega=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.mega,"AllBot VR408 Mega","AllBot with 4 legs, 8 servo, with mega");Blockly.Arduino.Boards.profiles.allbotVR408mega.allbotname="VR408";Blockly.Arduino.Boards.profiles.allbotVR408mega.joints=Blockly.Arduino.Boards.profiles.allbotVR408uno.joints;
Blockly.Arduino.Boards.profiles.allbotVR412mega=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.mega,"AllBot VR412 Mega","AllBot with 4 legs, 12 servo, with mega");Blockly.Arduino.Boards.profiles.allbotVR412mega.allbotname="VR412";
Blockly.Arduino.Boards.profiles.allbotVR412mega.joints={name:[["ARD_ALLBOT_HIPFRONTLEFT","hipFrontLeft"],["ARD_ALLBOT_HIPFRONTRIGHT","hipFrontRight"],["ARD_ALLBOT_HIPREARLEFT","hipRearLeft"],["ARD_ALLBOT_HIPREARRIGHT","hipRearRight"],["ARD_ALLBOT_KNEEFRONTLEFT","kneeFrontLeft"],["ARD_ALLBOT_KNEEFRONTRIGHT","kneeFrontRight"],["ARD_ALLBOT_KNEEREARLEFT","kneeRearLeft"],["ARD_ALLBOT_KNEEREARRIGHT","kneeRearRight"],["ARD_ALLBOT_ANKLEFRONTLEFT","ankleFrontLeft"],["ARD_ALLBOT_ANKLEFRONTRIGHT","ankleFrontRight"],
["ARD_ALLBOT_ANKLEREARLEFT","ankleRearLeft"],["ARD_ALLBOT_ANKLEREARRIGHT","ankleRearRight"]],initangle:[45,45,45,45,10,10,10,10,0,0,0,0],flipped:[0,1,1,0,0,1,0,1,0,1,0,1]};Blockly.Arduino.Boards.profiles.allbotVR412uno=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.uno,"AllBot VR412 Uno","AllBot with 4 legs, 12 servo, with Uno");Blockly.Arduino.Boards.profiles.allbotVR412uno.allbotname="VR412";Blockly.Arduino.Boards.profiles.allbotVR412uno.joints=Blockly.Arduino.Boards.profiles.allbotVR412mega.joints;
Blockly.Arduino.Boards.profiles.allbotVR612uno=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.uno,"AllBot VR612 Uno","AllBot with 6 legs, 12 servo, with uno");Blockly.Arduino.Boards.profiles.allbotVR612uno.allbotname="VR612";
Blockly.Arduino.Boards.profiles.allbotVR612uno.joints={name:[["ARD_ALLBOT_HIPFRONTLEFT","hipFrontLeft"],["ARD_ALLBOT_KNEEFRONTLEFT","kneeFrontLeft"],["ARD_ALLBOT_HIPFRONTRIGHT","hipFrontRight"],["ARD_ALLBOT_KNEEFRONTRIGHT","kneeFrontRight"],["ARD_ALLBOT_HIPMIDDLERIGHT","hipMiddleRight"],["ARD_ALLBOT_KNEEMIDDLERIGHT","kneeMiddleRight"],["ARD_ALLBOT_HIPREARRIGHT","hipRearRight"],["ARD_ALLBOT_KNEEREARRIGHT","kneeRearRight"],["ARD_ALLBOT_HIPREARLEFT","hipRearLeft"],["ARD_ALLBOT_KNEEREARLEFT","kneeRearLeft"],
["ARD_ALLBOT_HIPMIDDLELEFT","hipMiddleLeft"],["ARD_ALLBOT_KNEEMIDDLELEFT","kneeMiddleLeft"]],initangle:[45,20,45,20,90,20,45,20,45,20,90,20],flipped:[0,1,1,0,1,0,0,0,1,1,0,1]};Blockly.Arduino.Boards.profiles.allbotVR612mega=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.mega,"AllBot VR612 Mega","AllBot with 6 legs, 12 servo, with mega");Blockly.Arduino.Boards.profiles.allbotVR612mega.allbotname="VR612";Blockly.Arduino.Boards.profiles.allbotVR612mega.joints=Blockly.Arduino.Boards.profiles.allbotVR612uno.joints;
Blockly.Arduino.Boards.profiles.allbotVR618mega=Blockly.Arduino.Boards.duplicateBoardProfile(Blockly.Arduino.Boards.profiles.mega,"AllBot VR618 Mega","AllBot with 6 legs, 18 servo, with mega");Blockly.Arduino.Boards.profiles.allbotVR618mega.allbotname="VR618";
Blockly.Arduino.Boards.profiles.allbotVR618mega.joints={name:[["ARD_ALLBOT_HIPFRONTRIGHT","hipFrontRight"],["ARD_ALLBOT_HIPFRONTLEFT","hipFrontLeft"],["ARD_ALLBOT_HIPMIDDLERIGHT","hipMiddleRight"],["ARD_ALLBOT_HIPMIDDLELEFT","hipMiddleLeft"],["ARD_ALLBOT_HIPREARRIGHT","hipRearRight"],["ARD_ALLBOT_HIPREARLEFT","hipRearLeft"],["ARD_ALLBOT_KNEEFRONTRIGHT","kneeFrontRight"],["ARD_ALLBOT_KNEEFRONTLEFT","kneeFrontLeft"],["ARD_ALLBOT_KNEEMIDDLERIGHT","kneeMiddleRight"],["ARD_ALLBOT_KNEEMIDDLELEFT","kneeMiddleLeft"],
["ARD_ALLBOT_KNEEREARRIGHT","kneeRearRight"],["ARD_ALLBOT_KNEEREARLEFT","kneeRearLeft"],["ARD_ALLBOT_ANKLEFRONTRIGHT","ankleFrontRight"],["ARD_ALLBOT_ANKLEFRONTLEFT","ankleFrontLeft"],["ARD_ALLBOT_ANKLEMIDDLERIGHT","ankleMiddleRight"],["ARD_ALLBOT_ANKLEMIDDLELEFT","ankleMiddleLeft"],["ARD_ALLBOT_ANKLEREARRIGHT","ankleRearRight"],["ARD_ALLBOT_ANKLEREARLEFT","ankleRearLeft"]],initangle:[45,45,90,90,45,45,135,135,135,135,135,135,0,0,0,0,0,0],flipped:[1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1]};
Blockly.Arduino.Boards.profiles.diorama={name:"Ingegno Diorama",description:"Arduino Mega-compatible board with TM1638, SD Card and stepper",compilerFlag:"arduino:avr:mega",analogPins:Blockly.Arduino.Boards.generateAnalogIo(0,5),digitalPins:Blockly.Arduino.Boards.generateDigitalIo(0,1).concat(Blockly.Arduino.Boards.generateDigitalIo(3,5)).concat([["10","10"]]).concat(Blockly.Arduino.Boards.generateAnalogIo(0,5)),pwmPins:Blockly.Arduino.Boards.generateDigitalIo(3,5).concat([["10","10"]]),serial:[["serial",
"Serial"]],serialPins:{Serial:[["TX","0"],["RX","1"]]},serialSpeed:Blockly.Arduino.Boards.profiles.uno.serialSpeed,spi:[["SPI","SPI"]],spiPins:{SPI:[["MOSI","51"],["MISO","50"],["SCK","52"]]},spiClockDivide:Blockly.Arduino.Boards.profiles.uno.spiClockDivide,i2c:[["I2C","Wire"]],i2cPins:{Wire:[["SDA","20"],["SCL","21"]]},i2cSpeed:[["100kHz","100000L"],["400kHz","400000L"]],builtinLed:Blockly.Arduino.Boards.profiles.uno.builtinLed,interrupt:[["interrupt0","2"],["interrupt1","3"],["interrupt2","21"],
["interrupt3","20"],["interrupt4","19"],["interrupt5","18"]]};Blockly.Arduino.Boards.selected=Blockly.Arduino.Boards.profiles.uno;Blockly.Arduino.Boards.selected.profilename_="uno";
Blockly.Arduino.Boards.changeBoard=function(a,c){if(void 0===Blockly.Arduino.Boards.profiles[c])console.log("Tried to set non-existing Arduino board: "+c);else if(Blockly.Arduino.Boards.selected.profilename_!=c){Blockly.Arduino.Boards.selected=Blockly.Arduino.Boards.profiles[c];Blockly.Arduino.Boards.selected.profilename_=c;for(var b=a.getAllBlocks(),d=0;d<b.length;d++){var e=b[d].updateFields;e&&e.call(b[d])}}};
Blockly.Arduino.Boards.refreshBlockFieldDropdown=function(a,c,b){var d=a.getField(c);c=d.getValue();b=Blockly.Arduino.Boards.selected[b];d.menuGenerator_=b;d=!1;for(var e=0;e<b.length;e++)c==b[e][1]&&(d=!0);d?a.setWarningText(null,"bPin"):a.setWarningText("The old pin value "+c+" is no longer available.","bPin")};Blockly.Arduino.IO={};Blockly.Arduino.io_digitalwrite=function(a){var c=a.getFieldValue("PIN"),b=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"LOW";Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return"digitalWrite("+c+", "+b+");\n"};
Blockly.Arduino.io_digitalread=function(a){var c=a.getFieldValue("PIN");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return["digitalRead("+c+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_builtin_led=function(a){var c=a.getFieldValue("BUILT_IN_LED"),b=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"LOW";Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Set LED");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return"digitalWrite("+c+", "+b+");\n"};
Blockly.Arduino.io_analogwrite=function(a){var c=a.getFieldValue("PIN"),b=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Analogue Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);0>b||255<b?a.setWarningText("The analogue value set must be between 0 and 255","pwm_value"):a.setWarningText(null,"pwm_value");return"analogWrite("+c+", "+b+");\n"};
Blockly.Arduino.io_analogread=function(a){var c=a.getFieldValue("PIN");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Analogue Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return["analogRead("+c+")",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.io_highlow=function(a){return[a.getFieldValue("STATE"),Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_pulsein=function(a){var c=a.getFieldValue("PULSEPIN"),b=Blockly.Arduino.valueToCode(a,"PULSETYPE",Blockly.Arduino.ORDER_ATOMIC);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Pulse Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);\n",!1);return["pulseIn("+c+", "+b+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_pulsetimeout=function(a){var c=a.getFieldValue("PULSEPIN"),b=Blockly.Arduino.valueToCode(a,"PULSETYPE",Blockly.Arduino.ORDER_ATOMIC),d=Blockly.Arduino.valueToCode(a,"TIMEOUT",Blockly.Arduino.ORDER_ATOMIC);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Pulse Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);\n",!1);return["pulseIn("+c+", "+b+", "+d+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.analogsensor_config_hub=function(a){var c=a.getFieldValue("SENSORNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT,"Analogue Read");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return""};Blockly.Arduino.analogsensor_read=function(a){return["analogRead("+a.getFieldValue("SENSORNAME")+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.digitalinput_config_hub=function(a){var c=a.getFieldValue("SENSORNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return""};Blockly.Arduino.digitalinput_read=function(a){return["digitalRead("+a.getFieldValue("SENSORNAME")+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.digitaloutput_config_hub=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};
Blockly.Arduino.digitaloutput_write=function(a){var c=a.getFieldValue("OUTPUTNAME");a=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"LOW";return"digitalWrite("+c+", "+a+");\n"};
Blockly.Arduino.pwmoutput_config_hub=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,"Analogue Write");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};
Blockly.Arduino.pwmoutput_write=function(a){var c=a.getFieldValue("OUTPUTNAME"),b=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";0>b||255<b?a.setWarningText("The analogue value set must be between 0 and 255","pwm_value"):a.setWarningText(null,"pwm_value");return"analogWrite("+c+", "+b+");\n"};Blockly.Arduino.component_diorama={};
Blockly.Arduino.diorama_hub_component=function(a){function c(a,c,b){(a=a.getInputTargetBlock(c))&&a.setHubConnector(b);b=Blockly.Arduino.blockToCode(a);if(!goog.isString(b))throw'Expecting code from statement block "'+a.type+'".';b&&console.log("Unexpected code in core_hub_component",b);return b}for(var b=a.getFieldValue("STEPPER_NAME"),d=1;d<=this.digCount_;d++){var e=a.getFieldValue("PIND"+d);c(a,"DIG"+d,[e])}for(d=1;d<=this.anaCount_;d++)e=a.getFieldValue("PINA"+d),c(a,"ANA"+d,[e]);for(d=1;d<=
this.pwmCount_;d++)e=a.getFieldValue("PINP"+d),c(a,"PWM"+d,[e]);for(d=1;d<=this.digdigCount_;d++){e=a.getFieldValue("PINDD1_"+d);var f=a.getFieldValue("PINDD2_"+d);c(a,"DIGDIG"+d,[e,f])}Blockly.Arduino.addFunction("DIObtn_S1_fun","void DIObtn_S1_fun() {}");Blockly.Arduino.addFunction("DIObtn_S2_fun","void DIObtn_S2_fun() {}");Blockly.Arduino.addFunction("DIObtn_S3_fun","void DIObtn_S3_fun() {}");Blockly.Arduino.addFunction("DIObtn_S4_fun","void DIObtn_S4_fun() {}");Blockly.Arduino.addFunction("DIObtn_S5_fun",
"void DIObtn_S5_fun() {}");Blockly.Arduino.addFunction("DIObtn_S6_fun","void DIObtn_S6_fun() {}");Blockly.Arduino.addFunction("DIObtn_S7_fun","void DIObtn_S7_fun() {}");Blockly.Arduino.addFunction("DIObtn_S8_fun",'void DIObtn_S8_fun() {\n  DIOLastBtnPushed = 0;\n  DIOBtn1Running = false;\n  DIOBtn2Running = false;\n  DIOBtn3Running = false;\n  DIOBtn4Running = false;\n  DIOBtn5Running = false;\n  DIOBtn6Running = false;\n  DIOBtn7Running = false;\n  DIOBtn8Running = false;\n  if (DIOMP3player.isPlaying()) {DIOMP3player.stopTrack();}\n  DIOmodule.setDisplayToString("stop    ");\n  //also the stepper is reset \n  STEPPERNAME_finished = false; \n  STEPPERNAME_rotating = false;\n  STEPPERNAME_stepsdone = 0;\n}\n'.replace(RegExp("STEPPERNAME",
"g"),"stepper_"+b));Blockly.Arduino.addFunction("DIObtn_stoprunning","void DIObtn_stoprunning(bool stopall) {\n\n  if (stopall) {\n    DIOBtn1Running = false;\n    DIOBtn2Running = false;\n    DIOBtn3Running = false;\n    DIOBtn4Running = false;\n    DIOBtn5Running = false;\n    DIOBtn6Running = false;\n    DIOBtn7Running = false;\n    DIOBtn8Running = false;\n  } else {\n    if (DIOLastBtnPushed == 1) {DIOBtn1Running = false;}\n    else if (DIOLastBtnPushed == 2) {DIOBtn2Running = false;}\n    else if (DIOLastBtnPushed == 3) {DIOBtn3Running = false;}\n    else if (DIOLastBtnPushed == 4) {DIOBtn4Running = false;}\n    else if (DIOLastBtnPushed == 5) {DIOBtn5Running = false;}\n    else if (DIOLastBtnPushed == 6) {DIOBtn6Running = false;}\n    else if (DIOLastBtnPushed == 7) {DIOBtn7Running = false;}\n    else if (DIOLastBtnPushed == 8) {DIOBtn8Running = false;}\n  }\n\n  DIOLastBtnPushed = 0;\n}\n");
Blockly.Arduino.addInclude("tm1638","#include <TM1638.h>       // TM1638 bibliotheek");Blockly.Arduino.addInclude("spi","#include <SPI.h>          // SPI library");Blockly.Arduino.addInclude("sdfat","#include <SdFat.h>        // SDFat Library");Blockly.Arduino.addInclude("sfempshield","#include <SFEMP3Shield.h> // Mp3 Shield Library");Blockly.Arduino.addInclude("diorama0",'\nTM1638 DIOmodule(45, 43, 41);   // Sets up TM1638 Diorama module, verbonden met pinnen D2 (DIO), D5 (CLK), en D1 (STB)\nuint8_t DIOLastBtnPushed = 0; // 8 buttons, from 1 to 8\nbool DIOBtn1Running = false;\nbool DIOBtn2Running = false;\nbool DIOBtn3Running = false;\nbool DIOBtn4Running = false;\nbool DIOBtn5Running = false;\nbool DIOBtn6Running = false;\nbool DIOBtn7Running = false;\nbool DIOBtn8Running = false;\n\n// Variables used in base code for the diorama\nSdFat sd; // Create object to handle SD functions\n\nSFEMP3Shield DIOMP3player; // Create Mp3 library object\n// These variables are used in the MP3 initialization to set up\n// some stereo options:\nuint8_t DIOvolume = 40; // MP3 Player volume 0=max, 255=lowest (off)\nconst uint16_t DIOmonoMode = 1;  // Mono setting 0=off, 3=max\nint DIOtracknrplaying = 0;\n\n// initSD() initializes the SD card and checks for an error.\nvoid DIOinitSD()\n{\n  //Initialize the SdCard.\n  if (!sd.begin(SD_SEL, SPI_HALF_SPEED))\n    sd.initErrorHalt();\n  if (!sd.chdir("/"))\n    sd.errorHalt("sd.chdir");\n}\n\n// DIOinitMP3Player() sets up all of the initialization for the\n// MP3 Player Shield. It runs the begin() function, checks\n// for errors, applies a patch if found, and sets the volume/\n// stero mode.\nvoid DIOinitMP3Player()\n{\n  uint8_t result = DIOMP3player.begin(); // init the mp3 player shield\n  if (result != 0) // check result, see readme for error codes.\n  {\n    // Error checking can go here!\n  }\n  DIOMP3player.setVolume(DIOvolume, DIOvolume);\n  DIOMP3player.setMonoMode(DIOmonoMode);\n}\n\n');
Blockly.Arduino.addSetup("diorama",'\n\n  DIOinitSD();  // Initialize the SD card\n  DIOinitMP3Player(); // Initialize the MP3 Shield\n\n  for (int x = 0; x < 5; x++)\n  {\n    DIOmodule.setDisplayToString("diorama");  // toon tekst\n    delay(600);\n    DIOmodule.setDisplayToString("ingegno ");  // toon tekst\n    delay(600);\n  }\n\n  DIOmodule.setDisplayToString("start   ");  // toon tekst\n',!0);d=Blockly.Arduino.PinTypes.STEPPER;e=Blockly.Arduino.valueToCode(a,"STEPPER_STEPS",Blockly.Arduino.ORDER_ATOMIC)||
"360";f=Blockly.Arduino.valueToCode(a,"STEPPER_SPEED",Blockly.Arduino.ORDER_ATOMIC)||"5";Blockly.Arduino.addVariable(b,"int "+b+"[4] = {31, 35, 33, 37};",!0);b="stepper_"+b;Blockly.Arduino.reservePin(a,31,d,"Stepper");Blockly.Arduino.reservePin(a,33,d,"Stepper");Blockly.Arduino.reservePin(a,35,d,"Stepper");Blockly.Arduino.reservePin(a,37,d,"Stepper");Blockly.Arduino.addInclude("stepper","#include <Stepper.h>\n#define DIO_IN1  31\n#define DIO_IN2  33\n#define DIO_IN3  35\n#define DIO_IN4  37");Blockly.Arduino.addFunction(b+
"Angle2Steps","unsigned long STEPPERNAME_Angle2Steps(int angle) {\n  if (angle < 0) {\n    // convert negative angle to a positive one\n    angle = -angle;\n  }\n  return (angle * STEPPERNAME_steps) / 360;\n}\n".replace(RegExp("STEPPERNAME","g"),b));Blockly.Arduino.addDeclaration(b,"const unsigned long "+b+"_steps = "+e+";\nStepper "+b+"("+b+"_steps, DIO_IN1, DIO_IN3, DIO_IN2, DIO_IN4);\nbool "+b+"_rotating = false;\nunsigned long "+b+"_stepsdone = 0;\nbool "+b+"_finished = false;");Blockly.Arduino.addSetup(b,
"int "+b+"_rpm = "+f+";\n"+b+".setSpeed("+b+"_rpm);",!0);return"\n// DIOmodule.getButtons() geeft het nummer van de ingedrukte drukknoppen.\n// S1 = 1, S2 = 2, S3 = 4 .... S8 = 128\n// worden drukknoppen S1 en S3 ingedrukt dan is het resultaat = 5\nbyte DIOdrukknoppen = DIOmodule.getButtons();  // bewaar het nummer van de ingedrukte knoppen in DIOdruknoppen\n\nif (bitRead(DIOdrukknoppen, 0)) {\n  DIOLastBtnPushed = 1; DIOBtn1Running = true;\n} else if (bitRead(DIOdrukknoppen, 1)) {\n  DIOLastBtnPushed = 2; DIOBtn2Running = true;\n} else if (bitRead(DIOdrukknoppen, 2)) {\n  DIOLastBtnPushed = 3; DIOBtn3Running = true;\n} else if (bitRead(DIOdrukknoppen, 3)) {\n  DIOLastBtnPushed = 4; DIOBtn4Running = true;\n} else if (bitRead(DIOdrukknoppen, 4)) {\n  DIOLastBtnPushed = 5; DIOBtn5Running = true;\n} else if (bitRead(DIOdrukknoppen, 5)) {\n  DIOLastBtnPushed = 6; DIOBtn6Running = true;\n} else if (bitRead(DIOdrukknoppen, 6)){\n  DIOLastBtnPushed = 7; DIOBtn7Running = true;\n} else if (bitRead(DIOdrukknoppen, 7)) {\n  DIOLastBtnPushed = 8; DIOBtn8Running = true;\n}\n\nDIOmodule.setLEDs(DIOdrukknoppen);  // doe led branden boven de drukknop\n\n// we execute the commands as desired by the last button press\nif (DIOLastBtnPushed == 1) {  DIObtn_S1_fun();}\nif (DIOLastBtnPushed == 2) {  DIObtn_S2_fun();}\nif (DIOLastBtnPushed == 3) {  DIObtn_S3_fun();}\nif (DIOLastBtnPushed == 4) {  DIObtn_S4_fun();}\nif (DIOLastBtnPushed == 5) {  DIObtn_S5_fun();}\nif (DIOLastBtnPushed == 6) {  DIObtn_S6_fun();}\nif (DIOLastBtnPushed == 7) {  DIObtn_S7_fun();}\nif (DIOLastBtnPushed == 8) {  DIObtn_S8_fun();}\nif (DIOBtn1Running && DIOLastBtnPushed != 1) {  DIObtn_S1_fun();}\nif (DIOBtn2Running && DIOLastBtnPushed != 2) {  DIObtn_S2_fun();}\nif (DIOBtn3Running && DIOLastBtnPushed != 3) {  DIObtn_S3_fun();}\nif (DIOBtn4Running && DIOLastBtnPushed != 4) {  DIObtn_S4_fun();}\nif (DIOBtn5Running && DIOLastBtnPushed != 5) {  DIObtn_S5_fun();}\nif (DIOBtn6Running && DIOLastBtnPushed != 6) {  DIObtn_S6_fun();}\nif (DIOBtn7Running && DIOLastBtnPushed != 7) {  DIObtn_S7_fun();}\nif (DIOBtn8Running && DIOLastBtnPushed != 8) {  DIObtn_S8_fun();}\n"};
Blockly.Arduino.diorama_button_declaration=function(a){var c=Blockly.Arduino.statementToCode(a,"BUTTONCODE");a=a.getFieldValue("BUTTON");Blockly.Arduino.addFunction("DIObtn_S%1_fun".replace("%1",a),"void DIObtn_S%1_fun() {\n ".replace("%1",a)+c+"\n}",!0);return""};Blockly.Arduino.procedures={};
Blockly.Arduino.procedures_defreturn=function(a){var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),b=Blockly.Arduino.statementToCode(a,"STACK");Blockly.Arduino.STATEMENT_PREFIX&&(b=Blockly.Arduino.prefixLines(Blockly.Arduino.STATEMENT_PREFIX.replace(/%1/g,"'"+a.id+"'"),Blockly.Arduino.INDENT)+b);Blockly.Arduino.INFINITE_LOOP_TRAP&&(b=Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,"'"+a.id+"'")+b);var d=Blockly.Arduino.valueToCode(a,"RETURN",Blockly.Arduino.ORDER_NONE)||
"";d&&(d="  return "+d+";\n");for(var e=[],f=0;f<a.arguments_.length;f++)e[f]=Blockly.Arduino.getArduinoType_(a.getArgType(a.arguments_[f]))+" "+Blockly.Arduino.variableDB_.getName(a.arguments_[f],Blockly.Variables.NAME_TYPE);f=Blockly.Types.NULL;a.getReturnType&&(f=a.getReturnType());f=Blockly.Arduino.getArduinoType_(f);b=f+" "+c+"("+e.join(", ")+") {\n"+b+d+"}";b=Blockly.Arduino.scrub_(a,b);Blockly.Arduino.userFunctions_[c]=b;return null};Blockly.Arduino.procedures_defnoreturn=Blockly.Arduino.procedures_defreturn;
Blockly.Arduino.procedures_callreturn=function(a){for(var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),b=[],d=0;d<a.arguments_.length;d++)b[d]=Blockly.Arduino.valueToCode(a,"ARG"+d,Blockly.Arduino.ORDER_NONE)||"null";return[c+"("+b.join(", ")+")",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.procedures_callnoreturn=function(a){for(var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),b=[],d=0;d<a.arguments_.length;d++)b[d]=Blockly.Arduino.valueToCode(a,"ARG"+d,Blockly.Arduino.ORDER_NONE)||"null";return c+"("+b.join(", ")+");\n"};
Blockly.Arduino.procedures_ifreturn=function(a){var c="if ("+(Blockly.Arduino.valueToCode(a,"CONDITION",Blockly.Arduino.ORDER_NONE)||"false")+") {\n";a.hasReturnValue_?(a=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"null",c+="  return "+a+";\n"):c+="  return;\n";return c+"}\n"};
Blockly.Arduino.arduino_functions=function(a){var c=Blockly.Arduino.statementToCode(a,"SETUP_FUNC");c&&Blockly.Arduino.addSetup("userSetupCode",c,!0);a=a.getInputTargetBlock("LOOP_FUNC");c=Blockly.Arduino.blockToCode(a);if(!goog.isString(c))throw'Expecting code from statement block "'+a.type+'".';return c};
Blockly.Arduino.arduino_declareupfront=function(a){if(a=Blockly.Arduino.statementToCode(a,"DECLARE_FUNC"))a="void declareUpFront() {\n"+a+"\n}",Blockly.Arduino.addDeclaration("userDeclareCode",a),Blockly.Arduino.addSetup("userDeclareCode",a);return""};
Blockly.Arduino.controls_effect=function(a){for(var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),b=Blockly.Arduino.valueToCode(a,"EFFECTDURATION",Blockly.Arduino.ORDER_ATOMIC)||"1000",d=0;void 0!==Blockly.Arduino.userFunctions_["ard_effect"+d.toString()];)d+=1;d=d.toString();var e="int ard_effect"+d+"_status = -1;\nunsigned long ard_effect"+d+"_start, ard_effect"+d+"_time;\n#define EFFECT"+d+"_PERIOD "+b+"\n";c="\nvoid "+c+"() {\n  //Variables of this effect are reffered to with ard_effect"+
d+"\n  boolean restart = false;\n  ard_effect"+d+"_time = millis() - ard_effect"+d+"_start;\n"+("  if (ard_effect"+d+"_time > EFFECT"+d+"_PERIOD) {\n    //end effect, make sure it restarts\n    if (ard_effect"+d+"_status > -1) {\n");a.elseCount_&&(g=Blockly.Arduino.statementToCode(a,"ELSE"),c+="    //END STATEMENTS\n    "+g);c+="    }\n    restart = true;\n    ard_effect"+d+"_status = -1;\n    ard_effect"+d+"_start = ard_effect"+d+"_start + ard_effect"+d+"_time;\n    ard_effect"+d+"_time = 0;\n  }\n  if (not restart && ard_effect"+
d+"_status == -1) {\n    ard_effect"+d+"_status = 0;\n    ard_effect"+d+"_start = ard_effect"+d+"_start + ard_effect"+d+"_time;\n    ard_effect"+d+"_time = 0;\n";Blockly.Arduino.addSetup("ard_effect"+d,"ard_effect"+d+"_status = -1;\n  ard_effect"+d+"_start = millis();\n",!1);var f,g=Blockly.Arduino.statementToCode(a,"DO0");c+=g+"  }\n";var h="  ";for(f=1;f<=a.elseifCount_;f++)b=Blockly.Arduino.valueToCode(a,"IF"+f,Blockly.Arduino.ORDER_NONE)||b,g=Blockly.Arduino.statementToCode(a,"DO"+f),e+="#define EFFECT"+
d+"_"+f+"_DURATION "+b+"\n",1!=f&&(h="  } else "),c+=h+"if (ard_effect"+d+"_time > EFFECT"+d+"_"+f+"_DURATION && ard_effect"+d+"_status < "+f+") {\n   ard_effect"+d+"_status = "+f+";\n"+g;1!=f&&(c+="  }\n");a=Blockly.Arduino.scrub_(a,e+(c+"}\n"));Blockly.Arduino.userFunctions_["ard_effect"+d]=a;return""};Blockly.Arduino.ard_comment=function(a){return"/* "+(Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE)||"")+" */\n"};Blockly.Arduino.serial={};Blockly.Arduino.serial_print=function(a){for(var c=a.getFieldValue("SERIAL_ID"),b=Blockly.Arduino.valueToCode(a,"CONTENT",Blockly.Arduino.ORDER_ATOMIC)||"0",d="TRUE"==a.getFieldValue("NEW_LINE"),e=Blockly.Arduino.Boards.selected.serialPins[c],f=0;f<e.length;f++)Blockly.Arduino.reservePin(a,e[f][1],Blockly.Arduino.PinTypes.SERIAL,"SERIAL "+e[f][0]);return d?c+".println("+b+");\n":c+".print("+b+");\n"};
Blockly.Arduino.serial_setup=function(a){var c=a.getFieldValue("SERIAL_ID");a=a.getFieldValue("SPEED");Blockly.Arduino.addSetup("serial_"+c,c+".begin("+a+");",!0);return""};Blockly.Arduino.sensor={};Blockly.Arduino.DHT_config_hub=function(a){var c=a.getFieldValue("NAMEDHT"),b=a.getFieldValue("DHTTYPE"),d=(a.connector||["0"])[0],e="myDHT"+c;Blockly.Arduino.addVariable(c,"int "+c+" = "+d+";",!0);Blockly.Arduino.addInclude("dht","#include <DHT.h>");Blockly.Arduino.addDeclaration("dht_"+e,"DHT "+e+"("+c+", "+b+");");Blockly.Arduino.reservePin(a,d,Blockly.Arduino.PinTypes.INPUT,"DHT Read");Blockly.Arduino.addSetup("dht_"+e,e+".begin();",!0);return""};
Blockly.Arduino.DHT_readTemp=function(a){a="myDHT"+a.getFieldValue("DHT_NAME");var c=a+"Temp",b=a+"Temptmp";Blockly.Arduino.addDeclaration(b,"float "+b+" = 200;");Blockly.Arduino.addDeclaration(c,"float "+c+" = 200;");Blockly.Arduino.addFunction(c,"float DHTNAME_readT() {\n  DHTNAMETEMPTMP = DHTNAME.readTemperature();\n  if (! isnan(DHTNAMETEMPTMP) ) {\n    //override stored temperature only on good reading\n    DHTNAMETEMP = DHTNAMETEMPTMP;\n  }\n  return DHTNAMETEMP;\n}\n".replace(RegExp("DHTNAMETEMPTMP",
"g"),b).replace(RegExp("DHTNAMETEMP","g"),c).replace(RegExp("DHTNAME","g"),a));return[a+"_readT()",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.DHT_readRH=function(a){a="myDHT"+a.getFieldValue("DHT_NAME");var c=a+"RH",b=a+"RHtmp";Blockly.Arduino.addDeclaration(b,"float "+b+" = 0.;");Blockly.Arduino.addDeclaration(c,"float "+c+" = 0.;");Blockly.Arduino.addFunction(c,"float DHTNAME_readRH() {\n  DHTNAMERHTMP = DHTNAME.readHumidity();\n  if (! isnan(DHTNAMERHTMP) ) {\n    //override stored RH only on good reading\n    DHTNAMERH = DHTNAMERHTMP;\n  }\n  return DHTNAMERH;\n}\n".replace(RegExp("DHTNAMERHTMP","g"),b).replace(RegExp("DHTNAMERH",
"g"),c).replace(RegExp("DHTNAME","g"),a));return[a+"_readRH()",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.time={};Blockly.Arduino.time_delay=function(a){return"delay("+(Blockly.Arduino.valueToCode(a,"DELAY_TIME_MILI",Blockly.Arduino.ORDER_ATOMIC)||"0")+");\n"};Blockly.Arduino.time_delaymicros=function(a){return"delayMicroseconds("+(Blockly.Arduino.valueToCode(a,"DELAY_TIME_MICRO",Blockly.Arduino.ORDER_ATOMIC)||"0")+");\n"};Blockly.Arduino.time_millis=function(a){return["millis()",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.time_micros=function(a){return["micros()",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.infinite_loop=function(a){return"while(true);\n"};Blockly.Arduino.allbot={};
Blockly.Arduino.allbotservo_config_hub=function(a){var c=a.getFieldValue("NAMESERVO"),b=(a.connector||["2"])[0];Blockly.Arduino.addVariable(c,"int pin"+c+" = "+b+";",!0);var d=Blockly.Arduino.Boards.selected,e=-1;if(void 0!==d.joints){for(var f in d.joints.name)d.joints.name[f][1]==c&&(e=f);if(-1<e){var g="ALLBOT BOT("+d.joints.initangle.length+");   // Number of motors);\n\nenum MotorName {\n";for(f in d.joints.name)g+="  "+d.joints.name[f][1]+",\n";Blockly.Arduino.addVariable("ALLBOT",g+"};",!0);
Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.SERVO,"Servo Write");Blockly.Arduino.addSetup("allbot1_"+c,"BOT.attach("+c+", "+b+", "+d.joints.initangle[e]+", "+d.joints.flipped[e]+", 0);",!0);Blockly.Arduino.addSetup("allbot2_"+c,"  // Wait for joints to be initialized\n  delay(500);",!0)}else Blockly.Arduino.addDeclaration("// Unknown AllBot joint selected")}else Blockly.Arduino.addDeclaration("// No AllBot on the workspace. Add it to generate code");return""};
var allbotfunctions={VR204:{chirp:"\nvoid chirp(int beeps, int speedms){\n\n  for (int i = 0; i < beeps; i++){\n    for (int i = 0; i < 255; i++){\n      digitalWrite(sounderPin, HIGH);\n      delayMicroseconds((355-i)+ (speedms*2));\n      digitalWrite(sounderPin, LOW);\n      delayMicroseconds((355-i)+ (speedms*2));\n    }\n     delay(30);\n  }\n}",walkbackward:"\nvoid walkbackward(int steps, int speedms){\n    BOT.move(hipLeft, 130);\n    BOT.move(hipRight, 40); \n    BOT.animate(speedms);\n\n    for (int i = 0; i < steps; i++){\n      BOT.move(ankleLeft, 135);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleRight, 45);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleLeft, 90);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleRight, 90);\n      BOT.animate(speedms*2);\n    }\n\n    BOT.move(hipLeft, 90);\n    BOT.move(hipRight, 90); \n    BOT.animate(speedms);\n}",
walkforward:"\nvoid walkforward(int steps, int speedms){\n    BOT.move(hipLeft, 130);\n    BOT.move(hipRight, 40); \n    BOT.animate(speedms);\n\n    for (int i = 0; i < steps; i++){\n      BOT.move(ankleLeft, 45);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleRight, 135);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleLeft, 90);\n      BOT.animate(speedms*2);\n  \n      BOT.move(ankleRight, 90);\n      BOT.animate(speedms*2);\n    }\n\n    BOT.move(hipLeft, 90);\n    BOT.move(hipRight, 90); \n    BOT.animate(speedms);\n}",
lookright:"\nvoid lookright(int speedms){\n    BOT.move(hipLeft, 45);\n    BOT.move(hipRight, 135);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipLeft, 90);\n    BOT.move(hipRight, 90);\n    BOT.animate(speedms);\n}",lookleft:"\nvoid lookleft(int speedms){\n    BOT.move(hipLeft, 135);\n    BOT.move(hipRight, 45);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipLeft, 90);\n    BOT.move(hipRight, 90);\n    BOT.animate(speedms);\n}",walkright:"\nvoid walkright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(ankleRight, 45);\n    BOT.animate(speedms);\n\n    BOT.move(ankleLeft, 135);\n    BOT.animate(speedms);\n\n    BOT.move(ankleRight, 90);\n    BOT.animate(speedms);\n\n    BOT.move(ankleLeft, 90);\n    BOT.animate(speedms);\n  }\n}",
walkleft:"\nvoid walkleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(ankleLeft, 45);\n    BOT.animate(speedms);\n\n    BOT.move(ankleRight, 135);\n    BOT.animate(speedms);\n\n    BOT.move(ankleLeft, 90);\n    BOT.animate(speedms);\n\n    BOT.move(ankleRight, 90);\n    BOT.animate(speedms);\n  }\n}",scared:"\nvoid scared(int shakes, int beeps){\n    \n    for (int i = 0; i < shakes; i++){\n\n      BOT.move(ankleLeft, 45);\n      BOT.move(ankleRight, 45);\n      BOT.animate(100);\n      \n      BOT.move(ankleLeft, 135);\n      BOT.move(ankleRight, 135);\n      BOT.animate(100);\n    }    \n    BOT.move(ankleLeft, 90);\n    BOT.move(ankleRight, 90);\n    BOT.animate(100);\n    \n    chirp(beeps, 0);\n}"},
VR408:{chirp:"\nvoid chirp(int beeps, int speedms){\n\n  for (int i = 0; i < beeps; i++){\n    for (int i = 0; i < 255; i++){\n      digitalWrite(sounderPin, HIGH);\n      delayMicroseconds((355-i)+ (speedms*2));\n      digitalWrite(sounderPin, LOW);\n      delayMicroseconds((355-i)+ (speedms*2));\n    }\n     delay(30);\n  }\n}",walkbackward:"\nvoid walkbackward(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 20);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 20);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
walkforward:"\nvoid walkforward(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 80);\n    BOT.move(hipFrontLeft, 20);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipFrontRight, 20);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
walkleft:"\nvoid walkleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 0);\n    BOT.move(hipFrontLeft, 90);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n     \n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 90);\n    BOT.move(hipFrontRight, 0);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
walkright:"\nvoid walkright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 0);\n    BOT.move(hipFrontRight, 90);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n     \n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 90);\n    BOT.move(hipFrontLeft, 0);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n  }\n}",
lookright:"\nvoid lookright(int speedms){\n    BOT.move(hipRearRight, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.move(hipFrontRight, 10);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n}",lookleft:"\nvoid lookleft(int speedms){\n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.move(hipFrontLeft, 10);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n}",
leanright:"\nvoid leanright(int speedms){\n    BOT.move(kneeFrontRight, 90);\n    BOT.move(kneeRearRight, 90);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeFrontRight, 45);\n    BOT.move(kneeRearRight, 45);\n    BOT.animate(speedms);\n}",leanleft:"\nvoid leanleft(int speedms){\n    BOT.move(kneeFrontLeft, 90);\n    BOT.move(kneeRearLeft, 90);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeFrontLeft, 45);\n    BOT.move(kneeRearLeft, 45);\n    BOT.animate(speedms);\n}",
leanforward:"\nvoid leanforward(int speedms){\n    BOT.move(kneeFrontLeft, 90);\n    BOT.move(kneeFrontRight, 90);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeFrontLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n}",leanbackward:"\nvoid leanbackward(int speedms){\n    BOT.move(kneeRearLeft, 90);\n    BOT.move(kneeRearRight, 90);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeRearRight, 45);\n    BOT.animate(speedms);\n}",
turnleft:"\nvoid turnleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 90);\n    BOT.move(hipFrontLeft, 90);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 0);\n    BOT.move(hipFrontRight, 0);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
turnright:"\nvoid turnright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(kneeFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 0);\n    BOT.move(hipFrontLeft, 0);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 30);\n    BOT.move(kneeFrontLeft, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 90);\n    BOT.move(hipFrontRight, 90);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 30);\n    BOT.move(kneeFrontRight, 30);\n    BOT.animate(speedms);\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 45);\n    BOT.move(kneeFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
scared:"\nvoid scared(int shakes, int beeps){\n    BOT.move(kneeFrontRight, 0);\n    BOT.move(kneeRearRight, 0);\n    BOT.move(kneeFrontLeft, 0);\n    BOT.move(kneeRearLeft, 0);\n    BOT.animate(50);\n    \n    for (int i = 0; i < shakes; i++){\n \n      BOT.move(hipRearRight, 80);\n      BOT.move(hipRearLeft, 10);\n      BOT.move(hipFrontRight, 10);\n      BOT.move(hipFrontLeft, 80);\n      BOT.animate(100);\n      \n      BOT.move(hipRearLeft, 80);\n      BOT.move(hipRearRight, 10);\n      BOT.move(hipFrontLeft, 10);\n      BOT.move(hipFrontRight, 80);\n      BOT.animate(50);\n    }\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(200);\n    \n    chirp(beeps, 0);\n    \n    BOT.move(kneeFrontRight, 45);\n    BOT.move(kneeRearRight, 45);\n    BOT.move(kneeFrontLeft, 45);\n    BOT.move(kneeRearLeft, 45);\n    BOT.animate(75);\n}"},
VR412:{standup:"\nvoid standup(){\n\n  BOT.move(kneeFrontLeft, 110);\n  BOT.move(kneeFrontRight, 110);\n  BOT.animate(500);\n\n  BOT.move(kneeRearLeft, 110);\n  BOT.move(kneeRearRight, 110);\n  BOT.animate(500);\n\n  BOT.move(kneeFrontLeft, 90);\n  BOT.animate(100);\n  BOT.move(ankleFrontLeft, 20);\n  BOT.animate(100);\n  BOT.move(kneeFrontLeft, 110);\n  BOT.animate(100);\n\n  BOT.move(kneeFrontRight, 90);\n  BOT.animate(100);\n  BOT.move(ankleFrontRight, 20);\n  BOT.animate(100);\n  BOT.move(kneeFrontRight, 110);\n  BOT.animate(100);\n\n  BOT.move(kneeRearLeft, 90);\n  BOT.animate(100);\n  BOT.move(ankleRearLeft, 20);\n  BOT.animate(100);\n  BOT.move(kneeRearLeft, 110);\n  BOT.animate(100);\n\n  BOT.move(kneeRearRight, 90);\n  BOT.animate(100);\n  BOT.move(ankleRearRight, 20);\n  BOT.animate(100);\n  BOT.move(kneeRearRight, 110);\n  BOT.animate(100);\n}",
chirp:"\nvoid chirp(int beeps, int speedms){\n\n  for (int i = 0; i < beeps; i++){\n    for (int i = 0; i < 255; i++){\n      digitalWrite(sounderPin, HIGH);\n      delayMicroseconds((355-i)+ (speedms*2));\n      digitalWrite(sounderPin, LOW);\n      delayMicroseconds((355-i)+ (speedms*2));\n    }\n     delay(30);\n  }\n}",walkbackward:"\nvoid walkbackward(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n  }\n}",
walkforward:"\nvoid walkforward(int steps, int speedms){\n  for (int i = 0; i < steps; i++){ \n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.animate(speedms);\n  }\n}",
walkleft:"\nvoid walkleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
walkright:"\nvoid walkright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.animate(speedms);\n  }\n}",
lookright:"\nvoid lookright(int speedms){\n    BOT.move(hipRearRight, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.move(hipFrontRight, 10);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n}",lookleft:"\nvoid lookleft(int speedms){\n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.move(hipFrontLeft, 10);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(speedms);\n}",
leanright:"\nvoid leanright(int speedms){\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(kneeRearRight, 80);\n    BOT.move(ankleFrontRight, 0);\n    BOT.move(ankleRearRight, 0);\n    BOT.animate(speedms*2);\n    \n    delay(speedms*3);\n\n    BOT.move(kneeFrontRight, 110);  \n    BOT.move(kneeRearRight, 110);\n    BOT.move(ankleFrontRight, 20);\n    BOT.move(ankleRearRight, 20);\n    BOT.animate(speedms*2);\n}",leanleft:"\nvoid leanleft(int speedms){\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(ankleFrontLeft, 0);\n    BOT.move(ankleRearLeft, 0);\n    BOT.animate(speedms*2);\n    \n    delay(speedms*3);\n\n    BOT.move(kneeFrontLeft, 110);  \n    BOT.move(kneeRearLeft, 110);\n    BOT.move(ankleFrontLeft, 20);\n    BOT.move(ankleRearLeft, 20);\n    BOT.animate(speedms*2);\n}",
leanforward:"\nvoid leanforward(int speedms){\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(ankleFrontLeft, 0);\n    BOT.move(ankleFrontRight, 0);\n    BOT.animate(speedms*2);\n    \n    delay(speedms*3);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.move(kneeFrontRight, 110);\n    BOT.move(ankleFrontLeft, 20);\n    BOT.move(ankleFrontRight, 20);\n    BOT.animate(speedms*2);\n}",leanbackward:"\nvoid leanbackward(int speedms){\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(kneeRearRight, 80);\n    BOT.move(ankleRearLeft, 0);\n    BOT.move(ankleRearRight, 0);\n    BOT.animate(speedms*2);\n    \n    delay(speedms*3);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.move(kneeRearRight, 110);\n    BOT.move(ankleRearLeft, 20);\n    BOT.move(ankleRearRight, 20);\n    BOT.animate(speedms*2);\n\n}",
turnleft:"\nvoid turnleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n  }\n}",
turnright:"\nvoid turnright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeRearRight, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 80);\n    BOT.move(hipRearLeft, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeRearLeft, 110);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 80);\n    BOT.move(hipFrontLeft, 10);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 110);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 80);\n    BOT.move(hipFrontRight, 80);\n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 110);\n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n  }\n}",
scared:"\nvoid scared(int shakes, int beeps){\n    for (int i = 0; i < shakes; i++){\n      BOT.move(kneeFrontLeft, 80);\n      BOT.move(kneeFrontRight, 80);\n      BOT.move(kneeRearLeft, 80);\n      BOT.move(kneeRearRight, 80);\n      BOT.move(ankleFrontLeft, 0);\n      BOT.move(ankleFrontRight, 0);\n      BOT.move(ankleRearLeft, 0);\n      BOT.move(ankleRearRight, 0);\n      BOT.animate(30);\n  \n      BOT.move(kneeFrontLeft, 110);  \n      BOT.move(kneeFrontRight, 110); \n      BOT.move(kneeRearLeft, 110);\n      BOT.move(kneeRearRight, 110);\n      BOT.move(ankleFrontLeft, 20);\n      BOT.move(ankleFrontRight, 20);\n      BOT.move(ankleRearLeft, 20);\n      BOT.move(ankleRearRight, 20);\n      BOT.animate(30);\n    }\n    chirp(beeps, 0);\n}"},
VR612:{chirp:"\nvoid chirp(int beeps, int speedms){\n\n  for (int i = 0; i < beeps; i++){\n    for (int i = 0; i < 255; i++){\n      digitalWrite(sounderPin, HIGH);\n      delayMicroseconds((355-i)+ (speedms*2));\n      digitalWrite(sounderPin, LOW);\n      delayMicroseconds((355-i)+ (speedms*2));\n    }\n     delay(30);\n  }\n}",walkbackward:"\nvoid walkbackward(int steps, int speedms){\n  \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.move(hipFrontLeft, 15);\n    BOT.move(hipFrontRight, 75);\n    \n    BOT.move(hipFrontLeft, 80);\n    BOT.move(hipRearLeft, 5);\n    BOT.move(hipMiddleRight, 115);\n    BOT.animate(speedms);//\n  \n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeFrontLeft, 10);\n    BOT.move(kneeRearLeft, 10);\n    BOT.move(kneeMiddleRight, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);//\n      \n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipFrontRight, 80);\n    BOT.move(hipRearRight, 5);\n    BOT.move(hipMiddleLeft, 115);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 10);\n    BOT.move(kneeRearRight, 10);\n    BOT.move(kneeMiddleLeft, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.move(kneeMiddleRight, 50);\n    BOT.animate(speedms);//\n    \n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.move(hipFrontLeft, 80);\n    BOT.move(hipRearLeft, 5);\n    BOT.move(hipMiddleRight, 115);\n    BOT.animate(speedms);\n\n  }\n    BOT.move(kneeFrontLeft, 10);\n    BOT.move(kneeRearLeft, 10);\n    BOT.move(kneeMiddleRight, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);//\n    \n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.animate(speedms);//\n}",
walkforward:"\nvoid walkforward(int steps, int speedms){\n  \n    BOT.move(kneeRearLeft, 50);\n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeMiddleRight, 50);\n    BOT.animate(speedms); //\n    \n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipFrontLeft, 5);\n    BOT.move(hipMiddleRight, 65);\n    BOT.animate(speedms);//\n  \n  for (int i = 0; i < steps; i++){\n    \n    BOT.move(kneeRearLeft, 10);\n    BOT.move(kneeFrontLeft, 10);\n    BOT.move(kneeMiddleRight, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);//\n      \n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipRearRight, 80);\n    BOT.move(hipFrontRight, 5);\n    BOT.move(hipMiddleLeft, 65);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 10);\n    BOT.move(kneeFrontRight, 10);\n    BOT.move(kneeMiddleLeft, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearLeft, 50);\n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeMiddleRight, 50);\n    BOT.animate(speedms);//\n    \n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipFrontLeft, 5);\n    BOT.move(hipMiddleRight, 65);\n    BOT.animate(speedms);\n  }\n    BOT.move(kneeRearLeft, 10);\n    BOT.move(kneeFrontLeft, 10);\n    BOT.move(kneeMiddleRight, 10);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);//\n    \n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.animate(speedms);//\n}",
walkleft:"\nvoid walkleft(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontLeft, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontRight, 10);\n    BOT.move(hipRearLeft, 80);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeMiddleRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms/2);\n  \n    BOT.move(hipFrontLeft, 15);\n    BOT.move(hipFrontRight, 75);\n    BOT.move(hipRearLeft, 15);\n    BOT.move(hipRearRight, 75);\n    BOT.animate(speedms); \n    \n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.animate(speedms/2);\n    }\n  }",
walkright:"\nvoid walkright(int steps, int speedms){\n  for (int i = 0; i < steps; i++){\n    \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontLeft, 10);\n    BOT.move(hipRearRight, 80);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontRight, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeMiddleRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms/2);\n  \n    BOT.move(hipFrontLeft, 75);\n    BOT.move(hipFrontRight, 15);\n    BOT.move(hipRearLeft, 75);\n    BOT.move(hipRearRight, 15);\n    BOT.animate(speedms); \n    \n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.animate(speedms/2);\n    \n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.animate(speedms/2);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.animate(speedms);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.animate(speedms/2);\n    }\n  }",
lookright:"\nvoid lookright(int speedms){\n    BOT.move(hipRearRight, 80);\n    BOT.move(hipRearLeft, 10);\n    BOT.move(hipFrontRight, 10);\n    BOT.move(hipFrontLeft, 80);\n    BOT.move(hipMiddleRight, 65);\n    BOT.move(hipMiddleLeft, 125);    \n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.animate(speedms);\n}",
lookleft:"\nvoid lookleft(int speedms){\n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipRearRight, 10);\n    BOT.move(hipFrontLeft, 10);\n    BOT.move(hipFrontRight, 80);\n    BOT.move(hipMiddleRight, 125);\n    BOT.move(hipMiddleLeft, 65);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.animate(speedms);\n}",
leanright:"\nvoid leanright(int speedms){\n  \n    BOT.move(kneeRearRight, 10);\n    BOT.move(kneeFrontRight, 10);\n    BOT.move(kneeMiddleRight, 0);\n    BOT.move(kneeRearLeft, 90);\n    BOT.move(kneeFrontLeft, 90);\n    BOT.move(kneeMiddleLeft, 90);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    \n    BOT.animate(speedms);\n}",
leanleft:"\nvoid leanleft(int speedms){\n  \n    BOT.move(kneeRearRight, 90);\n    BOT.move(kneeFrontRight, 90);\n    BOT.move(kneeMiddleRight, 90);\n    BOT.move(kneeRearLeft, 10);\n    BOT.move(kneeFrontLeft, 10);\n    BOT.move(kneeMiddleLeft, 0);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    \n    BOT.animate(speedms);\n}",
leanforward:"\nvoid leanforward(int speedms){\n  \n    BOT.move(kneeFrontLeft, 90);\n    BOT.move(kneeFrontRight, 90);\n    BOT.move(kneeMiddleRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    \n    BOT.animate(speedms);\n}",leanbackward:"\nvoid leanbackward(int speedms){\n  \n    BOT.move(kneeRearLeft, 90);\n    BOT.move(kneeRearRight, 90);\n    BOT.move(kneeMiddleRight, 50);\n    BOT.move(kneeMiddleLeft, 50);\n    BOT.animate(speedms);\n    \n    delay(speedms/2);\n    \n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    \n    BOT.animate(speedms);\n}",
turnleft:"\nvoid turnleft(int steps, int speedms){\n\n  for (int i = 0; i < steps; i++){\n\n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.move(kneeMiddleRight, 50);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 80);\n    BOT.move(hipRearLeft, 5);\n    BOT.move(hipMiddleRight, 65);    \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeMiddleRight, 20);    \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeMiddleLeft, 50);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontRight, 5);\n    BOT.move(hipRearRight, 80);\n    BOT.move(hipMiddleLeft, 115);   \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeMiddleLeft, 20);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleLeft, 90);    \n    BOT.animate(speedms);\n  }\n}",
turnright:"\nvoid turnright(int steps, int speedms){\n\n  for (int i = 0; i < steps; i++){\n\n    BOT.move(kneeFrontLeft, 50);\n    BOT.move(kneeRearLeft, 50);\n    BOT.move(kneeMiddleRight, 50);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 5);\n    BOT.move(hipRearLeft, 80);\n    BOT.move(hipMiddleRight, 115);    \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeRearLeft, 20);\n    BOT.move(kneeMiddleRight, 20);    \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 50);\n    BOT.move(kneeRearRight, 50);\n    BOT.move(kneeMiddleLeft, 50);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontRight, 80);\n    BOT.move(hipRearRight, 5);\n    BOT.move(hipMiddleLeft, 65);    \n    BOT.animate(speedms);\n\n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeMiddleLeft, 20);    \n    BOT.animate(speedms);\n\n    BOT.move(hipFrontLeft, 45);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleLeft, 90);    \n    BOT.animate(speedms);\n  }\n}",
scared:"\nvoid scared(int shakes, int beeps){\n    BOT.move(kneeFrontRight, 0);\n    BOT.move(kneeMiddleRight, 0);\n    BOT.move(kneeRearRight, 0);\n    BOT.move(kneeFrontLeft, 0);\n    BOT.move(kneeMiddleLeft, 0);\n    BOT.move(kneeRearLeft, 0); \n    BOT.animate(50);\n    \n    for (int i = 0; i < shakes; i++){\n \n      BOT.move(hipRearRight, 80);\n      BOT.move(hipMiddleRight, 65);\n      BOT.move(hipRearLeft, 5);\n      BOT.move(hipFrontRight, 5);\n      BOT.move(hipMiddleLeft, 115);\n      BOT.move(hipFrontLeft, 80);\n      BOT.animate(100);\n      \n      BOT.move(hipRearLeft, 80);\n      BOT.move(hipMiddleRight, 115);\n      BOT.move(hipRearRight, 5);\n      BOT.move(hipFrontLeft, 5);\n      BOT.move(hipMiddleLeft, 65);\n      BOT.move(hipFrontRight, 80);\n      BOT.animate(50);\n    }\n    \n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipFrontRight, 45);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.move(hipFrontLeft, 45);\n    BOT.animate(200);\n    \n    chirp(beeps, 0);\n    \n    BOT.move(kneeFrontRight, 20);\n    BOT.move(kneeMiddleRight, 20);\n    BOT.move(kneeRearRight, 20);\n    BOT.move(kneeFrontLeft, 20);\n    BOT.move(kneeMiddleLeft, 20);\n    BOT.move(kneeRearLeft, 20); \n    BOT.animate(75);\n}"},
VR618:{chirp:"\nvoid chirp(int beeps, int speedms){\n\n  for (int i = 0; i < beeps; i++){\n    for (int i = 0; i < 255; i++){\n      digitalWrite(sounderPin, HIGH);\n      delayMicroseconds((355-i)+ (speedms*2));\n      digitalWrite(sounderPin, LOW);\n      delayMicroseconds((355-i)+ (speedms*2));\n    }\n     delay(30);\n  }\n}",standup:"\nvoid standup ()\n{\n  BOT.move(kneeFrontRight, 100);\n  BOT.move(kneeFrontLeft, 100);\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeRearLeft, 100);\n  BOT.animate(200);\n}",
walkbackward:"\nvoid walkbackward(int steps, int speedms)\n{\n  BOT.move(kneeFrontRight, 130);    //Lift 3a\n  BOT.move(kneeRearRight, 130);\n  BOT.move(kneeMiddleLeft, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 70);    //Swivel 3a backward\n  BOT.move(hipRearRight, 20);\n  BOT.move(hipMiddleLeft, 115);\n  BOT.animate(speedms);\n  \n  for (int i = 0; i < steps; i++){\n  \n  BOT.move(kneeFrontRight, 70);  //Drop 3a + small ankle movement\n  BOT.move(kneeRearRight, 70);\n  BOT.move(kneeMiddleLeft, 70);\n  BOT.move(ankleFrontRight, 20);\n  BOT.move(ankleRearRight, 20);\n  BOT.move(ankleMiddleLeft, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 45);    //Swivel 3a back to center\n  BOT.move(hipRearRight, 45);\n  BOT.move(hipMiddleLeft, 90);\n  //\n  BOT.move(kneeFrontLeft, 130);    //Lift 3b\n  BOT.move(kneeRearLeft, 130);\n  BOT.move(kneeMiddleRight, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);    //Normalize 3a\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  //\n  BOT.move(hipFrontLeft, 70);    //Swivel 3b backward\n  BOT.move(hipRearLeft, 20);\n  BOT.move(hipMiddleRight, 115);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontLeft, 70);      //Drop 3b + small ankle movement\n  BOT.move(kneeRearLeft, 70);\n  BOT.move(kneeMiddleRight, 70);\n  BOT.move(ankleFrontLeft, 20);\n  BOT.move(ankleRearLeft, 20);\n  BOT.move(ankleMiddleRight, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontLeft, 45);    //Swivel 3b back to center\n  BOT.move(hipRearLeft, 45);\n  BOT.move(hipMiddleRight, 90);\n  //\n  BOT.move(kneeFrontRight, 130);    //Lift 3a\n  BOT.move(kneeRearRight, 130);\n  BOT.move(kneeMiddleLeft, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontLeft, 100);    //Normalize 3b\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(ankleFrontLeft, 0);\n  BOT.move(ankleRearLeft, 0);\n  BOT.move(ankleMiddleRight, 0);\n  //\n  BOT.move(hipFrontRight, 70);    //Swivel 3a backward\n  BOT.move(hipRearRight, 20);\n  BOT.move(hipMiddleLeft, 115);\n  BOT.animate(speedms);\n  \n  }\n  \n  BOT.move(kneeFrontRight, 70);  //Drop 3a + small ankle movement\n  BOT.move(kneeRearRight, 70);\n  BOT.move(kneeMiddleLeft, 70);\n  BOT.move(ankleFrontRight, 20);\n  BOT.move(ankleRearRight, 20);\n  BOT.move(ankleMiddleLeft, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 45);    //Swivel 3a back to center\n  BOT.move(hipRearRight, 45);\n  BOT.move(hipMiddleLeft, 90);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);    //Normalize 3a\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  BOT.animate(speedms);\n}",
walkforward:"\nvoid walkforward(int steps, int speedms)\n{\n  BOT.move(kneeFrontRight, 130);    //Lift 3a\n  BOT.move(kneeRearRight, 130);\n  BOT.move(kneeMiddleLeft, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 20);    //Swivel 3a forward\n  BOT.move(hipRearRight, 70);\n  BOT.move(hipMiddleLeft, 65);\n  BOT.animate(speedms);\n  \n  for (int i = 0; i < steps; i++){\n  \n  BOT.move(kneeFrontRight, 70);  //Drop 3a + small ankle movement\n  BOT.move(kneeRearRight, 70);\n  BOT.move(kneeMiddleLeft, 70);\n  BOT.move(ankleFrontRight, 20);\n  BOT.move(ankleRearRight, 20);\n  BOT.move(ankleMiddleLeft, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 45);    //Swivel 3a back to center\n  BOT.move(hipRearRight, 45);\n  BOT.move(hipMiddleLeft, 90);\n  //\n  BOT.move(kneeFrontLeft, 130);    //Lift 3b\n  BOT.move(kneeRearLeft, 130);\n  BOT.move(kneeMiddleRight, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);    //Normalize 3a\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  //\n  BOT.move(hipFrontLeft, 20);    //Swivel 3b forward\n  BOT.move(hipRearLeft, 70);\n  BOT.move(hipMiddleRight, 65);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontLeft, 70);      //Drop 3b + small ankle movement\n  BOT.move(kneeRearLeft, 70);\n  BOT.move(kneeMiddleRight, 70);\n  BOT.move(ankleFrontLeft, 20);\n  BOT.move(ankleRearLeft, 20);\n  BOT.move(ankleMiddleRight, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontLeft, 45);    //Swivel 3b back to center\n  BOT.move(hipRearLeft, 45);\n  BOT.move(hipMiddleRight, 90);\n  //\n  BOT.move(kneeFrontRight, 130);    //Lift 3a\n  BOT.move(kneeRearRight, 130);\n  BOT.move(kneeMiddleLeft, 130);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontLeft, 100);    //Normalize 3b\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(ankleFrontLeft, 0);\n  BOT.move(ankleRearLeft, 0);\n  BOT.move(ankleMiddleRight, 0);\n  //\n  BOT.move(hipFrontRight, 20);    //Swivel 3a forward\n  BOT.move(hipRearRight, 70);\n  BOT.move(hipMiddleLeft, 65);\n  BOT.animate(speedms);\n  \n  }\n  \n  BOT.move(kneeFrontRight, 70);  //Drop 3a + small ankle movement\n  BOT.move(kneeRearRight, 70);\n  BOT.move(kneeMiddleLeft, 70);\n  BOT.move(ankleFrontRight, 20);\n  BOT.move(ankleRearRight, 20);\n  BOT.move(ankleMiddleLeft, 20);\n  BOT.animate(speedms);\n  \n  BOT.move(hipFrontRight, 45);    //Swivel 3a back to center\n  BOT.move(hipRearRight, 45);\n  BOT.move(hipMiddleLeft, 90);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);    //Normalize 3a\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  BOT.animate(speedms);\n}",
walkleft:"\nvoid walkleft(int steps, int speedms){\n  // TODO - No sequence implemented\n  }",walkright:"\nvoid walkright(int steps, int speedms){\n  // TODO - No sequence implemented\n  }",lookright:"\nvoid lookright(int speedms){\n    // TODO - No sequence implemented\n}",lookleft:"\nvoid lookleft(int speedms){\n    // TODO - No sequence implemented\n}",leanright:"\nvoid leanright (int speedms)\n{\n  BOT.move(kneeFrontRight, 50);\n  BOT.move(kneeMiddleRight, 50);\n  BOT.move(kneeRearRight, 50);\n  BOT.move(ankleFrontRight, 50);\n  BOT.move(ankleMiddleRight, 50);\n  BOT.move(ankleRearRight, 50);\n  //\n  BOT.move(kneeFrontLeft, 150);\n  BOT.move(kneeMiddleLeft, 150);\n  BOT.move(kneeRearLeft, 150);\n  BOT.move(ankleFrontLeft, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  BOT.move(ankleRearLeft, 0);\n  BOT.animate(speedms);\n  //\n  BOT.move(kneeFrontRight, 100);\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(kneeRearRight, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleMiddleRight, 0);\n  BOT.move(ankleRearRight, 0);\n  //\n  BOT.move(kneeFrontLeft, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(ankleFrontLeft, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  BOT.move(ankleRearLeft, 0);\n  BOT.animate(speedms);\n}",
leanleft:"\nvoid leanleft (int speedms)\n{\n  BOT.move(kneeFrontLeft, 50);\n  BOT.move(kneeMiddleLeft, 50);\n  BOT.move(kneeRearLeft, 50);\n  BOT.move(ankleFrontLeft, 50);\n  BOT.move(ankleMiddleLeft, 50);\n  BOT.move(ankleRearLeft, 50);\n  //\n  BOT.move(kneeFrontRight, 150);\n  BOT.move(kneeMiddleRight, 150);\n  BOT.move(kneeRearRight, 150);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleMiddleRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.animate(speedms);\n  //\n  BOT.move(kneeFrontLeft, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(ankleFrontLeft, 0);\n  BOT.move(ankleMiddleLeft, 0);\n  BOT.move(ankleRearLeft, 0);\n  //\n  BOT.move(kneeFrontRight, 100);\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(kneeRearRight, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleMiddleRight, 0);\n  BOT.move(ankleRearRight, 0);\n  BOT.animate(speedms);\n}",
leanforward:"\nvoid leanforward(int speedms)\n{  \n  BOT.move(kneeRearRight, 50);\n  BOT.move(kneeRearLeft, 50);\n  BOT.move(ankleRearRight, 80);\n  BOT.move(ankleRearLeft, 80);\n  //\n  BOT.move(kneeFrontRight, 135);\n  BOT.move(kneeFrontLeft, 135);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleFrontLeft, 0);\n  //\n  BOT.move(kneeMiddleRight, 110);\n  BOT.move(kneeMiddleLeft, 110);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);\n  BOT.move(kneeFrontLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleFrontLeft, 0);\n  //\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleRearLeft, 0);\n  //\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.animate(speedms);\n}",
leanbackward:"\nvoid leanbackward(int speedms)\n{  \n  BOT.move(kneeFrontRight, 50);\n  BOT.move(kneeFrontLeft, 50);\n  BOT.move(ankleFrontRight, 80);\n  BOT.move(ankleFrontLeft, 80);\n  //\n  BOT.move(kneeRearRight, 135);\n  BOT.move(kneeRearLeft, 135);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleRearLeft, 0);\n  //\n  BOT.move(kneeMiddleRight, 110);\n  BOT.move(kneeMiddleLeft, 110);\n  BOT.animate(speedms);\n  \n  BOT.move(kneeFrontRight, 100);\n  BOT.move(kneeFrontLeft, 100);\n  BOT.move(ankleFrontRight, 0);\n  BOT.move(ankleFrontLeft, 0);\n  //\n  BOT.move(kneeRearRight, 100);\n  BOT.move(kneeRearLeft, 100);\n  BOT.move(ankleRearRight, 0);\n  BOT.move(ankleRearLeft, 0);\n  //\n  BOT.move(kneeMiddleRight, 100);\n  BOT.move(kneeMiddleLeft, 100);\n  BOT.animate(speedms);\n}",
turnleft:"\nvoid turnleft (int steps, int speedms)\n{\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeFrontRight, 130);    //Lift 3a\n    BOT.move(kneeRearRight, 130);\n    BOT.move(kneeMiddleLeft, 130);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontRight, 20);    //turn 3a left\n    BOT.move(hipRearRight, 70);\n    BOT.move(hipMiddleLeft, 115);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 100);  //Drop 3a\n    BOT.move(kneeRearRight, 100);\n    BOT.move(kneeMiddleLeft, 100);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 130);    //Lift 3b\n    BOT.move(kneeRearLeft, 130);\n    BOT.move(kneeMiddleRight, 130);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontLeft, 70);    //turn 3b left\n    BOT.move(hipRearLeft, 20);\n    BOT.move(hipMiddleRight, 65);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 100);      //Drop 3b + small ankle movement\n    BOT.move(kneeRearLeft, 100);\n    BOT.move(kneeMiddleRight, 100);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontRight, 45);    //Swivel 3a&b back to center\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.move(hipFrontLeft, 45);    //turn 3b right\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.animate(speedms);\n  }\n}",
turnright:"\nvoid turnright (int steps, int speedms)\n{\n  for (int i = 0; i < steps; i++){\n    BOT.move(kneeFrontRight, 130);    //Lift 3a\n    BOT.move(kneeRearRight, 130);\n    BOT.move(kneeMiddleLeft, 130);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontRight, 70);    //turn 3a right\n    BOT.move(hipRearRight, 20);\n    BOT.move(hipMiddleLeft, 65);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontRight, 100);  //Drop 3a\n    BOT.move(kneeRearRight, 100);\n    BOT.move(kneeMiddleLeft, 100);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 130);    //Lift 3b\n    BOT.move(kneeRearLeft, 130);\n    BOT.move(kneeMiddleRight, 130);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontLeft, 20);    //turn 3b right\n    BOT.move(hipRearLeft, 70);\n    BOT.move(hipMiddleRight, 115);\n    BOT.animate(speedms);\n    \n    BOT.move(kneeFrontLeft, 100);      //Drop 3b + small ankle movement\n    BOT.move(kneeRearLeft, 100);\n    BOT.move(kneeMiddleRight, 100);\n    BOT.animate(speedms);\n    \n    BOT.move(hipFrontRight, 45);    //Swivel 3a&b back to center\n    BOT.move(hipRearRight, 45);\n    BOT.move(hipMiddleLeft, 90);\n    BOT.move(hipFrontLeft, 45);    //turn 3b right\n    BOT.move(hipRearLeft, 45);\n    BOT.move(hipMiddleRight, 90);\n    BOT.animate(speedms);\n  }\n}",
scared:"\nvoid scared(int shakes, int beeps){\n   // TODO - No sequence implemented\n}"}};
Blockly.Arduino.allbot_walkforward=function(a){var c=Blockly.Arduino.valueToCode(a,"STEPS",Blockly.Arduino.ORDER_ATOMIC)||"1";a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("walkforward",allbotfunctions[b.allbotname].walkforward),c="walkforward("+c+", "+a+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.allbot_walkbackward=function(a){var c=Blockly.Arduino.valueToCode(a,"STEPS",Blockly.Arduino.ORDER_ATOMIC)||"1";a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("walkbackward",allbotfunctions[b.allbotname].walkbackward),c="walkbackward("+c+", "+a+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.allbot_walkleft=function(a){var c=Blockly.Arduino.valueToCode(a,"STEPS",Blockly.Arduino.ORDER_ATOMIC)||"1";a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("walkleft",allbotfunctions[b.allbotname].walkleft),c="walkleft("+c+", "+a+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.allbot_walkright=function(a){var c=Blockly.Arduino.valueToCode(a,"STEPS",Blockly.Arduino.ORDER_ATOMIC)||"1";a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("walkright",allbotfunctions[b.allbotname].walkright),c="walkright("+c+", "+a+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.allbot_lookleft=function(a){a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var c=Blockly.Arduino.Boards.selected;void 0!==c.allbotname?(c=allbotfunctions[c.allbotname].lookleft,void 0!==c?(Blockly.Arduino.addFunction("lookleft",c),a="lookleft("+a+");\n"):a="// This AllBot has no lookleft function !!\n"):a="// No AllBot on the workspace. Add it to generate code\n";return a};
Blockly.Arduino.allbot_lookright=function(a){a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"200";var c=Blockly.Arduino.Boards.selected;void 0!==c.allbotname?(c=allbotfunctions[c.allbotname].lookright,void 0!==c?(Blockly.Arduino.addFunction("lookright",c),a="lookright("+a+");\n"):a="// This AllBot has no lookright function !!\n"):a="// No AllBot on the workspace. Add it to generate code\n";return a};
Blockly.Arduino.allbot_chirp=function(a){var c=Blockly.Arduino.valueToCode(a,"BEEPS",Blockly.Arduino.ORDER_ATOMIC)||"1";a=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"100";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("chirp",allbotfunctions[b.allbotname].chirp),c="chirp("+c+", "+a+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.allbot_scared=function(a){var c=Blockly.Arduino.valueToCode(a,"BEEPS",Blockly.Arduino.ORDER_ATOMIC)||"3";a=Blockly.Arduino.valueToCode(a,"SHAKES",Blockly.Arduino.ORDER_ATOMIC)||"10";var b=Blockly.Arduino.Boards.selected;void 0!==b.allbotname?(Blockly.Arduino.addFunction("chirp",allbotfunctions[b.allbotname].chirp),Blockly.Arduino.addFunction("scared",allbotfunctions[b.allbotname].scared),c="scared("+a+", "+c+");\n"):c="// No AllBot on the workspace. Add it to generate code\n";return c};
Blockly.Arduino.servoallbot_write=function(a){var c=a.getFieldValue("SERVO_NAME");a=Blockly.Arduino.valueToCode(a,"SERVO_ANGLE",Blockly.Arduino.ORDER_ATOMIC)||"90";return"BOT.write("+c+", "+a+");\n"};Blockly.Arduino.allbot_animate=function(a){var c=Blockly.Arduino.valueToCode(a,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"100";return Blockly.Arduino.statementToCode(a,"SERVOMOVEMENTS")+("  BOT.animate("+c+");\n")};
Blockly.Arduino.servoallbot_animate=function(a){var c=a.getFieldValue("SERVO_NAME");a=Blockly.Arduino.valueToCode(a,"SERVO_ANGLE",Blockly.Arduino.ORDER_ATOMIC)||"90";return"BOT.move("+c+", "+a+");\n"};
Blockly.Arduino.allbot_remotecontrol=function(a){var c=Blockly.Arduino.statementToCode(a,"RC_COMMANDS");"TRUE"==a.getFieldValue("RC_SERIAL")?(Blockly.Arduino.addVariable("ALLBOTreceivelog","boolean ALLBOTreceivelog = true; // Set this to false if you do not want to see the serial messages for debugging the IR commands",!0),Blockly.Arduino.addFunction("ALLBOTresetserial",'\nvoid ALLBOTresetserial (void)      // This clears any received IR commands that where received in the serial buffer while the robot was execution a command.\n{\n  //resetting all variables\n  ALLBOTrawcommand = "";\n  ALLBOTcommand = "";\n  ALLBOTtimes = 0;\n  ALLBOTspeedms = 0;\n  \n  //flushing the serial buffer (64 byte) so there are no stored movements that need to be handled (annoying)...\n  while (Serial.available()) {\n    Serial.read();\n  }\n}')):
Blockly.Arduino.addVariable("ALLBOTreceivelog","boolean ALLBOTreceivelog = false; // Set this to true if you  want to see the serial messages for debugging the IR commands",!0);Blockly.Arduino.addVariable("ALLBOTrawcommand","String ALLBOTrawcommand;  // Global variable that stores the raw received IR command",!0);Blockly.Arduino.addVariable("ALLBOTcommand","String ALLBOTcommand;     // Global variable that stores part of the decoded IR command",!0);Blockly.Arduino.addVariable("ALLBOTtimes","int ALLBOTtimes = 1;          // Global variable that stores part the received IR command",
!0);Blockly.Arduino.addVariable("ALLBOTspeedms","int ALLBOTspeedms = 100;        // Global variable that stores part the received IR command",!0);Blockly.Arduino.addVariable("ALLBOT_IRreceive","boolean ALLBOT_IRreceive = true; // Set this to false if you do not want to use the IR remote");Blockly.Arduino.addSetup("allbot_RC",'\n  // Starting the hardware UART, necessary for receiving IR\n  if (ALLBOT_IRreceive == true) {   // Check if required (when Serial is started servo1 connector will not work!)\n      Serial.begin(2400);\n      Serial.setTimeout(100);\n      Serial.println("serial communication started");\n    }\n',
!0);Blockly.Arduino.addFunction("ALLBOT_getcommand",'\nvoid ALLBOT_getcommand (void)                   // This is the routine that listens and decodes any IR commands. Decodes commands end up in the global vars.\n{ \n  int space1 = 0;\n  int space2 = 0;\n  \n  if (Serial.available()) {\n     ALLBOTrawcommand = Serial.readString();\n     if (ALLBOTreceivelog){\n        Serial.println("START " + ALLBOTrawcommand + " END" + "\\r\\n" + "Received string length = " + ALLBOTrawcommand.length() + "\\r\\n" + "End character > at index = " + ALLBOTrawcommand.indexOf(\'>\'));\n     }\n\n     //checking and deleting rubbish data at start of received command\n     if ((ALLBOTrawcommand.indexOf(\'<\') != 0) && (ALLBOTrawcommand.indexOf(\'<\') != -1))\n     {\n        //ALLBOTrawcommand.remove(0, ALLBOTrawcommand.indexOf(\'<\'));\n        ALLBOTcommand = ALLBOTrawcommand.substring(ALLBOTrawcommand.indexOf(\'<\'));//,ALLBOTrawcommand.length()-1);\n     }\n     \n     //check if received command is correct\n     if ((ALLBOTrawcommand.charAt(0) == \'<\') && (ALLBOTrawcommand.indexOf(\'>\') <= 12) && (ALLBOTrawcommand.indexOf(\'>\') != -1) && (ALLBOTrawcommand.length() > 7))\n     {\n       if (ALLBOTreceivelog){\n         Serial.println("Command is VALID"); \n       }      \n       //breakdown into chunks\n       //ALLBOTcommand\n       ALLBOTcommand = ALLBOTrawcommand.substring(1, 3);\n       \n       //finding the spaces to find the ALLBOTtimes and ALLBOTspeedms\n       for (int i=0; i <= ALLBOTrawcommand.length(); i ++)\n       {\n         if ((ALLBOTrawcommand.charAt(i) == \' \') && (space1 == 0))\n         {\n            space1 = i;\n         }\n         else if ((ALLBOTrawcommand.charAt(i) == \' \') && (space2 == 0))\n         {\n            space2 = i;\n         }\n       }\n\n       //Setting the command variables and checking if they are indeed a number (toInt()).\n       \n       //ALLBOTtimes\n       ALLBOTtimes = ALLBOTrawcommand.substring(space1+1, space2).toInt();\n       \n       //ALLBOTspeedms\n       ALLBOTspeedms = ALLBOTrawcommand.substring(space2+1, ALLBOTrawcommand.indexOf(\'>\')).toInt();\n\n       if (ALLBOTreceivelog){\n         Serial.println("decoded commands are:");\n         Serial.flush();\n         Serial.println("command = " + ALLBOTcommand);\n         Serial.flush();\n         Serial.print("times = ");Serial.println(ALLBOTtimes);\n         Serial.flush();\n         Serial.print("speedms = ");Serial.println(ALLBOTspeedms);\n         Serial.flush();\n       }\n       \n     }\n     else\n     {\n       if (ALLBOTreceivelog){\n          Serial.println("Command is NOT valid");\n       }\n       ALLBOTresetserial();  \n     }\n  }\n}');
return"\n  if (ALLBOT_IRreceive == true) {                 // Allow to switch off the IR part\n      ALLBOT_getcommand();                       // Listen for IR command\n"+c+"\n    }\n"};Blockly.Arduino.allbot_remotecontroldo=function(a){if(void 0==a.getParent())return"";var c=a.getFieldValue("RC_COMMAND");a=Blockly.Arduino.statementToCode(a,"RC_EXECUTE");return'if (ALLBOTcommand == "'+c+'") {\n'+(a+"\n    }\n")};
Blockly.Arduino.allbot_remotecontrol_speed=function(a){Blockly.Arduino.addVariable("ALLBOTspeedms","int ALLBOTspeedms = 100;        // Global variable that stores part the received IR command",!0);return["ALLBOTspeedms",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.allbot_remotecontrol_times=function(a){Blockly.Arduino.addVariable("ALLBOTtimes","int ALLBOTtimes = 1;          // Global variable that stores part the received IR command",!0);return["ALLBOTtimes",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.text={};Blockly.Arduino.text=function(a){return[Blockly.Arduino.quote_(a.getFieldValue("TEXT")),Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.text_join=function(a){if(0==a.itemCount_)return['""',Blockly.Arduino.ORDER_ATOMIC];if(1==a.itemCount_)return["String("+(Blockly.Arduino.valueToCode(a,"ADD0",Blockly.Arduino.ORDER_UNARY_POSTFIX)||'""')+")",Blockly.Arduino.ORDER_UNARY_POSTFIX];var c=[];for(var b=0;b<a.itemCount_;b++){var d=Blockly.Arduino.valueToCode(a,"ADD"+b,Blockly.Arduino.ORDER_NONE);c[b]=""==d?'""':"String("+d+")"}c=c.join(" + ");return[c,Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.text_append=function(a){var c=Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE);a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_UNARY_POSTFIX);return c+" += "+(""==a?'""':"String("+a+")")+";\n"};Blockly.Arduino.text_length=function(a){return["String("+(Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_UNARY_POSTFIX)||'""')+").length()",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.text_isEmpty=function(a){var c=[];c.push("boolean "+Blockly.Arduino.DEF_FUNC_NAME+"(String msg) {");c.push("  if (msg.length() == 0) {");c.push("    return true;");c.push("  } else {");c.push("    return false;");c.push("  }");c.push("}");c=Blockly.Arduino.addFunction("isStringEmpty",c.join("\n"));a=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_UNARY_POSTFIX);return[c+"("+(""==a?'""':"String("+a+")")+")",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.text_trim=function(a){Blockly.Arduino.text_trim.OPERATORS={LEFT:".trim()",RIGHT:".trim()",BOTH:".trim()"};var c=a.getFieldValue("MODE");c=Blockly.Arduino.text_trim.OPERATORS[c];a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_UNARY_POSTFIX);return[(""==a?'""':"String("+a+")")+c,Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.text_print=function(a){var c=Blockly.Arduino.Boards.selected.serial[0][1];Blockly.Arduino.addSetup("serial_"+c,c+".begin(9600);",!1);a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE);return c+".print("+(""==a?'""':"String("+a+")")+");\n"};
Blockly.Arduino.text_prompt_ext=function(a){var c=Blockly.Arduino.Boards.selected.serial[0][1],b=a.getFieldValue("TYPE"),d=[],e=b==Blockly.Types.NUMBER.output;e?d.push("int "+Blockly.Arduino.DEF_FUNC_NAME+"(String msg) {"):d.push("String "+Blockly.Arduino.DEF_FUNC_NAME+"(String msg) {");d.push("  "+c+".println(msg);");d.push("  boolean stringComplete = false;");e?d.push("  int content = 0;"):d.push('  String content = "";');d.push("  while (stringComplete == false) {");d.push("    if ("+c+".available()) {");
e?(d.push("      content = "+c+".parseInt();"),d.push("      stringComplete = true;")):(d.push("      char readChar = (char)"+c+".read();"),d.push("      if (readChar == '\\n' || readChar == '\\r') {"),d.push("        stringComplete = true;"),d.push("      } else {"),d.push("        content += readChar;"),d.push("      }"));d.push("    }");d.push("  }");d.push("  // Empty incoming serial buffer");d.push("  while(Serial.available()) { Serial.read(); };");d.push("  return content;");d.push("}");b=Blockly.Arduino.addFunction("getUserInputPrompt"+
b,d.join("\n"));Blockly.Arduino.addSetup("serial_"+c,c+".begin(9600);",!1);a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE)||'""';return[b+"("+a+")",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.text_endString=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.text_indexOf=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.text_charAt=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.text_getSubstring=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.text_changeCase=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.text_prompt=function(a){return["",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.md_control={};Blockly.Arduino.mcookie_crashbutton_setup=function(a){var c=a.getFieldValue("BUTTONNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addDeclaration(c,"boolean "+c+"_PRESSED = LOW;\n");Blockly.Arduino.addSetup("io_"+b,"pinMode("+c+", INPUT);",!1);return""};
Blockly.Arduino.mcookie_button_digitalread=function(a){return["digitalRead("+a.getFieldValue("BUTTONNAME")+")",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.spi={};
Blockly.Arduino.spi_setup=function(a){var c=a.getFieldValue("SPI_ID"),b=a.getFieldValue("SPI_SHIFT_ORDER"),d=a.getFieldValue("SPI_CLOCK_DIVIDE");a=a.getFieldValue("SPI_MODE");Blockly.Arduino.addInclude("spi","#include <SPI.h>");Blockly.Arduino.addSetup("spi_order",c+".setBitOrder("+b+");",!0);Blockly.Arduino.addSetup("spi_mode",c+".setDataMode("+a+");",!0);Blockly.Arduino.addSetup("spi_div",c+".setClockDivider("+d+");",!0);Blockly.Arduino.addSetup("spi_begin",c+".begin();",!0);return""};
Blockly.Arduino.spi_transfer=function(a){var c=a.getFieldValue("SPI_ID"),b=a.getFieldValue("SPI_SS"),d=Blockly.Arduino.valueToCode(a,"SPI_DATA",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addInclude("spi","#include <SPI.h>");Blockly.Arduino.addSetup("spi_begin",c+".begin();",!1);for(var e=Blockly.Arduino.Boards.selected.spiPins[c],f=0;f<e.length;f++)Blockly.Arduino.reservePin(a,e[f][1],Blockly.Arduino.PinTypes.SPI,"SPI "+e[f][0]);"none"!==b&&(Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,
"SPI Slave pin"),Blockly.Arduino.addSetup("io_"+b,"pinMode("+b+", OUTPUT);",!1));a=[];"none"!==b&&a.push("digitalWrite("+b+", HIGH);");a.push(c+".transfer("+d+");");"none"!==b&&a.push("digitalWrite("+b+", LOW);");return a.join("\n")+"\n"};
Blockly.Arduino.spi_transfer_return=function(a){var c=a.getFieldValue("SPI_ID"),b=a.getFieldValue("SPI_SS"),d=Blockly.Arduino.valueToCode(a,"SPI_DATA",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.spi_transfer(a);return["none"===b?c+".transfer("+d+")":Blockly.Arduino.addFunction("spiReturnSlave"+b,["int "+Blockly.Arduino.DEF_FUNC_NAME+"() {","  int spiReturn = 0;","  digitalWrite("+b+", HIGH);","  spiReturn = "+c+".transfer("+d+");","  digitalWrite("+b+", LOW);","  return spiReturn;\n}"].join("\n"))+
"()",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.md_light={};function hexToRgb(a){return 0===a.lastIndexOf("rgb",0)?(a=a.substring(4,a.length-1).replace(/ /g,"").split(","),{r:parseInt(a[0],10),g:parseInt(a[1],10),b:parseInt(a[2],10)}):(a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a))?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:{r:0,g:0,b:0}}
Blockly.Arduino.mcookie_neopixel_setup=function(a){var c=a.getFieldValue("LEDNAME"),b=Blockly.Arduino.valueToCode(a,"NUMBER",Blockly.Arduino.ORDER_ATOMIC)||"1",d=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,d,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.addVariable(c,"int "+c+" = "+d+";",!0);a="myNeo_"+c;Blockly.Arduino.addDeclaration(a,"#include <Adafruit_NeoPixel.h>\nAdafruit_NeoPixel "+a+" = Adafruit_NeoPixel("+b+", "+d+", NEO_GRB + NEO_KHZ800);");Blockly.Arduino.addSetup("io_"+
d,a+".begin();\n  "+a+".show();",!1);return""};Blockly.Arduino.logic={};Blockly.Arduino.controls_if=function(a){var c=0,b=Blockly.Arduino.valueToCode(a,"IF"+c,Blockly.Arduino.ORDER_NONE)||"false",d=Blockly.Arduino.statementToCode(a,"DO"+c),e="if ("+b+") {\n"+d+"}";for(c=1;c<=a.elseifCount_;c++)b=Blockly.Arduino.valueToCode(a,"IF"+c,Blockly.Arduino.ORDER_NONE)||"false",d=Blockly.Arduino.statementToCode(a,"DO"+c),e+=" else if ("+b+") {\n"+d+"}";a.elseCount_&&(d=Blockly.Arduino.statementToCode(a,"ELSE"),e+=" else {\n"+d+"}");return e+"\n"};
Blockly.Arduino.logic_compare=function(a){var c={EQ:"==",NEQ:"!=",LT:"<",LTE:"<=",GT:">",GTE:">="}[a.getFieldValue("OP")],b="=="==c||"!="==c?Blockly.Arduino.ORDER_EQUALITY:Blockly.Arduino.ORDER_RELATIONAL,d=Blockly.Arduino.valueToCode(a,"A",b)||"0";a=Blockly.Arduino.valueToCode(a,"B",b)||"0";return[d+" "+c+" "+a,b]};
Blockly.Arduino.logic_operation=function(a){var c="AND"==a.getFieldValue("OP")?"&&":"||",b="&&"==c?Blockly.Arduino.ORDER_LOGICAL_AND:Blockly.Arduino.ORDER_LOGICAL_OR,d=Blockly.Arduino.valueToCode(a,"A",b)||"false";a=Blockly.Arduino.valueToCode(a,"B",b)||"false";if(d||a){var e="&&"==c?"true":"false";d||(d=e);a||(a=e)}else a=d="false";return[d+" "+c+" "+a,b]};
Blockly.Arduino.logic_negate=function(a){var c=Blockly.Arduino.ORDER_UNARY_PREFIX;return["!"+(Blockly.Arduino.valueToCode(a,"BOOL",c)||"false"),c]};Blockly.Arduino.logic_boolean=function(a){return["TRUE"==a.getFieldValue("BOOL")?"true":"false",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.logic_null=function(a){return["NULL",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.logic_ternary=function(a){var c=Blockly.Arduino.valueToCode(a,"IF",Blockly.Arduino.ORDER_CONDITIONAL)||"false",b=Blockly.Arduino.valueToCode(a,"THEN",Blockly.Arduino.ORDER_CONDITIONAL)||"null";a=Blockly.Arduino.valueToCode(a,"ELSE",Blockly.Arduino.ORDER_CONDITIONAL)||"null";return[c+" ? "+b+" : "+a,Blockly.Arduino.ORDER_CONDITIONAL]};Blockly.Arduino.math={};Blockly.Arduino.math_number=function(a){a=parseFloat(a.getFieldValue("NUM"));Infinity==a?a="INFINITY":-Infinity==a&&(a="-INFINITY");return[a,Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.math_arithmetic=function(a){var c={ADD:[" + ",Blockly.Arduino.ORDER_ADDITIVE],MINUS:[" - ",Blockly.Arduino.ORDER_ADDITIVE],MULTIPLY:[" * ",Blockly.Arduino.ORDER_MULTIPLICATIVE],DIVIDE:[" / ",Blockly.Arduino.ORDER_MULTIPLICATIVE],POWER:[null,Blockly.Arduino.ORDER_NONE]}[a.getFieldValue("OP")],b=c[0];c=c[1];var d=Blockly.Arduino.valueToCode(a,"A",c)||"0";a=Blockly.Arduino.valueToCode(a,"B",c)||"0";return b?[d+b+a,c]:["Math.pow("+d+", "+a+")",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.math_single=function(a){var c=a.getFieldValue("OP");if("NEG"==c)return a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_UNARY_PREFIX)||"0","-"==a[0]&&(a=" "+a),["-"+a,Blockly.Arduino.ORDER_UNARY_PREFIX];a="ABS"==c||"ROUND"==c.substring(0,5)?Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_UNARY_POSTFIX)||"0":"SIN"==c||"COS"==c||"TAN"==c?Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0":Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_NONE)||
"0";switch(c){case "ABS":var b="abs("+a+")";break;case "ROOT":b="sqrt("+a+")";break;case "LN":b="log("+a+")";break;case "EXP":b="exp("+a+")";break;case "POW10":b="pow(10,"+a+")";break;case "ROUND":b="round("+a+")";break;case "ROUNDUP":b="ceil("+a+")";break;case "ROUNDDOWN":b="floor("+a+")";break;case "SIN":b="sin("+a+" / 180 * Math.PI)";break;case "COS":b="cos("+a+" / 180 * Math.PI)";break;case "TAN":b="tan("+a+" / 180 * Math.PI)"}if(b)return[b,Blockly.Arduino.ORDER_UNARY_POSTFIX];switch(c){case "LOG10":b=
"log("+a+") / log(10)";break;case "ASIN":b="asin("+a+") / M_PI * 180";break;case "ACOS":b="acos("+a+") / M_PI * 180";break;case "ATAN":b="atan("+a+") / M_PI * 180";break;default:throw"Unknown math operator: "+c;}return[b,Blockly.Arduino.ORDER_MULTIPLICATIVE]};
Blockly.Arduino.math_constant=function(a){return{PI:["M_PI",Blockly.Arduino.ORDER_UNARY_POSTFIX],E:["M_E",Blockly.Arduino.ORDER_UNARY_POSTFIX],GOLDEN_RATIO:["(1 + sqrt(5)) / 2",Blockly.Arduino.ORDER_MULTIPLICATIVE],SQRT2:["M_SQRT2",Blockly.Arduino.ORDER_UNARY_POSTFIX],SQRT1_2:["M_SQRT1_2",Blockly.Arduino.ORDER_UNARY_POSTFIX],INFINITY:["INFINITY",Blockly.Arduino.ORDER_ATOMIC]}[a.getFieldValue("CONSTANT")]};
Blockly.Arduino.math_number_property=function(a){var c=Blockly.Arduino.valueToCode(a,"NUMBER_TO_CHECK",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0",b=a.getFieldValue("PROPERTY");if("PRIME"==b)return a=Blockly.Arduino.addFunction("mathIsPrime",["boolean "+Blockly.Arduino.DEF_FUNC_NAME+"(int n) {","  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1.\n  // And false if n is divisible by 2 or 3.\n  if (isnan(n) || (n <= 1) || (n == 1) || (n % 2 == 0) || (n % 3 == 0)) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (int x = 6; x <= sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\n      return false;\n    }\n  }\n  return true;\n}"].join("\n")),
Blockly.Arduino.addInclude("math","#include <math.h>"),[a+"("+c+")",Blockly.Arduino.ORDER_UNARY_POSTFIX];switch(b){case "EVEN":var d=c+" % 2 == 0";break;case "ODD":d=c+" % 2 == 1";break;case "WHOLE":Blockly.Arduino.addInclude("math","#include <math.h>");d="(floor("+c+") == "+c+")";break;case "POSITIVE":d=c+" > 0";break;case "NEGATIVE":d=c+" < 0";break;case "DIVISIBLE_BY":a=Blockly.Arduino.valueToCode(a,"DIVISOR",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0",d=c+" % "+a+" == 0"}return[d,Blockly.Arduino.ORDER_EQUALITY]};
Blockly.Arduino.math_change=function(a){var c=Blockly.Arduino.valueToCode(a,"DELTA",Blockly.Arduino.ORDER_ADDITIVE)||"0";return Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+" += "+c+";\n"};Blockly.Arduino.math_round=Blockly.Arduino.math_single;Blockly.Arduino.math_trig=Blockly.Arduino.math_single;Blockly.Arduino.math_on_list=Blockly.Arduino.noGeneratorCodeInline;
Blockly.Arduino.math_modulo=function(a){var c=Blockly.Arduino.valueToCode(a,"DIVIDEND",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0";a=Blockly.Arduino.valueToCode(a,"DIVISOR",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0";return[c+" % "+a,Blockly.Arduino.ORDER_MULTIPLICATIVE]};
Blockly.Arduino.math_constrain=function(a){var c=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"0",b=Blockly.Arduino.valueToCode(a,"LOW",Blockly.Arduino.ORDER_NONE)||"0";a=Blockly.Arduino.valueToCode(a,"HIGH",Blockly.Arduino.ORDER_NONE)||"0";return["("+c+" < "+b+" ? "+b+" : ( "+c+" > "+a+" ? "+a+" : "+c+"))",Blockly.Arduino.ORDER_UNARY_POSTFIX]};
Blockly.Arduino.math_random_int=function(a){var c=Blockly.Arduino.valueToCode(a,"FROM",Blockly.Arduino.ORDER_NONE)||"0";a=Blockly.Arduino.valueToCode(a,"TO",Blockly.Arduino.ORDER_NONE)||"0";var b=Blockly.Arduino.variableDB_.getDistinctName("math_random_int",Blockly.Generator.NAME_TYPE);Blockly.Arduino.math_random_int.random_function=b;return[Blockly.Arduino.addFunction("mathRandomInt",["int "+Blockly.Arduino.DEF_FUNC_NAME+"(int min, int max) {","  if (min > max) {\n    // Swap min and max to ensure min is smaller.\n    int temp = min;\n    min = max;\n    max = temp;\n  }\n  return min + (rand() % (max - min + 1));\n}"].join("\n"))+
"("+c+", "+a+")",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.math_random_float=function(a){return["(rand() / RAND_MAX)",Blockly.Arduino.ORDER_UNARY_POSTFIX]};Blockly.Arduino.md_core={};Blockly.Arduino.md_modules=function(a){(a=Blockly.Arduino.statementToCode(a,"MD_BLOCKS"))&&console.log("Unexpected code in MDblocksBranch",a);return""};Blockly.Arduino.mcookie_coreusb=function(a){return""};
Blockly.Arduino.mcookie_hub=function(a){var c=[["HUB01-IIC",["SDA","SCL"]],["HUB02-IIC",["SDA","SCL"]],["HUB03-0/1",["0","1"]],["HUB04-2/3",["2","3"]],["HUB05-4/5",["4","5"]],["HUB06-6/7",["6","7"]],["HUB07-8/9",["8","9"]],["HUB08-10/11",["10","11"]],["HUB09-12/13",["12","13"]],["HUB10-A6/A7",["A6","A7"]],["HUB11-A2/A3",["A2","A3"]],["HUB12-A0/A1",["A0","A1"]]],b;for(b in c){var d=c[b][1],e=a.getInputTargetBlock(c[b][0]);e&&e.setHubConnector(d);d=Blockly.Arduino.blockToCode(e);if(!goog.isString(d))throw'Expecting code from statement block "'+
e.type+'".';d&&console.log("Unexpected code in mcookie_hub",d)}return""};Blockly.Arduino.mcookie_power=function(a){return""};
Blockly.Arduino.mcookie_audio_setup=function(a){var c=Blockly.Arduino.valueToCode(a,"VOLUME",Blockly.Arduino.ORDER_ATOMIC)||"10";a="AUDIO.init(DEVICE_TF, "+a.getFieldValue("MODE")+", "+c+");\n  AUDIO.choose(1);\n  AUDIO.pause();\n";Blockly.Arduino.addInclude("MD_softwareserial","#include <SoftwareSerial.h>");Blockly.Arduino.addInclude("MD_audio",'#include "Microduino_Audio.h"');Blockly.Arduino.addDeclaration("MD_softwareserial","SoftwareSerial MDSerial(2, 3);");Blockly.Arduino.addDeclaration("MD_audio",
"JQ6500 AUDIO(&MDSerial);");Blockly.Arduino.addSetup("MD_audio",a,!0);return""};Blockly.Arduino.mcookie_audio_amplifier=function(a){return""};Blockly.Arduino.declare={};Blockly.Arduino.declare_var_int=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addVariable(c,"int "+c+" = "+a+";",!0);return""};Blockly.Arduino.declare_var_uint=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addVariable(c,"unsigned int "+c+" = "+a+";",!0);return""};
Blockly.Arduino.declare_var_long=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addVariable(c,"long "+c+" = "+a+"L;",!0);return""};Blockly.Arduino.declare_var_ulong=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addVariable(c,"unsigned long "+c+" = "+a+"UL;",!0);return""};
Blockly.Arduino.declare_var_float=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.addVariable(c,"float "+c+" = "+a+";",!0);return""};Blockly.Arduino.declare_var_bool=function(a){var c=a.getFieldValue("NAME");a=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"false";Blockly.Arduino.addVariable(c,"boolean "+c+" = "+a+";",!0);return""};
Blockly.Arduino.declare_var_digin=function(a){var c=a.getFieldValue("NAME"),b=a.getFieldValue("PIN");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return""};
Blockly.Arduino.declare_var_digout=function(a){var c=a.getFieldValue("NAME"),b=a.getFieldValue("PIN");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};
Blockly.Arduino.declare_var_anain=function(a){var c=a.getFieldValue("NAME"),b=a.getFieldValue("PIN");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Analogue Read");Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT,"Analogue Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return""};
Blockly.Arduino.declare_var_anaout=function(a){var c=a.getFieldValue("NAME"),b=a.getFieldValue("PIN");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.OUTPUT,"Analogue Write");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Analogue Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};Blockly.Arduino.IO_EXTRA={};Blockly.Arduino.io_pin_dig=function(a){return[a.getFieldValue("PIN"),Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.io_digitalwrite_var=function(a){var c=a.getFieldValue("PIN"),b=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"LOW";Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return"digitalWrite("+c+", "+b+");\n"};
Blockly.Arduino.io_digitalread_var=function(a){var c=a.getFieldValue("PIN");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return["digitalRead("+c+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_analogwrite_var=function(a){var c=a.getFieldValue("PIN"),b=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_ATOMIC)||"0";Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.OUTPUT,"Analogue Write");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);0>b||255<b?a.setWarningText("The analogue value set must be between 0 and 255","pwm_value"):a.setWarningText(null,"pwm_value");return"analogWrite("+c+", "+b+");\n"};
Blockly.Arduino.io_analogread_var=function(a){var c=a.getFieldValue("PIN");Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Analogue Read");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);",!1);return["analogRead("+c+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_pulsein_var=function(a){var c=a.getFieldValue("PULSEPIN"),b=Blockly.Arduino.valueToCode(a,"PULSETYPE",Blockly.Arduino.ORDER_ATOMIC);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Pulse Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);\n",!1);return["pulseIn("+c+", "+b+")",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.io_pulsetimeout_var=function(a){var c=a.getFieldValue("PULSEPIN"),b=Blockly.Arduino.valueToCode(a,"PULSETYPE",Blockly.Arduino.ORDER_ATOMIC),d=Blockly.Arduino.valueToCode(a,"TIMEOUT",Blockly.Arduino.ORDER_ATOMIC);Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.INPUT,"Pulse Pin");Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", INPUT);\n",!1);return["pulseIn("+c+", "+b+", "+d+")",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.segment={};
Blockly.Arduino.segment_config=function(a){var c=a.getFieldValue("SEG_NAME"),b=[["SEG_A",a.getFieldValue("SEG_A"),"HIGH"],["SEG_B",a.getFieldValue("SEG_B"),"HIGH"],["SEG_C",a.getFieldValue("SEG_C"),"HIGH"],["SEG_D",a.getFieldValue("SEG_D"),"HIGH"],["SEG_E",a.getFieldValue("SEG_E"),"HIGH"],["SEG_F",a.getFieldValue("SEG_F"),"HIGH"],["SEG_G",a.getFieldValue("SEG_G"),"HIGH"],["SEG_DP",a.getFieldValue("SEG_DP"),"HIGH"]],d;for(d in b)Blockly.Arduino.addVariable(c+"_"+b[d][0],"int "+c+"_"+b[d][0]+" = "+
b[d][1]+";\nboolean "+c+"_"+b[d][0]+"_ON = "+b[d][2]+";",!0),Blockly.Arduino.reservePin(a,b[d][1],Blockly.Arduino.PinTypes.OUTPUT,"7 Segment "+b[d][0].slice(4)),Blockly.Arduino.addSetup("io_"+c+"_"+b[d][0],"pinMode("+c+"_"+b[d][0]+", OUTPUT);",!1);return""};
Blockly.Arduino.segment_write_number=function(a){var c=a.getFieldValue("SEG_NAME"),b=[c+"_SEG_A",c+"_SEG_B",c+"_SEG_C",c+"_SEG_D",c+"_SEG_E",c+"_SEG_F",c+"_SEG_G",c+"_SEG_DP"];a=Blockly.Arduino.valueToCode(a,"SEG_VAL",Blockly.Arduino.ORDER_ATOMIC)||"0";var d="void "+c+"_WriteNumber(int Segment_Nr) {\n  if(Segment_Nr == 0) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+
b[4]+", "+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", !"+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 1) {\n      digitalWrite("+b[0]+", !"+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", !"+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", !"+b[5]+"_ON);\n      digitalWrite("+b[6]+", !"+b[6]+"_ON);\n      digitalWrite("+
b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 2) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", !"+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+b[4]+", "+b[4]+"_ON);\n      digitalWrite("+b[5]+", !"+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 3) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+
b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", !"+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 4) {\n      digitalWrite("+b[0]+", !"+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", !"+b[3]+"_ON);\n      digitalWrite("+
b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 5) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", !"+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+
b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 6) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", !"+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+b[4]+", "+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 7) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+
b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", !"+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", !"+b[5]+"_ON);\n      digitalWrite("+b[6]+", !"+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 8) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+
b[4]+", "+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";d+=" else if(Segment_Nr == 9) {\n      digitalWrite("+b[0]+", "+b[0]+"_ON);\n      digitalWrite("+b[1]+", "+b[1]+"_ON);\n      digitalWrite("+b[2]+", "+b[2]+"_ON);\n      digitalWrite("+b[3]+", "+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", "+b[5]+"_ON);\n      digitalWrite("+b[6]+", "+b[6]+"_ON);\n      digitalWrite("+
b[7]+", !"+b[7]+"_ON);\n  }";d+=" else {\n      digitalWrite("+b[0]+", !"+b[0]+"_ON);\n      digitalWrite("+b[1]+", !"+b[1]+"_ON);\n      digitalWrite("+b[2]+", !"+b[2]+"_ON);\n      digitalWrite("+b[3]+", !"+b[3]+"_ON);\n      digitalWrite("+b[4]+", !"+b[4]+"_ON);\n      digitalWrite("+b[5]+", !"+b[5]+"_ON);\n      digitalWrite("+b[6]+", !"+b[6]+"_ON);\n      digitalWrite("+b[7]+", !"+b[7]+"_ON);\n  }";Blockly.Arduino.addDeclaration(c+"_write_number",d+"\n }");return c+"_WriteNumber("+a+");\n"};
Blockly.Arduino.segment_write_singleseg=function(a){var c=a.getFieldValue("SEG_NAME"),b=a.getFieldValue("SEG_TYPE");a=a.getFieldValue("STATE");var d=c+"_SEG_"+b+"_ON";"off"==a&&(d="! ("+d+")");return"digitalWrite("+c+"_SEG_"+b+", "+d+");\n"};Blockly.Arduino.colour={};Blockly.Arduino.colour_picker=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.colour_random=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.colour_rgb=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.colour_blend=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.ledup_blocks={};
Blockly.Arduino.ledup_hub=function(a){var c="",b;if("DEST_PROTOTYPE"==a.getFieldValue("TARGET")){var d=[["LED-0",["2"]],["LED-1",["3"]],["LED-2",["4"]],["LED-3",["5"]],["LED-4",["6"]],["LED-5",["7"]]];c+="// Attiny wiring of the LED0 to 5\n/*int LED0 = 5;// RESET\nboolean LED0_ON = LOW;\nint LED1 = 2;// SCK\nboolean LED1_ON = LOW;\nint LED2 = 1;// MISO\nboolean LED2_ON = LOW;\nint LED3 = 0;// MOSI\nboolean LED3_ON = LOW;\nint LED4 = 4;// PB4\nboolean LED4_ON = LOW;\nint LED5 = 3;// PB3\nboolean LED5_ON = LOW;\n*/\n"}else d=[["LED-0",
["5"]],["LED-1",["2"]],["LED-2",["1"]],["LED-3",["0"]],["LED-4",["4"]],["LED-5",["3"]]],c+="// Prototype wiring of the LED0 to 5\n/*int LED0 = 2;// RESET\nboolean LED0_ON = LOW;\nint LED1 = 3;// SCK\nboolean LED1_ON = LOW;\nint LED2 = 4;// MISO\nboolean LED2_ON = LOW;\nint LED3 = 5;// MOSI\nboolean LED3_ON = LOW;\nint LED4 = 6;// PB4\nboolean LED4_ON = LOW;\nint LED5 = 7;// PB3\nboolean LED5_ON = LOW;\n*/\n";for(b in d){var e=d[b][1],f=a.getInputTargetBlock(d[b][0]);f&&f.setHubConnector(e);e=Blockly.Arduino.blockToCode(f);
if(!goog.isString(e))throw'Expecting code from statement block "'+f.type+'".';e&&console.log("Unexpected code in mcookie_hub",e)}Blockly.Arduino.addInclude("ledupkidz",c);return""};
Blockly.Arduino.ledupkidz_led_onoff=function(a){var c=Blockly.Arduino.valueToCode(a,"LEDUPKIDZ_LEDNUMBER",Blockly.Arduino.ORDER_ATOMIC)||"0",b=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"true",d=[["LED-0","0"],["LED-1","1"],["LED-2","2"],["LED-3","3"],["LED-4","4"],["LED-5","5"]],e=a.workspace.getAllBlocks(),f;for(a=0;a<e.length;a++)e[a].getLedUpKidzInstance&&(f=e[a]);a="void set_ledupkidz_onoff(int lednrin, boolean state) {\n  if (lednrin < 0) {\n    // negative number, shift to positive with multiple of 6\n    lednrin = lednrin + (lednrin/6-1) * (-6);\n  }\n  int lednr = int(lednrin) % 6; // should be number from 0 to 5!\n";
var g,h="if";if(f)for(g in d){e="LED"+d[g][1];var k=f.getInputTargetBlock(d[g][0]);k&&k.getVars&&(e=k.getVars()[0]);a+="  "+h+" (lednr == "+d[g][1]+" && state)  { digitalWrite("+e+",  "+e+"_ON);}\n";h="else if";a+="  "+h+" (lednr == "+d[g][1]+" && !state) { digitalWrite("+e+", !"+e+"_ON);}\n"}Blockly.Arduino.addDeclaration("ledupkidz_onoff",a+"}\n");return"set_ledupkidz_onoff("+c+", "+b+");\n"};Blockly.Arduino.map={};Blockly.Arduino.base_map=function(a){var c=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_NONE)||"0";a=Blockly.Arduino.valueToCode(a,"DMAX",Blockly.Arduino.ORDER_ATOMIC)||"0";return["map("+c+", 0, 1024, 0, "+a+")",Blockly.Arduino.ORDER_NONE]};Blockly.Arduino.variables={};Blockly.Arduino.variables_get=function(a){return[Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.variables_set=function(a){var c=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_ASSIGNMENT)||"0";return Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+" = "+c+";\n"};
Blockly.Arduino.variables_set_type=function(a){var c=Blockly.Arduino.valueToCode(a,"VARIABLE_SETTYPE_INPUT",Blockly.Arduino.ORDER_ASSIGNMENT)||"0";return["("+Blockly.Arduino.getArduinoType_(Blockly.Types[a.getFieldValue("VARIABLE_SETTYPE_TYPE")])+")("+c+")",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.light={};function hexToRgb(a){return 0===a.lastIndexOf("rgb",0)?(a=a.substring(4,a.length-1).replace(/ /g,"").split(","),{r:parseInt(a[0],10),g:parseInt(a[1],10),b:parseInt(a[2],10)}):(a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a))?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:{r:0,g:0,b:0}}
Blockly.Arduino.led_config_hub=function(a){var c=a.getFieldValue("LEDNAME"),b="HIGH";"neg"==a.getFieldValue("POLARITY")&&(b="LOW");var d=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,d,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write to LED");Blockly.Arduino.addVariable(c,"int "+c+" = "+d+";\nboolean "+c+"_ON = "+b+";",!0);Blockly.Arduino.addSetup("io_"+c,"pinMode("+c+", OUTPUT);",!1);return""};
Blockly.Arduino.led_digitalwrite=function(a){var c=a.getFieldValue("LEDNAME");a=Blockly.Arduino.valueToCode(a,"STATE",Blockly.Arduino.ORDER_ATOMIC)||"LOW";return"digitalWrite("+c+", "+a+");\n"};Blockly.Arduino.led_digitalwrite_onoff=function(a){var c=a.getFieldValue("LEDNAME");a=a.getFieldValue("STATE");var b=c+"_ON";"off"==a&&(b="! ("+b+")");return"digitalWrite("+c+", "+b+");\n"};
Blockly.Arduino.neopixel_config_hub=function(a){var c=a.getFieldValue("LEDNAME"),b=Blockly.Arduino.valueToCode(a,"NUMBER",Blockly.Arduino.ORDER_ATOMIC)||"1",d=a.getFieldValue("KHZ"),e=a.getFieldValue("NEOPIXEL_TYPE"),f=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,f,Blockly.Arduino.PinTypes.OUTPUT,"Digital Write to Neopixel");Blockly.Arduino.addVariable(c,"int "+c+" = "+f+";",!0);a="myNeo_"+c;Blockly.Arduino.addDeclaration(a,"#include <Adafruit_NeoPixel.h>\nAdafruit_NeoPixel "+a+" = Adafruit_NeoPixel("+
b+", "+f+", "+e+" + "+d+");");Blockly.Arduino.addSetup("io_"+a,a+".begin();\n  "+a+".show();",!1);return""};
Blockly.Arduino.neopixel_write=function(a){var c=a.getFieldValue("NEONAME"),b=Blockly.Arduino.valueToCode(a,"LEDPIXEL",Blockly.Arduino.ORDER_ATOMIC)||"0",d=Blockly.Arduino.valueToCode(a,"RED",Blockly.Arduino.ORDER_ATOMIC)||"255",e=Blockly.Arduino.valueToCode(a,"GREEN",Blockly.Arduino.ORDER_ATOMIC)||"255";a=Blockly.Arduino.valueToCode(a,"BLUE",Blockly.Arduino.ORDER_ATOMIC)||"255";return"myNeo_"+c+".setPixelColor("+b+"-1, myNeo_"+c+".Color("+d+","+e+","+a+"));\n"+("myNeo_"+c+".show();\n")};
Blockly.Arduino.neopixel_colourpick_write=function(a){var c=a.getFieldValue("NEONAME"),b=Blockly.Arduino.valueToCode(a,"LEDPIXEL",Blockly.Arduino.ORDER_ATOMIC)||"0";a=a.getFieldValue("COLOUR");a=hexToRgb(a);return"myNeo_"+c+".setPixelColor("+b+"-1, myNeo_"+c+".Color("+a.r+","+a.g+","+a.b+"));\n"+("myNeo_"+c+".show();\n")};
Blockly.Arduino.neopixel_colourpick_dim_write=function(a){var c=a.getFieldValue("NEONAME"),b=Blockly.Arduino.valueToCode(a,"LEDPIXEL",Blockly.Arduino.ORDER_ATOMIC)||"0",d=Blockly.Arduino.valueToCode(a,"BRIGHTNESS",Blockly.Arduino.ORDER_ATOMIC)||"100";a=a.getFieldValue("COLOUR");a=hexToRgb(a);return"myNeo_"+c+".setPixelColor("+b+"-1, myNeo_"+c+".Color(constrain(int("+a.r+"*"+d+"/100.0),0,255), constrain(int("+a.g+"*"+d+"/100.0),0,255), constrain(int("+a.b+"*"+d+"/100.0),0,255) ));\n"+("myNeo_"+c+".show();\n")};Blockly.Arduino.servo={};Blockly.Arduino.servo_write=function(a){var c=a.getFieldValue("SERVO_PIN"),b=Blockly.Arduino.valueToCode(a,"SERVO_ANGLE",Blockly.Arduino.ORDER_ATOMIC)||"90",d="myServo"+c;Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.SERVO,"Servo Write");Blockly.Arduino.addInclude("servo","#include <Servo.h>");Blockly.Arduino.addDeclaration("servo_"+c,"Servo "+d+";");Blockly.Arduino.addSetup("servo_"+c,d+".attach("+c+");",!0);return d+".write("+b+");\n"};
Blockly.Arduino.servo_read=function(a){var c=a.getFieldValue("SERVO_PIN"),b="myServo"+c;Blockly.Arduino.reservePin(a,c,Blockly.Arduino.PinTypes.SERVO,"Servo Read");Blockly.Arduino.addInclude("servo","#include <Servo.h>");Blockly.Arduino.addDeclaration("servo_"+c,"Servo "+b+";");Blockly.Arduino.addSetup("servo_"+c,b+".attach("+c+");",!0);return[b+".read()",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.servo_config_hub=function(a){var c=a.getFieldValue("NAMESERVO");a.getFieldValue("SERVOTYPE");var b=(a.connector||["0"])[0],d="myServo"+c;Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addInclude("servo","#include <Servo.h>");Blockly.Arduino.addDeclaration("servo_"+d,"Servo "+d+";");Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.SERVO,"Servo Write");Blockly.Arduino.addSetup("servo_"+d,d+".attach("+b+");",!0);return""};
Blockly.Arduino.servohub_write=function(a){var c=a.getFieldValue("SERVO_NAME");a=Blockly.Arduino.valueToCode(a,"SERVO_ANGLE",Blockly.Arduino.ORDER_ATOMIC)||"90";return"myServo"+c+".write("+a+");\n"};Blockly.Arduino.servohub_write2=function(a){var c=a.getFieldValue("SERVO_NAME");a=Blockly.Arduino.valueToCode(a,"SERVO_SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";return"myServo"+c+".write(constrain(map("+a+", -100, 100, 0, 180), 0, 180));\n"};
Blockly.Arduino.servohub_read=function(a){return["myServo"+a.getFieldValue("SERVO_NAME")+".read()",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.lists={};Blockly.Arduino.lists_create_empty=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_create_with=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_repeat=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_length=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_isEmpty=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_indexOf=Blockly.Arduino.noGeneratorCodeInline;Blockly.Arduino.lists_getIndex=Blockly.Arduino.noGeneratorCodeInline;
Blockly.Arduino.lists_setIndex=Blockly.Arduino.noGeneratorCodeLine;Blockly.Arduino.md_audio={};Blockly.Arduino.mcookie_audio_play=function(a){return'//Speel een specifiek geluidsbestand af, de bestanden moeten in map "1" gezet worden\n  AUDIO.choose('+(Blockly.Arduino.valueToCode(a,"AUDIONAME",Blockly.Arduino.ORDER_ATOMIC)||"1")+");\n  AUDIO.play();\n"};Blockly.Arduino.mcookie_audio_pause=function(a){return"  AUDIO.pause();\n"};Blockly.Arduino.stepper={};
Blockly.Arduino.stepper_config=function(a){var c=Blockly.Arduino.PinTypes.STEPPER,b=a.getFieldValue("STEPPER_NAME"),d=a.getFieldValue("STEPPER_NUMBER_OF_PINS"),e=Blockly.Arduino.valueToCode(a,"STEPPER_STEPS",Blockly.Arduino.ORDER_ATOMIC)||"360",f=Blockly.Arduino.valueToCode(a,"STEPPER_SPEED",Blockly.Arduino.ORDER_ATOMIC)||"90",g=[a.getFieldValue("STEPPER_PIN1"),a.getFieldValue("STEPPER_PIN2")];"FOUR"===d&&(g.push(a.getFieldValue("STEPPER_PIN3")),g.push(a.getFieldValue("STEPPER_PIN4")));d="int "+b+
"["+g.length+"] = {";e="const long stepper_"+b+"_steps = "+e+";\nStepper stepper_"+b+"(stepper_"+b+"_steps, ";for(var h=0;h<g.length;h++)Blockly.Arduino.reservePin(a,g[h],c,"Stepper"),d+=g[h]+", ",e+=g[h]+", ";d=d.slice(0,-2)+"};";e=e.slice(0,-2)+");\n";Blockly.Arduino.addVariable(b,d,!0);b="stepper_"+b;e+="bool "+b+"_rotating = false;\nunsigned long "+b+"_stepsdone = 0;\nbool "+b+"_finished = false;";Blockly.Arduino.addInclude("stepper","#include <Stepper.h>");Blockly.Arduino.addDeclaration(b,e);
Blockly.Arduino.addSetup(b,"int "+b+"_rpm = "+f+";\n"+b+".setSpeed("+b+"_rpm);",!0);Blockly.Arduino.addFunction(b+"Angle2Steps","unsigned long STEPPERNAME_Angle2Steps(int angle) {\n  if (angle < 0) {\n    // convert negative angle to a positive one\n    angle = -angle;\n  }\n  return (angle * STEPPERNAME_steps) / 360;\n}\n".replace(RegExp("STEPPERNAME","g"),b));return""};
Blockly.Arduino.stepper_config_hub=function(a){var c=a.connector||["0","1"],b=c[0];c=c[1];var d=Blockly.Arduino.PinTypes.STEPPER,e=a.getFieldValue("STEPPER_NAME"),f=Blockly.Arduino.valueToCode(a,"STEPPER_STEPS",Blockly.Arduino.ORDER_ATOMIC)||"360",g=Blockly.Arduino.valueToCode(a,"STEPPER_SPEED",Blockly.Arduino.ORDER_ATOMIC)||"90";Blockly.Arduino.addVariable(e,"int "+e+"[2] = {"+b+", "+c+"};",!0);e="stepper_"+e;Blockly.Arduino.reservePin(a,b,d,"Stepper");Blockly.Arduino.reservePin(a,c,d,"Stepper");
Blockly.Arduino.addInclude("stepper","#include <Stepper.h>");Blockly.Arduino.addDeclaration(e,"const long "+e+"_steps = "+f+";\nStepper "+e+"("+e+"_steps, "+b+", "+c+");\nbool "+e+"_rotating = false;\nunsigned long "+e+"_stepsdone = 0;\nbool "+e+"_finished = false;");Blockly.Arduino.addSetup(e,"int "+e+"_rpm = "+g+";\n  "+e+".setSpeed("+e+"_rpm);",!0);Blockly.Arduino.addFunction(e+"Angle2Steps","unsigned long STEPPERNAME_Angle2Steps(int angle) {\n  if (angle < 0) {\n    // convert negative angle to a positive one\n    angle = -angle;\n  }\n  return (angle * STEPPERNAME_steps) / 360;\n}\n".replace(RegExp("STEPPERNAME",
"g"),e));return""};Blockly.Arduino.stepper_step=function(a){var c="stepper_"+a.getFieldValue("STEPPER_NAME");a=Blockly.Arduino.valueToCode(a,"STEPPER_STEPS",Blockly.Arduino.ORDER_ATOMIC)||"0";return c+".step("+a+");\n"};Blockly.Arduino.stepper_speed=function(a){var c="stepper_"+a.getFieldValue("STEPPER_NAME");a=Blockly.Arduino.valueToCode(a,"STEPPER_SPEED",Blockly.Arduino.ORDER_ATOMIC)||"5";return c+".setSpeed("+a+");\n"};
Blockly.Arduino.stepper_rotate=function(a){var c="stepper_"+a.getFieldValue("STEPPER_NAME"),b=a.getFieldValue("ANGLE");a=a.getFieldValue("DIRECTION");return"\nif (!STEPPERNAME_finished) {\n  // stepper should still rotate further\n  STEPPERNAME_rotating = true;\n  int steps2take = STEPPERNAME_Angle2Steps(%1);\n  if (STEPPERNAME_stepsdone < steps2take) {\n    //take an extra step\n    STEPPERNAME.step(%2);\n    STEPPERNAME_stepsdone += 1;\n  } else {\n    STEPPERNAME_finished = true;\n    STEPPERNAME_rotating = false;\n  }\n}\n".replace(RegExp("STEPPERNAME",
"g"),c).replace("%1",b).replace("%2",a)};
Blockly.Arduino.stepper_rotate_number=function(a){var c="stepper_"+a.getFieldValue("STEPPER_NAME"),b=Blockly.Arduino.valueToCode(a,"ANGLE",Blockly.Arduino.ORDER_ATOMIC)||"0";a=a.getFieldValue("DIRECTION");return"\nif (!STEPPERNAME_finished) {\n  // stepper should still rotate further\n  STEPPERNAME_rotating = true;\n  int steps2take = STEPPERNAME_Angle2Steps(%1);\n  if (STEPPERNAME_stepsdone < steps2take) {\n    //take an extra step\n    if ( %1 < 0) {\n      //negative angle given, change direction \n      STEPPERNAME.step(%2 * -1); \n    } else {\n      STEPPERNAME.step(%2); \n    }\n    STEPPERNAME_stepsdone += 1;\n  } else {\n    STEPPERNAME_finished = true;\n    STEPPERNAME_rotating = false;\n  }\n}\n".replace(RegExp("STEPPERNAME","g"),
c).replace("%1",b).replace("%1",b).replace("%2",a).replace("%2",a)};Blockly.Arduino.stepper_restart=function(a){a="stepper_"+a.getFieldValue("STEPPER_NAME");return a+"_finished = false;\n"+a+"_rotating = false;\n"+a+"_stepsdone = 0;\n"};Blockly.Arduino.stepper_isrotating=function(a){return["stepper_"+a.getFieldValue("STEPPER_NAME")+"_rotating",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.button={};Blockly.Arduino.button_setup=function(a){var c=a.getFieldValue("BUTTONNAME"),b=a.getFieldValue("STATE"),d=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,d,Blockly.Arduino.PinTypes.INPUT,"Digital Read");Blockly.Arduino.addVariable(c,"int "+c+" = "+d+";",!0);Blockly.Arduino.addDeclaration(c,"boolean "+c+"_PRESSED = "+b+";\n");Blockly.Arduino.addSetup("io_"+d,"pinMode("+c+", INPUT);",!1);return""};
Blockly.Arduino.button_input_pullup_setup=function(a){var c=a.getFieldValue("BUTTONNAME"),b=(a.connector||["0","1"])[0];Blockly.Arduino.reservePin(a,b,Blockly.Arduino.PinTypes.INPUT_PULLUP,"Digital Read INPUT_PULLUP");Blockly.Arduino.addVariable(c,"int "+c+" = "+b+";",!0);Blockly.Arduino.addDeclaration(c,"boolean "+c+"_PRESSED = LOW;\n");Blockly.Arduino.addSetup("io_"+b,"pinMode("+c+", INPUT_PULLUP);",!1);return""};
Blockly.Arduino.button_input=function(a){var c=Blockly.Arduino.statementToCode(a,"CLICKINPUT"),b=Blockly.Arduino.statementToCode(a,"LONGPRESSINPUT"),d=Blockly.Arduino.statementToCode(a,"PRESSINPUT"),e=a.getFieldValue("BUTTONNAME");if("TRUE"==a.getFieldValue("WAIT_INPUT")){a="    while ("+e+"PressType == "+e+"NOPRESS) { \n";var f="    }\n"}else f=a="";Blockly.Arduino.addDeclaration("btn_"+e+"_button_input","long "+e+"buttonTimer = 0;\n#define "+e+"minShortPressTime 80\n#define "+e+"longPressTime 750\nboolean "+
e+"buttonActive = false;\nboolean "+e+"longPressActive = false;\n#define "+e+"NOPRESS    0\n#define "+e+"SHORTPRESS 1\n#define "+e+"LONGPRESS  2\nint "+e+"PressType = "+e+"NOPRESS;");Blockly.Arduino.userFunctions_["btn_"+e+"_handlefun"]="\nvoid handle"+e+"Press() {\n  "+e+"PressType = "+e+"NOPRESS;\n"+a+"      if (digitalRead("+e+") == "+e+"_PRESSED) {\n        if ("+e+"buttonActive == false) {\n          "+e+"buttonActive = true;\n          "+e+"buttonTimer = millis();\n        }\n        if ((millis() - "+
e+"buttonTimer > "+e+"longPressTime) && ("+e+"longPressActive == false)) {\n          "+e+"longPressActive = true;\n          "+e+"PressType = "+e+"LONGPRESS;\n        }\n      } else {\n        if ("+e+"buttonActive == true) {\n          if ("+e+"longPressActive == true) {\n            "+e+"longPressActive = false;\n          } else {\n            //avoid fast fluctuations to be identified as a click\n            if (millis() - "+e+"buttonTimer > "+e+"minShortPressTime)\n              "+e+"PressType = "+
e+"SHORTPRESS;\n          }\n          "+e+"buttonActive = false;\n        }\n      }\n"+f+"}\n";return"handle"+e+"Press();\n\nif ("+e+"PressType == "+e+"SHORTPRESS) {\n  //START STATEMENTS SHORT PRESS \n"+c+"  //END  STATEMENTS SHORT PRESS \n} else if ("+e+"PressType == "+e+"LONGPRESS) {\n  //START STATEMENTS LONG PRESS \n"+b+"  //END  STATEMENTS LONG PRESS \n} else if (!"+e+"longPressActive && digitalRead("+e+") == "+e+"_PRESSED) {\n  //START STATEMENTS PRESS \n"+d+"  //END  STATEMENTS PRESS \n}\n \n"};Blockly.Arduino.diorama={};Blockly.Arduino.dio_louder=function(a){Blockly.Arduino.addFunction("DIOvolLouder","\nvoid DOIvolLouder() {\n  if (DIOvolume >= 10)\n  {\n    DIOvolume = DIOvolume - 10;\n  } else { \n    DIOvolume = 0;\n  }\n  DIOMP3player.setVolume(DIOvolume, DIOvolume);\n}\n");return"DOIvolLouder();\nDIObtn_stoprunning(false);\n"};
Blockly.Arduino.dio_quieter=function(a){Blockly.Arduino.addFunction("DOIvolQuieter","\nvoid DOIvolQuieter() {\n  if (DIOvolume < 245)\n  {\n    DIOvolume = DIOvolume + 10;\n  } else { \n    DIOvolume = 255;\n  }\n  DIOMP3player.setVolume(DIOvolume, DIOvolume);\n}\n");return"DOIvolQuieter();\nDIObtn_stoprunning(false);\n"};Blockly.Arduino.dio_setvolume=function(a){return"DIOvolume = "+(255-25*(Blockly.Arduino.valueToCode(a,"VOLUME",Blockly.Arduino.ORDER_ATOMIC)||7))+"; DIOMP3player.setVolume(DIOvolume, DIOvolume);\n"};
Blockly.Arduino.dio_playtrack=function(a){a=Blockly.Arduino.valueToCode(a,"TRACK",Blockly.Arduino.ORDER_ATOMIC)||"1";return"if (DIOtracknrplaying != %1)  { //!DIOMP3player.isPlaying() ||\n  DIOMP3player.stopTrack();\n  uint8_t result = DIOMP3player.playTrack(%1);\n}\nDIOtracknrplaying = %1;\n".replace("%1",a).replace("%1",a).replace("%1",a)};Blockly.Arduino.dio_stoptrack=function(a){return"if (DIOMP3player.isPlaying()) {DIOMP3player.stopTrack();}\n"};
Blockly.Arduino.dio_trackplaying=function(a){return["DIOMP3player.isPlaying()",Blockly.Arduino.ORDER_ATOMIC]};Blockly.Arduino.dio_resetbtnpress=function(a){return"DIObtn_stoprunning(true);\n"};Blockly.Arduino.dio_resetbtnnrpress=function(a){a=a.getFieldValue("BUTTON");return"if (DIOLastBtnPushed == %1) {DIOLastBtnPushed = 0;}\nDIOBtn%1Running = false;\n".replace("%1",a).replace("%1",a)};
Blockly.Arduino.dio_displaytext=function(a){a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_ATOMIC)||"no text";if('"'==a.slice(0,1)){a=a.slice(1,a.length-1);for(8<a.length&&(a=a.slice(0,8));8>a.length;)a+=" ";a='"'+a+'"'}return"DIOmodule.setDisplayToString("+a+");\n"};