// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.ko');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "댓글 추가";
Blockly.Msg.AUTH = "당신의 작업을 저장하고 다른 사람과 공유할 수 있도록 이 애플리케이션을 인증해 주십시오.";
Blockly.Msg.CHANGE_VALUE_TITLE = "값 바꾸기:";
Blockly.Msg.CHAT = "이 상자에 입력하여 당신의 동료와 채팅하세요!";
Blockly.Msg.CLEAN_UP = "블록 정리";
Blockly.Msg.COLLAPSE_ALL = "블록 축소";
Blockly.Msg.COLLAPSE_BLOCK = "블록 축소";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "색 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "색 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "비율";
Blockly.Msg.COLOUR_BLEND_TITLE = "혼합";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "두 색을 주어진 비율로 혼합 (0.0 - 1.0)";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://ko.wikipedia.org/wiki/색";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "팔레트에서 색을 고릅니다";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "임의 색상";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "무작위로 색을 고릅니다.";
Blockly.Msg.COLOUR_RGB_BLUE = "파랑";
Blockly.Msg.COLOUR_RGB_GREEN = "초록";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "빨강";
Blockly.Msg.COLOUR_RGB_TITLE = "RGB 색";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "빨강,파랑,초록의 값을 이용하여 색을 만드십시오. 모든 값은 0과 100 사이에 있어야 합니다.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://ko.wikipedia.org/wiki/%EC%A0%9C%EC%96%B4_%ED%9D%90%EB%A6%84";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "반복 중단";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "다음 반복";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "현재 반복 실행 블럭을 빠져나갑니다.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "나머지 반복 부분을 더이상 실행하지 않고, 다음 반복을 수행합니다.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "경고 : 이 블록은 반복 실행 블럭 안에서만 사용됩니다.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://ko.wikipedia.org/wiki/For_%EB%A3%A8%ED%94%84#.EC.9E.84.EC.9D.98.EC.9D.98_.EC.A7.91.ED.95.A9";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "각 항목에 대해 %1 목록으로 %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "리스트 안에 들어있는 각 아이템들을, 순서대로 변수 '%1' 에 한 번씩 저장시키고, 그 때 마다 명령을 실행합니다.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://ko.wikipedia.org/wiki/For_%EB%A3%A8%ED%94%84";
Blockly.Msg.CONTROLS_FOR_TITLE = "으로 계산 %1 %2에서 %4을 이용하여 %3로";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "변수 \"%1\"은 지정된 간격으로 시작 수에서 끝 수까지를 세어 지정된 블록을 수행해야 합니다.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "\"만약\" 블럭에 조건 검사를 추가합니다.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "\"만약\" 블럭의 마지막에, 모든 검사 결과가 거짓인 경우 실행할 부분을 추가합니다.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%AC%B8";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "\"만약\" 블럭의 내용을 추가, 삭제, 재구성 합니다.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "아니라면";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "다른 경우";
Blockly.Msg.CONTROLS_IF_MSG_IF = "만약";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "조건식의 계산 결과가 참이면, 명령을 실행합니다.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 그렇지 않으면 두 번째 블럭의 명령을 실행합니다.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "첫 번째 조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 두 번째 조건식의 계산 결과가 참이면, 두 번째 블럭의 명령을 실행합니다.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "첫 번째 조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 두 번째 조건식의 계산 결과가 참이면, 두 번째 블럭의 명령을 실행하고, ... , 어떤 조건식의 계산 결과도 참이 아니면, 마지막 블럭의 명령을 실행합니다.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://ko.wikipedia.org/wiki/For_루프";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "하기";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "%1회 반복";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "여러 번 반복해 명령들을 실행합니다.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://ko.wikipedia.org/wiki/While_%EB%A3%A8%ED%94%84";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "다음까지 반복";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "동안 반복";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "값이 거짓일 때, 몇가지 선언을 합니다.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "값이 참일 때, 몇가지 선언을 합니다.";
Blockly.Msg.DELETE_ALL_BLOCKS = "모든 블록 %1개를 삭제하겠습니까?";
Blockly.Msg.DELETE_BLOCK = "블록 삭제";
Blockly.Msg.DELETE_X_BLOCKS = "블록 %1 삭제";
Blockly.Msg.DISABLE_BLOCK = "블록 비활성화";
Blockly.Msg.DUPLICATE_BLOCK = "중복됨";
Blockly.Msg.ENABLE_BLOCK = "블록 활성화";
Blockly.Msg.EXPAND_ALL = "블록 확장";
Blockly.Msg.EXPAND_BLOCK = "블록 확장";
Blockly.Msg.EXTERNAL_INPUTS = "외부 입력";
Blockly.Msg.HELP = "도움말";
Blockly.Msg.INLINE_INPUTS = "내부 입력";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "빈 리스트 생성";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "아이템이 없는, 빈 리스트를 만들어 돌려줍니다.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "리스트";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "리스트 블럭의 내용을 추가, 삭제, 재구성 합니다.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "리스트 만들기";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "아이템을 리스트에 추가합니다.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "원하는 수의 항목들로 목록을 생성합니다.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "첫 번째";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "마지막 번째 위치부터, # 번째";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "가져오기";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "잘라 내기";
Blockly.Msg.LISTS_GET_INDEX_LAST = "마지막";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "임의로";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "삭제";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "첫 번째 아이템을 찾아 돌려줍니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "목록의 특정 위치의 항목을 반환합니다. #1은 마지막 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "목록에서 특정 위치의 항목을 반환합니다. #1은 첫 번째 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "마지막 아이템을 찾아 돌려줍니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "리스트의 아이템들 중, 랜덤으로 선택해 돌려줍니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "첫 번째 아이템을 찾아내 돌려주고, 그 아이템을 리스트에서 삭제합니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "목록의 특정 위치의 항목을 제거하고 반환합니다. #1는 마지막 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "목록의 특정 위치에 있는 항목을 제거하고 반환합니다. #1는 첫 번째 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "마지막 아이템을 찾아내 돌려주고, 그 아이템을 리스트에서 삭제합니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "목록에서 임의 위치의 아이템을 찾아내 삭제하고 돌려줍니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "리스트에서 첫 번째 아이템을 삭제합니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "목록의 특정 위치의 항목을 제거합니다. #1는 마지막 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "목록에서 특정 위치의 항목을 삭제합니다. #1는 첫 번째 항목입니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "리스트에서 마지막 아이템을 찾아 삭제합니다.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "리스트에서 랜덤하게 아이템을 삭제합니다.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "끝에서부터 # 번째로";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "앞에서부터 # 번째로";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "마지막으로";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "첫 번째 위치부터, 서브 리스트 추출";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "마지막부터 # 번째 위치부터, 서브 리스트 추출";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "처음 # 번째 위치부터, 서브 리스트 추출";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "특정 부분을 복사해 새로운 리스트로 생성합니다.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "처음으로 나타난 위치";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "마지막으로 나타난 위치";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "아이템이 나타난 처음 또는 마지막 위치를 찾아 돌려줍니다. 아이템이 없으면 0이 반환됩니다.";
Blockly.Msg.LISTS_INLIST = "리스트";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1이 비어 있습니다";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "목록이 비었을 때 참을 반환합니다.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "%1의 길이";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "목록의 길이를 반환합니다.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "%1 을 %2 번 넣어, 리스트 생성";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "원하는 값을, 원하는 갯수 만큼 넣어, 새로운 리스트를 생성합니다.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "에";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "에서 원하는 위치에 삽입";
Blockly.Msg.LISTS_SET_INDEX_SET = "에서 설정";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "항목을 목록의 처음 위치에 삽입합니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "아이템을 리스트의 특정 위치에 삽입합니다. 마지막 아이템은 #1.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "목록의 특정 위치에 항목을 삽입합니다. 첫 번째 항목은 #1입니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "리스트의 마지막에 아이템을 추가합니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "목록에서 임의 위치에 아이템을 삽입합니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "첫 번째 위치의 아이템으로 설정합니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "목록의 특정 위치의 항목으로 설정합니다. #1는 마지막 항목입니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "목록의 특정 위치에 있는 항목으로 설정합니다. #1는 첫 번째 항목입니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "마지막 아이템으로 설정합니다.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "목록에서 임의 위치의 아이템을 설정합니다.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "오름차순";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "내림차순";
Blockly.Msg.LISTS_SORT_TITLE = "정렬 %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "목록의 사본을 정렬합니다.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "알파벳순 (대소문자 구분 안 함)";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "숫자순";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "알파벳순";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "텍스트에서 목록 만들기";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "목록에서 텍스트 만들기";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "구분 기호로 분리 된 하나의 텍스트에 텍스트 의 목록을 넣으세요.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "각 속보, 텍스트의 목록들에서 텍스트를 분할합니다.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "분리와";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "거짓";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://ko.wikipedia.org/wiki/%EC%A7%84%EB%A6%BF%EA%B0%92";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "참 혹은 거짓 모두 반환합니다.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "참";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "두 값이 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "첫 번째 값이 두 번째 값보다 크면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "첫 번째 값이 두 번째 값보다 크거나 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "첫 번째 값이 두 번째 값보다 작으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "첫 번째 값이 두 번째 값보다 작거나 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "두 값이 서로 다르면, 참(true) 값을 돌려줍니다.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://ko.wikipedia.org/wiki/%EB%B6%80%EC%A0%95";
Blockly.Msg.LOGIC_NEGATE_TITLE = "%1 의 반대";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "입력값이 거짓이라면 참을 반환합니다. 참이라면 거짓을 반환합니다.";
Blockly.Msg.LOGIC_NULL = "빈 값";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "빈 값을 반환합니다.";
Blockly.Msg.LOGIC_OPERATION_AND = "그리고";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://ko.wikipedia.org/wiki/%EB%B6%88_%EB%85%BC%EB%A6%AC";
Blockly.Msg.LOGIC_OPERATION_OR = "또는";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "두 값이 모두 참(true) 값이면, 참 값을 돌려줍니다.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "적어도 하나의 값이 참일 경우 참을 반환합니다.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "테스트";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "만약 거짓이라면";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "만약 참이라면";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "'검사' 를 진행해, 결과가 참(true)이면 '참이면' 부분의 값을 돌려줍니다. ; 결과가 참이 아니면, '거짓이면' 부분의 값을 돌려줍니다.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "두 수의 합을 반환합니다.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "두 수의 나눈 결과를 반환합니다.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "두 수간의 차이를 반환합니다.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "두 수의 곱을 반환합니다.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "첫 번째 수를 두 번째 수 만큼, 거듭제곱 한 결과값을 돌려줍니다.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "바꾸기 %1 만큼 %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "변수 '%1' 에 저장되어있는 값에, 어떤 수를 더해, 변수에 다시 저장합니다.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "일반적인 상수 값들 중 하나를 돌려줍니다. : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%A8%ED%95%91_(%EA%B7%B8%EB%9E%98%ED%94%BD)";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "%1 의 값을, 최소 %2 최대 %3 으로 조정";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "어떤 수를, 특정 범위의 값이 되도록 강제로 조정합니다.";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "가 다음 수로 나누어 떨어지면 :";
Blockly.Msg.MATH_IS_EVEN = "가 짝수(even) 이면";
Blockly.Msg.MATH_IS_NEGATIVE = "가 음(-)수 이면";
Blockly.Msg.MATH_IS_ODD = "가 홀수(odd) 이면";
Blockly.Msg.MATH_IS_POSITIVE = "가 양(+)수 이면";
Blockly.Msg.MATH_IS_PRIME = "가 소수(prime) 이면";
Blockly.Msg.MATH_IS_TOOLTIP = "어떤 수가 짝 수, 홀 수, 소 수, 정 수, 양 수, 음 수, 나누어 떨어지는 수 인지 검사해 결과값을 돌려줍니다. 참(true) 또는 거짓(false) 값을 돌려줌.";
Blockly.Msg.MATH_IS_WHOLE = "가 정수이면";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "%1 를 %2 로 나눈 나머지";
Blockly.Msg.MATH_MODULO_TOOLTIP = "첫 번째 수를 두 번째 수로 나눈, 나머지 값을 돌려줍니다.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "x";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "수";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "평균값";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "최대값";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "중간값";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "최소값";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "가장 여러 개 있는 값";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "목록의 임의 항목";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "표준 편차";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "합";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "리스트에 들어있는 수(값)들에 대해, 산술 평균(arithmetic mean) 한 값을 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "리스트에 들어있는 수(값) 들 중, 가장 큰(max) 수(값)를 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "리스트에 들어있는 수(값) 들 중, 중간(median) 수(값)를 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "리스트에 들어있는 수(값) 들 중, 가장 작은(min) 수(값)를 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "리스트에 들어있는 아이템들 중에서, 가장 여러 번 들어있는 아이템들을 리스트로 만들어 돌려줍니다. (최빈값, modes)";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "목록에서 임의의 아이템을 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "리스트에 들어있는 수(값)들에 대해, 표준 편차(standard deviation) 를 구해 돌려줍니다.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "리스트에 들어있는 수(값)들을, 모두 합(sum) 한, 총합(sum)을 돌려줍니다.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "임의 분수";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "0.0 (포함)과 1.0 (배타적) 사이의 임의 분수 값을 돌려줍니다.";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "랜덤정수(%1<= n <=%2)";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "두 주어진 제한된 범위 사이의 임의 정수값을 돌려줍니다.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "반올림";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "버림";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "올림";
Blockly.Msg.MATH_ROUND_TOOLTIP = "어떤 수를 반올림/올림/버림한 결과를, 정수값으로 돌려줍니다.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "절대값";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "제곱근";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "어떤 수의 절대값(absolute)을 계산한 결과를, 정수값으로 돌려줍니다.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "e 의, 거듭제곱(power) 값을 돌려줍니다.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "어떤 수의, 자연로그(natural logarithm) 값을 돌려줍니다.(밑 e, 예시 log e x)";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "어떤 수의, 기본로그(logarithm) 값을 돌려줍니다.(밑 10, 예시 log 10 x)";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "음(-)/양(+), 부호를 반대로 하여 값을 돌려줍니다.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "10 의, 거듭제곱(power) 값을 돌려줍니다.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "숫자의 제곱근을 반환합니다.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "어떤 수에 대한, acos(arccosine) 값을 돌려줍니다.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "어떤 수에 대한, asin(arcsine) 값을 돌려줍니다.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "어떤 수에 대한, atan(arctangent) 값을 돌려줍니다.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "어떤 각도(degree, radian 아님)의, cos(cosine) 값을 계산해 돌려줍니다.";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "어떤 각도(degree, radian 아님)의, sin(sine) 값을 계산해 돌려줍니다.";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "어떤 각도(degree, radian 아님)의,  tan(tangent) 값을 계산해 돌려줍니다.";
Blockly.Msg.ME = "나";
Blockly.Msg.NEW_VARIABLE = "새 변수";
Blockly.Msg.NEW_VARIABLE_TITLE = "새 변수 이름:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "서술 허가";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "사용:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "미리 정의해 둔 '%1' 함수를 실행합니다.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "미리 정의해 둔 '%1' 함수를 실행하고, 함수를 실행한 결과 값을 돌려줍니다.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "사용:";
Blockly.Msg.PROCEDURES_CREATE_DO = "'%1' 생성";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "이 함수를 설명하세요...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%28%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "함수 이름";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "함수";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "실행 후, 결과 값을 돌려주지 않는 함수를 만듭니다.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%28%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "다음을 돌려줌";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "실행 후, 결과 값을 돌려주는 함수를 만듭니다.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "경고: 이 함수에는, 같은 이름을 사용하는 매개 변수들이 있습니다.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "함수 정의 찾기";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "값이 참이라면, 두 번째 값을 반환합니다.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "경고: 이 블럭은, 함수 정의 블럭 안에서만 사용할 수 있습니다.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "매개 변수:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "함수에 값을 더합니다.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "매개 변수들";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "이 함수를 추가, 삭제, 혹은 재정렬합니다.";
Blockly.Msg.REDO = "다시 시도";
Blockly.Msg.REMOVE_COMMENT = "내용 제거";
Blockly.Msg.RENAME_VARIABLE = "변수 이름 바꾸기:";
Blockly.Msg.RENAME_VARIABLE_TITLE = "'%1' 변수 이름을 바꾸기:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "내용 덧붙이기";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "다음";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "'%1' 의 마지막에 문장을 덧붙입니다.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "소문자로";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "첫 문자만 대문자로";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "대문자로";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "영문 대소문자 형태를 변경해 돌려줍니다.";
Blockly.Msg.TEXT_CHARAT_FIRST = "에서, 첫 번째 문자 얻기";
Blockly.Msg.TEXT_CHARAT_FROM_END = "에서, 마지막부터 # 번째 위치의 문자 얻기";
Blockly.Msg.TEXT_CHARAT_FROM_START = "에서, 앞에서부터 # 번째 위치의 문자 얻기";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "문장";
Blockly.Msg.TEXT_CHARAT_LAST = "에서, 마지막 문자 얻기";
Blockly.Msg.TEXT_CHARAT_RANDOM = "에서, 랜덤하게 한 문자 얻기";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "특정 번째 위치에서, 문자를 얻어내 돌려줍니다.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "텍스트에 항목을 추가합니다.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "가입";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "이 문장 블럭의 구성을 추가, 삭제, 재구성 합니다.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "끝에서부터 # 번째 문자까지";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "# 번째 문자까지";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "마지막 문자까지";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "문장";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "에서, 처음부터 얻어냄";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "에서, 마지막에서 # 번째부터 얻어냄";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "에서, 처음부터 # 번째 문자부터 얻어냄";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "문장 중 일부를 얻어내 돌려줍니다.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "문장";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "에서 다음 문장이 처음으로 나타난 위치 찾기 :";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "에서 다음 문장이 마지막으로 나타난 위치 찾기 :";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "어떤 문장이 가장 처음 나타난 위치 또는, 가장 마지막으로 나타난 위치를 찾아 돌려줍니다. 찾는 문장이 없는 경우는 0 값을 돌려줌.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1이 비어 있습니다";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "입력된 문장이, 빈 문장(\"\")이면 참(true) 값을 돌려줍니다.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "텍스트 만들기";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "여러 개의 아이템들을 연결해(묶어), 새로운 문장을 만듭니다.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "다음 문장의 문자 개수 %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "입력된 문장의, 문자 개수를 돌려줍니다.(공백문자 포함)";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "다음 내용 출력 %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "원하는 문장, 수, 값 등을 출력합니다.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "수 입력 받음.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "문장 입력 받음.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "다음 안내 멘트를 활용해 수 입력";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "다음 안내 멘트를 활용해 문장 입력";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "문자, 단어, 문장.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "양쪽의 공백 문자 제거";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "왼쪽의 공백 문자 제거";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "오른쪽의 공백 문자 제거";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "문장의 왼쪽/오른쪽/양쪽에서 스페이스 문자를 제거해 돌려줍니다.";
Blockly.Msg.TODAY = "오늘";
Blockly.Msg.UNDO = "끄르다";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "항목";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "'집합 %1' 생성";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://ko.wikipedia.org/wiki/%EB%B3%80%EC%88%98_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "변수에 저장 되어있는 값을 돌려줍니다.";
Blockly.Msg.VARIABLES_SET = "바꾸기 %1 를 다음 값으로 바꾸기 %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "'%1 값 읽기' 블럭 생성";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://ko.wikipedia.org/wiki/%EB%B3%80%EC%88%98_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "변수의 값을 입력한 값으로 변경해 줍니다.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_180SERVO = "0~180 degree Servo (angle)";  // untranslated
Blockly.Msg.ARD_360SERVO = "0~360 degree Servo (rotation)";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT = "7-Segment Display";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_TIP = "7-Segment LED Display can be used to show numbers and some characters. It has 7 segments and 1 dot, requiring 8 digital pins on the Arduino to use.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_COMPONENT_WARN = "Pin used in segment %1 is also present in one of the other segments! Change the pin number.";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE = "show number";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG = "Set segment";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITESEG_TIP = "Set a specific segment of the 7-Segment display high";  // untranslated
Blockly.Msg.ARD_7SEGMENT_WRITE_TIP = "Write a specific number to the 7-segment display. Number must be between 0 and 9, otherwise nothing is shown.";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE = "Move AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_ANIMATE_TIP = "Move Servo to a specified angle gradually over the animation duration. You can combine this with other servo movements";  // untranslated
Blockly.Msg.ARD_ALLBOTSERVO_WRITE = "Set AllBot Servo ";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE = "Animate AllBot";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESERVOS = "Servos";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATESPEED = "Animation duration (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANIMATE_TIP = "Animate the allbot by moving different servos at the same time. Total duration of this animation can be set. A servo may have only one movement block present.";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTLEFT = "ankleFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEFRONTRIGHT = "ankleFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLELEFT = "ankleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLELEFT = "ankleMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEMIDDLERIGHT = "ankleMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARLEFT = "ankleRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLEREARRIGHT = "ankleRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_ANKLERIGHT = "ankleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_BACKWARD = "AllBot Backward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP = "AllBot Chirp:";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRPSPEED = "beeps, beepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_CHIRP_TIP = "Make the allbot chirp a number of beeps at the given speed (delay in microseconds, use 1 to 255)";  // untranslated
Blockly.Msg.ARD_ALLBOT_FORWARD = "AllBot Forward:";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTLEFT = "hipFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPFRONTRIGHT = "hipFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPLEFT = "hipLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLELEFT = "hipMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPMIDDLERIGHT = "hipMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARLEFT = "hipRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPREARRIGHT = "hipRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_HIPRIGHT = "hipRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTLEFT = "kneeFrontLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEFRONTRIGHT = "kneeFrontRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLELEFT = "kneeMiddleLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEMIDDLERIGHT = "kneeMiddleRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARLEFT = "kneeRearLeft";  // untranslated
Blockly.Msg.ARD_ALLBOT_KNEEREARRIGHT = "kneeRearRight";  // untranslated
Blockly.Msg.ARD_ALLBOT_LEFT = "AllBot Left:";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKLEFT = "AllBot Look Left, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOKRIGHT = "AllBot Look Right, speed (ms):";  // untranslated
Blockly.Msg.ARD_ALLBOT_LOOK_TIP = "Make the allbot look towards a specific direction with the given speed (ms)";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC = "AllBot Remote Control Handling";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND = "On receiving command ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMANDS = "Commands ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_SINGLE = "This block must be inside an AllBot Remote Control block ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCCOMMAND_TIP = "Set the actions the AllBot must do on receiving a command.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCDO = "Do ";  // untranslated
Blockly.Msg.ARD_ALLBOT_RCSERIAL = "Use Serial to view Commands";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED = "RC Speed";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_SPEED_TIP = "The speed as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES = "RC Times";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIMES_TIP = "The times (number of steps) as set in the Remote Control App";  // untranslated
Blockly.Msg.ARD_ALLBOT_RC_TIP = "A block to react to the AllBot Remote Control App on your smarthphone. Check Serial to see in the serial monitor what commands are received. Note: Your AllBot shield must be switched to RECEIVE after programming it.";  // untranslated
Blockly.Msg.ARD_ALLBOT_RIGHT = "AllBot Right:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED = "AllBot Look Scared:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCAREDBEEPS = "shakes, beeps:";  // untranslated
Blockly.Msg.ARD_ALLBOT_SCARED_TIP = "Make the allbot shake the given number of shakes, and beep the given number of beeps ";  // untranslated
Blockly.Msg.ARD_ALLBOT_SERVOHUB = "AllBot Servo motor";  // untranslated
Blockly.Msg.ARD_ALLBOT_STEPS = "steps, stepspeed";  // untranslated
Blockly.Msg.ARD_ALLBOT_WALK_TIP = "Make the allbot move a number of steps with the given speed (ms) for one step";  // untranslated
Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";  // untranslated
Blockly.Msg.ARD_ANASENSOR = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_COMPONENT = "Analog Sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_DEFAULT_NAME = "AnaSensor1";  // untranslated
Blockly.Msg.ARD_ANASENSOR_READ = "Read analog sensor";  // untranslated
Blockly.Msg.ARD_ANASENSOR_TIP = "Connect an analog sensor to an analog pin, so as to read its value. On an Arduino UNO a value between 0 and 1024 is returned, corresponding to a measured value between 0 and 5V. Eg.: an LDR sensor, a potmeter, ...";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN = "as analog input";  // untranslated
Blockly.Msg.ARD_AS_ANAINPUT_PIN_TIP = "Declare a variable as a analog input pin";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN = "as analg output";  // untranslated
Blockly.Msg.ARD_AS_ANAOUTPUT_PIN_TIP = "Declare a variable as a analog PWM output pin";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER = "as boolean";  // untranslated
Blockly.Msg.ARD_AS_BOOL_NUMBER_TIP = "Declare a variable as boolean with value true or false";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN = "as digital input";  // untranslated
Blockly.Msg.ARD_AS_DIGINPUT_PIN_TIP = "Declare a variable as a digital input pin";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN = "as digital output";  // untranslated
Blockly.Msg.ARD_AS_DIGOUTPUT_PIN_TIP = "Declare a variable as a digital output pin";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER = "as decimal number";  // untranslated
Blockly.Msg.ARD_AS_FLOAT_NUMBER_TIP = "Declare a variable as a decimal number, eg 3.6 or 5e4 or -3.14";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER = "as integer number";  // untranslated
Blockly.Msg.ARD_AS_INTEGER_NUMBER_TIP = "Declare a variable as integer, -32768 to 32767";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER = "as long integer number";  // untranslated
Blockly.Msg.ARD_AS_LONG_NUMBER_TIP = "Declare a variable as a long integer, -2,147,483,648 to 2,147,483,647";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER = "as positive integer number";  // untranslated
Blockly.Msg.ARD_AS_UINT_NUMBER_TIP = "Declare a variable as a positive integer, 0 to 65535";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER = "as long positive integer number";  // untranslated
Blockly.Msg.ARD_AS_ULONG_NUMBER_TIP = "Declare a variable as a long positive integer, 0 to 4,294,967,295";  // untranslated
Blockly.Msg.ARD_BLOCKS = "You have this block twice on the canvas. That is once too many!";  // untranslated
Blockly.Msg.ARD_BOARD = "Board";  // untranslated
Blockly.Msg.ARD_BOARD_WARN = "This block requires as board %1, but or a duplicate block is present or another block is present that requires another Arduino board!";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";  // untranslated
Blockly.Msg.ARD_BUTTON_COMPONENT = "Push Button";  // untranslated
Blockly.Msg.ARD_BUTTON_DEFAULT_NAME = "PushButton1";  // untranslated
Blockly.Msg.ARD_BUTTON_IFPUSHED = "If pushed we measure value";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_CLICK = " is clicked";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_IF = "If button";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_LONGCLICK = "is undergoing a long click";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PRESSED = "is being pressed";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_COMPONENT = "Pushbutton 2-wire no resistor";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_PULLUP_TIP = "A push button which can be ON or OFF, connected to the Arduino with 2 wires: GND, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_THEN = "do";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_TIP = "Check the input received on a button, and react to it. This function does not block your program if you do not check the checkbox to wait for a click. A click is a press and a release of the button, a long press a click and holding long time before you release, press is active as soon as the button is pressed down.";  // untranslated
Blockly.Msg.ARD_BUTTON_INPUT_WAIT = "wait for a click to happen";  // untranslated
Blockly.Msg.ARD_BUTTON_READ = "Read value button";  // untranslated
Blockly.Msg.ARD_BUTTON_TIP = "A push button which can be ON or OFF, connected to the Arduino with 3 wires: GND, 5V over resisotor, and a digital pin";  // untranslated
Blockly.Msg.ARD_BUZNOTONE = "No tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZNOTONE_TIP = "Stop generating a tone on the buzzer";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_COMPONENT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_DEFAULT_NAME = "MyBuzzer1";  // untranslated
Blockly.Msg.ARD_BUZOUTPUT_TIP = "This component is a Buzzer or a Loudspeaker. You can connect it to a digital pin of the Arduino.";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH = "Pitch";  // untranslated
Blockly.Msg.ARD_BUZSELECTPITCH_TIP = "Select the pitch you want. This block returns a number which is the frequency of the selected pitch.";  // untranslated
Blockly.Msg.ARD_BUZSETPITCH = "with pitch";  // untranslated
Blockly.Msg.ARD_BUZSETTONE = "Set tone on buzzer";  // untranslated
Blockly.Msg.ARD_BUZZEROUTPUT = "Buzzer/Speaker";  // untranslated
Blockly.Msg.ARD_COMMENT = "Comment";  // untranslated
Blockly.Msg.ARD_COMMENT_TIP = "Add the given text as comment to the Arduino code";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD = "a specific Arduino Board";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_HUB_TIP = "Set the Arduino board you work with, and to what it connects";  // untranslated
Blockly.Msg.ARD_COMPONENT_BOARD_TIP = "Set which Arduino board you work with, and connect components to the pins.";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TOOLTIP = "Add an extra effect time at which statements must be done";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TOOLTIP = "Add a block for statements when the effect is finished.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE = "at the end do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF = "if effect time becomes greater than";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST1 = "Effect";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_FIRST2 = "with total duration (ms) =";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF = "at the start do";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_1 = "At the start of an effect, do some statements";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_2 = "At the start of an effect, do some statements, and at the end of the effect too";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_3 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements.";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_TOOLTIP_4 = "At the start of an effect, do some statements, if the effect time becomes larger than the given time, do the next statements. Ath end of the effect the final statements are done.";  // untranslated
Blockly.Msg.ARD_DEFINE = "Define";  // untranslated
Blockly.Msg.ARD_DHTHUB = "Temperature and humidity sensor";  // untranslated
Blockly.Msg.ARD_DHTHUB_READRH = "Relative Humidity at";  // untranslated
Blockly.Msg.ARD_DHTHUB_READTEMP = "°C temperature at";  // untranslated
Blockly.Msg.ARD_DHTHUB_TIP = "Block to assign to an Arduino pin a DHT type sensor";  // untranslated
Blockly.Msg.ARD_DHT_COMPONENT = "DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_DEFAULT_NAME = "TempRH_Sensor";  // untranslated
Blockly.Msg.ARD_DHT_READRH_TIP = "Obtain the RH (Relative Humidity in %) as a value from 0 to 100 a DHT sensor";  // untranslated
Blockly.Msg.ARD_DHT_READTEMP_TIP = "Obtain the temperature in degree Celcius of a DHT sensor";  // untranslated
Blockly.Msg.ARD_DIGINPUT = "Digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_COMPONENT = "Digital Input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_DEFAULT_NAME = "DigInput1";  // untranslated
Blockly.Msg.ARD_DIGINPUT_READ = "Read digital input";  // untranslated
Blockly.Msg.ARD_DIGINPUT_TIP = "Connect a digital input to a digital pin, so as to read its value. The digital state can then be read, corresponding to 0V or 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";  // untranslated
Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";  // untranslated
Blockly.Msg.ARD_DIGITALWRITEVAR_TIP = "Write digital value to a Port, the value and port can be computed variables";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT = "Digital output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_COMPONENT = "Digital Output";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_DEFAULT_NAME = "DigOutput1";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_TIP = "Connect a generic digital ouput to a digital pin, so as to write to that pin. The digital state can be set to LOW or HIGH, corresponding to 0V and 5V on the pin for an Arduino UNO.";  // untranslated
Blockly.Msg.ARD_DIGOUTPUT_WRITE = "Write to digital output";  // untranslated
Blockly.Msg.ARD_DIORAMA_BOARD_TIP = "The Ingegno Diorama board - See manual for info";  // untranslated
Blockly.Msg.ARD_DIORAMA_BTN_TIP = "Diorama button code, executed in a loop once the button has been pressed";  // untranslated
Blockly.Msg.ARD_DIO_BOARD_MISSING = "No Diorama board present. Add it to the canvas!";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT = "Show on display: ";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_TIP = "Give a text of 8 characters to show on the diorama display";  // untranslated
Blockly.Msg.ARD_DIO_DISPLAYTEXT_WARNING = "Text can only be 8 long, not longer!";  // untranslated
Blockly.Msg.ARD_DIO_LESSLOUD = "Diorama: less loud output";  // untranslated
Blockly.Msg.ARD_DIO_LOUDER = "Diorama: louder output";  // untranslated
Blockly.Msg.ARD_DIO_PLAYTRACK = "Play track number ";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN = "stop buttons";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTNNR_TIP = "Stop action of the given button.";  // untranslated
Blockly.Msg.ARD_DIO_RESETBTN_TIP = "Reset the buttons, so no button is considered pressed.";  // untranslated
Blockly.Msg.ARD_DIO_SETLOUDNESS = "Diorama: set volume to (0-10):";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_TIP = "Change sound output of the Diorama board. If louder or quieter, we stop processing the button after the call.";  // untranslated
Blockly.Msg.ARD_DIO_SOUND_WARNING = "Volume must be between 0 and 10!";  // untranslated
Blockly.Msg.ARD_DIO_STOPBTN = "Pushbutton 8: stop";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK = "Stop playing";  // untranslated
Blockly.Msg.ARD_DIO_STOPTRACK_TIP = "Immediately stop playing the track that is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING = "track is playing";  // untranslated
Blockly.Msg.ARD_DIO_TRACKPLAYING_TIP = "Return true if a track is still playing, false otherwise";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_TIP = "If number 1, then play a track stored on SD card as 'track001.mp3'";  // untranslated
Blockly.Msg.ARD_DIO_TRACK_WARNING = "Track must be a number between 1 and 100!";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL = "Arduino define up front:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_DECL_TIP = "Code you want to declare up front (use this e.g. for variables you need in setup)";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino loop forever:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino run first:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";  // untranslated
Blockly.Msg.ARD_HIGH = "HIGH";  // untranslated
Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";  // untranslated
Blockly.Msg.ARD_LEDLEG = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEGNEG = "minus";  // untranslated
Blockly.Msg.ARD_LEDLEGPOL = "leg polarity";  // untranslated
Blockly.Msg.ARD_LEDLEGPOS = "plus";  // untranslated
Blockly.Msg.ARD_LEDLEG_COMPONENT = "LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_DEFAULT_NAME = "Led1";  // untranslated
Blockly.Msg.ARD_LEDLEG_OFF = "OFF";  // untranslated
Blockly.Msg.ARD_LEDLEG_ON = "ON";  // untranslated
Blockly.Msg.ARD_LEDLEG_SET = "Set LED";  // untranslated
Blockly.Msg.ARD_LEDLEG_TIP = "A LED light, on of the legs (the positive or negative) is connected to the Arduino. Can be ON or OFF.";  // untranslated
Blockly.Msg.ARD_LEDUP_GADGET = "Gadget LedUpKidz";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB = "LedUpKidz, destination: ";  // untranslated
Blockly.Msg.ARD_LEDUP_HUB_TIP = "LedUpKidz is a gadget with 6 LED that you can program. There is a big prototype connected to an Arduino UNO, choose 'prototype' for code destined for this. The gadget itself works on a small attiny85 microchip, for code with that destination, select destination 'gadget'";  // untranslated
Blockly.Msg.ARD_LEDUP_LED0 = "LED 0";  // untranslated
Blockly.Msg.ARD_LEDUP_LED1 = "LED 1";  // untranslated
Blockly.Msg.ARD_LEDUP_LED2 = "LED 2";  // untranslated
Blockly.Msg.ARD_LEDUP_LED3 = "LED 3";  // untranslated
Blockly.Msg.ARD_LEDUP_LED4 = "LED 4";  // untranslated
Blockly.Msg.ARD_LEDUP_LED5 = "LED 5";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF1 = "Put LedUp LED";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF2 = "on? True/False:";  // untranslated
Blockly.Msg.ARD_LEDUP_LED_ONOFF_TIP = "Set a given LedUpKidz light to on or off using variable blocks";  // untranslated
Blockly.Msg.ARD_LEDUP_PROTO = "Prototype Arduino UNO";  // untranslated
Blockly.Msg.ARD_LOW = "LOW";  // untranslated
Blockly.Msg.ARD_MAP = "Map";  // untranslated
Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";  // untranslated
Blockly.Msg.ARD_MAP_VAL = "value to [0-";  // untranslated
Blockly.Msg.ARD_MD_180SERVO = "0~180 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_360SERVO = "0~360 degree Servo";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK = "AAA 3V Battery module";  // untranslated
Blockly.Msg.ARD_MD_AAABLOCK_TIP = "The battery block for Microduino";  // untranslated
Blockly.Msg.ARD_MD_AAASOUNDWARN = "A AAA Battery module must be added to your blocks if you work with sound";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK = "Loudspeaker (Amplifier) Module";  // untranslated
Blockly.Msg.ARD_MD_AMPBLOCK_TIP = "Amplifier module, connect the loudspeaker to it to hear sound.";  // untranslated
Blockly.Msg.ARD_MD_AMPWARN = "An Amplifier module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_AUDIOAMPWARN = "An Audio module must be added to your blocks if you work with an amplifier";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK = "Sound modules (Audio). Mode:";  // untranslated
Blockly.Msg.ARD_MD_AUDIOBLOCK_TIP = "Audio Function Module, Choose a mode and a volume";  // untranslated
Blockly.Msg.ARD_MD_AUDIOSOUNDWARN = "An Audio module must be added to your blocks to be able to work with music.";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE = "Pause sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PAUSE_TIP = "Pause the sound fragment that is playing";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY = "";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAYNR = "Play sound fragment";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_PLAY_TIP = "Write the number of the sound fragment you want to play. On the this number corresponds to the order in which files have been copied to the SD Card. Best: 1/Empty the SD card 2/copy files to SD card in the order you want to play them 3/it is easier if you name the files 001.mp3, 002.mp3, ... and copy them one after the other to the card!";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP1 = "Repeat everything";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP2 = "Play everything 1 time";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP3 = "Repeat  1 track";  // untranslated
Blockly.Msg.ARD_MD_AUDIO_REP4 = "Play 1 track";  // untranslated
Blockly.Msg.ARD_MD_BLOCKS = "Microduino blocks: ";  // untranslated
Blockly.Msg.ARD_MD_COOKIEBUTTON_COMPONENT = "Microduino MCookie CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK = "Brain (CoreUSB)";  // untranslated
Blockly.Msg.ARD_MD_COREBLOCK_TIP = "The Brain of your construction, the MCookie-CoreUSB";  // untranslated
Blockly.Msg.ARD_MD_COREWARN = "A Brain (CoreUSB) module must be added to your blocks";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_COMPONENT = "Microduino Crash Button";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_DEFAULT_NAME = "Crashbutton1";  // untranslated
Blockly.Msg.ARD_MD_CRASHBUTTON_TIP = "The microduino crash-button with which you can detect if you hit something, or that you can use as a push button.";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK = "The Cable holder (Sensor Hub)";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK01 = "connected to pins:   IIC";  // untranslated
Blockly.Msg.ARD_MD_HUBBLOCK_TIP = "The Hub allows to connect up to 12 sensors to your Microduino";  // untranslated
Blockly.Msg.ARD_MD_NOSERVO = "Geen Servo gekoppeld";  // untranslated
Blockly.Msg.ARD_MD_SERVOBOT_DEFAULT_NAME = "BottomServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON = "Servo Motor Connector.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_BOTTOM = "Define bottom Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TIP = "Servo Motor Connector, can control two Servo (top and bottom). You have to give the servo a name, and what type it is (no servo attached, a 180 degree servo or a 360 degree servo.";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TOP = "Define top Servo";  // untranslated
Blockly.Msg.ARD_MD_SERVOCON_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_MD_SERVOTOP_DEFAULT_NAME = "TopServo1";  // untranslated
Blockly.Msg.ARD_MD_SERVOTYPE_TIP = "Select the type of Servo you attach to the Servo connnector";  // untranslated
Blockly.Msg.ARD_MD_SERVO_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN1 = "A Servo configuration block must be added to the hub to use this block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN2 = "A Name input must be added to the Servo configuration block!";  // untranslated
Blockly.Msg.ARD_MD_SERVO_STEP_WARN3 = "Selected servo does not exist any more, please select a new one.";  // untranslated
Blockly.Msg.ARD_MD_SERVO_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_NEOPIXEL = "NeoPixel LED light";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_BRIGHTNESS = " brightness (%)";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_COMPONENT = "Neopixel strip";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_DEFAULT_NAME = "NeoPixel1";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_HZ = "Frequency:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOUR = "on colour";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALBLUE = "blue:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALGREEN = "green:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_ONCOLOURVALRED = "on colour (0-255) red:";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXEL = "pixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_PIXELS = "Pixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_SET = "Set Neopixel";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_STRIP = "Strip with";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TIP = "A NEOPIXEL LED light or a strip with multiple neopixels.";  // untranslated
Blockly.Msg.ARD_NEOPIXEL_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";  // untranslated
Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";  // untranslated
Blockly.Msg.ARD_NO_ALLBOT = "No AllBot present";  // untranslated
Blockly.Msg.ARD_OUTPUT_WRITE_TO = "value";  // untranslated
Blockly.Msg.ARD_PIN_AN = "analog pin";  // untranslated
Blockly.Msg.ARD_PIN_AN_TIP = "One of the analog pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_DIG = "digital pin";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG = "digital pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG1 = "digital pin1#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG2 = "pin2#";  // untranslated
Blockly.Msg.ARD_PIN_DIGDIG_TIP = "Component requiring two digital pins, pin1 and pin2";  // untranslated
Blockly.Msg.ARD_PIN_DIG_TIP = "One of the digital pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_PWM = "PWM pin";  // untranslated
Blockly.Msg.ARD_PIN_PWM_TIP = "One of the Pulse Width Modeling (PWM) pins of the Arduino Board";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";  // untranslated
Blockly.Msg.ARD_PULSEON = "pulse on pin #";  // untranslated
Blockly.Msg.ARD_PULSEREAD = "Read";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT = "timeout after";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_MS = "";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the timeout.";  // untranslated
Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";  // untranslated
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 μs)";  // untranslated
Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT = "PWM output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_COMPONENT = "PWM Output";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_DEFAULT_NAME = "PWMOutput1";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_TIP = "Connect a generic PWM (Pulse Width Modulation) ouput to a pwm pin, so as to write an analog value to that pin. The value written should be a number between 0 and 255, and will generate a block pulse over this pin.";  // untranslated
Blockly.Msg.ARD_PWMOUTPUT_WRITE = "Write to PWM output";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT = "print";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";  // untranslated
Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";  // untranslated
Blockly.Msg.ARD_SERVOHUB = "Servo motor";  // untranslated
Blockly.Msg.ARD_SERVOHUB_READ = "read Servo ";  // untranslated
Blockly.Msg.ARD_SERVOHUB_TIP = "Servo Motor Connection, which can attach to a PWM pin. You have to give the servo a name, and what type it is (a 180 degree servo or a 360 degree servo.)";  // untranslated
Blockly.Msg.ARD_SERVOHUB_WRITE = "set 180 degree Servo ";  // untranslated
Blockly.Msg.ARD_SERVO_COMPONENT = "servo";  // untranslated
Blockly.Msg.ARD_SERVO_DEFAULT_NAME = "Servo1";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";  // untranslated
Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATE360 = "Rotate 360 degree Servo";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATEPERC = "% (-100 to 100)";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATESPEED = "with speed";  // untranslated
Blockly.Msg.ARD_SERVO_ROTATE_TIP = "Turn a Servo with a specific speed";  // untranslated
Blockly.Msg.ARD_SERVO_TYPE = "Type:";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TO = "to";  // untranslated
Blockly.Msg.ARD_SETTONE = "Set tone on pin #";  // untranslated
Blockly.Msg.ARD_SPI_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";  // untranslated
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_NONE = "none";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";  // untranslated
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEGREES = "degrees";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";  // untranslated
Blockly.Msg.ARD_STEPPER_ISROTATING = "in movement";  // untranslated
Blockly.Msg.ARD_STEPPER_ISROTATING_TIP = "Returns true if the stepper is moving.";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART = "Get";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_AFTER = "ready";  // untranslated
Blockly.Msg.ARD_STEPPER_RESTART_TIP = "Reset the motor ready after a rotation block has finished, so as to be able to rotate again";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";  // untranslated
Blockly.Msg.ARD_STEPPER_ROTATE = "Rotate";  // untranslated
Blockly.Msg.ARD_STEPPER_ROTATE_TIP = "Rotate the stepper motor over a number of degrees in a non-blocking way. This block must be called in the loop. When finished the stepper is blocked, and a call to restart movement is needed for the block to cause a next movement.";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED_TIP = "Sets speed of the stepper motor. The steps are set at the speed needed to have the set RPM speed based on the given steps per revolution in the constructor.";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "move stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_STEPS = "steps";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "wait";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";  // untranslated
Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";  // untranslated
Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";  // untranslated
Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MS = "milliseconds";  // untranslated
Blockly.Msg.ARD_TONEDURATION = "and duration (ms)";  // untranslated
Blockly.Msg.ARD_TONEDURATION_TIP = "Sets tone on a buzzer to the specified frequency within range 31 - 65535 and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "at frequency";  // untranslated
Blockly.Msg.ARD_TONEPITCH_TIP = "Sets tone on a buzzer to the specified pitch and given duration in milliseconds. Careful: a durations continues, also during delays, a new tone can only be given if a previous tone is terminated!";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequency";  // untranslated
Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";  // untranslated
Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";  // untranslated
Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING2 = "A duration must be positive (>0)";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";  // untranslated
Blockly.Msg.ARD_TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.ARD_TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";  // untranslated
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";  // untranslated
Blockly.Msg.ARD_TYPE_LONG = "Large Number";  // untranslated
Blockly.Msg.ARD_TYPE_NULL = "Null";  // untranslated
Blockly.Msg.ARD_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.ARD_TYPE_SHORT = "Short Number";  // untranslated
Blockly.Msg.ARD_TYPE_TEXT = "Text";  // untranslated
Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";  // untranslated
Blockly.Msg.ARD_UNKNOWN_ALLBOTJOINT = "The old joint value %1 is no longer available";  // untranslated
Blockly.Msg.ARD_VAR_AS = "as";  // untranslated
Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";  // untranslated
Blockly.Msg.ARD_WRITE_TO = "to";  // untranslated
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
Blockly.Msg.REPLACE_EXISTING_BLOCKS = "Replace existing blocks? 'Cancel' will merge.";  // untranslated
Blockly.Msg.UPLOAD_CLICK_1 = "To Upload your code to Arduino:";  // untranslated
Blockly.Msg.UPLOAD_CLICK_2 = "  1. click on the Arduino tab";  // untranslated
Blockly.Msg.UPLOAD_CLICK_3 = "  2. select all the code, and copy (CTRL+A and CTRL+C)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_4 = "  3. In the Arduino IDE or in a http://codebender.cc sketch, paste the code (CTRL+V)";  // untranslated
Blockly.Msg.UPLOAD_CLICK_5 = "  4. Upload to your connected Arduino";  // untranslated
Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TITLE_IF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_IF;
Blockly.Msg.ARD_CONTROLS_EFFECT_IF_TOOLTIP = Blockly.Msg.CONTROLS_IF_IF_TOOLTIP;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSEIF_TITLE_ELSEIF = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSEIF;
Blockly.Msg.ARD_CONTROLS_EFFECT_ELSE_TITLE_ELSE = Blockly.Msg.ARD_CONTROLS_EFFECT_MSG_ELSE;